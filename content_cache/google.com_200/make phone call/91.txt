<!doctype html>
<html itemscope itemtype="http://schema.org/Article">
 <head> 
  <title>Fullstack React: How to get "create-react-app" to work with your API</title> 
  <meta name="description" content=""> 
  <meta charset="utf-8"> 
  <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
  <link rel="shortcut icon" sizes="16x16 32x32 64x64" type="image/x-icon" href="/assets/images/icons/favicon.ico?v=2"> 
  <!-- Schema.org markup for Google+ --> 
  <meta itemprop="name" content="Fullstack React: How to get " create-react-app" to work with your API"> 
  <meta itemprop="description" content=""> 
  <!-- Twitter Card data --> 
  <meta name="twitter:card" content="summary_large_image"> 
  <meta name="twitter:site" content="@fullstackreact"> 
  <meta name="twitter:title" content="Fullstack React: How to get " create-react-app" to work with your API"> 
  <meta name="twitter:description" content=""> 
  <meta name="twitter:creator" content="@fullstackreact"> 
  <!-- Open Graph data --> 
  <meta property="og:title" content="Fullstack React: How to get " create-react-app" to work with your API"> 
  <meta property="og:type" content="article"> 
  <meta property="og:description" content=""> 
  <meta property="og:site_name" content="Fullstack React"> 
  <meta property="article:published_time" content="Thu Jul 28 2016 08:53:00 GMT-0700 (PDT)"> 
  <!--
  <meta property="og:url" content="http://www.example.com/" />
  <meta property="article:section" content="Article Section" />
  <meta property="article:tag" content="Article Tag" />
  <meta property="fb:admins" content="Facebook numberic ID" />
  --> 
  <meta name="twitter:image:src" content="/assets/images/articles/cra-with-server/hero.jpg"> 
  <meta property="og:image" content="/assets/images/articles/cra-with-server/hero.jpg"> 
  <meta itemprop="image" content="/assets/images/articles/cra-with-server/hero.jpg"> 
  <!-- Vendor Styles --> 
  <link href="https://fonts.googleapis.com/css?family=Open+Sans:400,300,700,400italic,500,600,700italic,300italic|Source+Sans+Pro:700,300,400italic,400,300italic,700italic|Lora:400italic,700italic,400,700" rel="stylesheet" type="text/css"> 
  <link rel="stylesheet" type="text/css" href="https://cloud.typography.com/7767712/7205752/css/fonts.css"> 
  <!-- App Styles --> 
  <link rel="stylesheet" href="/assets/css/style.css?v=9"> 
  <!-- Vendor JS --> 
  <script src="/assets/vendor/jquery-1.11.3.min.js"></script> 
  <script src="/assets/vendor/bootstrap-less/js/bootstrap.min.js"></script> 
  <script>
  if (window.location.host != 'localhost') {
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-28176211-11', 'auto', {'allowLinker': true});
    ga('require', 'linkid');
    ga('require', 'linker');
    ga('linker:autoLink', ['gumroad.com']);
    ga('send', 'pageview');
  }
</script> 
  <script>var om57e2da057edf6,om57e2da057edf6_poll=function(){var r=0;return function(n,l){clearInterval(r),r=setInterval(n,l)}}();!function(e,t,n){if(e.getElementById(n)){om57e2da057edf6_poll(function(){if(window['om_loaded']){if(!om57e2da057edf6){om57e2da057edf6=new OptinMonsterApp();return om57e2da057edf6.init({"s":"23247.57e2da057edf6","staging":0,"dev":0,"beta":0});}}},25);return;}var d=false,o=e.createElement(t);o.id=n,o.src="//a.optnmnstr.com/app/js/api.min.js",o.onload=o.onreadystatechange=function(){if(!d){if(!this.readyState||this.readyState==="loaded"||this.readyState==="complete"){try{d=om_loaded=true;om57e2da057edf6=new OptinMonsterApp();om57e2da057edf6.init({"s":"23247.57e2da057edf6","staging":0,"dev":0,"beta":0});o.onload=o.onreadystatechange=null;}catch(t){}}}};(document.getElementsByTagName("head")[0]||document.documentElement).appendChild(o)}(document,"script","omapi-script");</script> 
  <script type="text/javascript" src="https://fd338.infusionsoft.com/app/webTracking/getTrackingCode?trackingId=3d09dd8caed968d48e9807c6ff5d0651"></script> 
 </head> 
 <body class="pushable  blog "> 
  <div class="wrapper"> 
   <header class="header navbar-default"> 
    <div class="header"> 
     <header class="header navbar-default"> 
      <div class="container"> 
       <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#menu" aria-expanded="false"> <span class="sr-only">Toggle navigation</span> <span class="icon-bar"></span> <span class="icon-bar"></span> <span class="icon-bar"></span> </button> 
       <div class="navbar-collapse collapse" id="menu"> 
        <ul class="nav navbar-nav"> 
         <!--
        <li>
          <a href="/#table-of-contents">Table of Contents</a>
        </li>
        --> 
         <!--
        <li>
          <a href="/#testimonials">Testimonials</a>
        </li>
        --> 
         <li><a href="/30-days-of-react">30 Days of React</a></li> 
         <li> <a href="http://newsletter.fullstackreact.com">Newsletter</a> </li> 
         <li><a href="/articles">Blog</a></li> 
         <li><a href="/react-daily-ui">Daily UI</a></li> 
         <li> <a href="/" class="btn btn-default btn-mobile-block">Get The Book</a> </li> 
        </ul>
        <!-- /.nav --> 
       </div>
       <!-- /.navbar-collapse --> 
       <a href="/" class="navbar-brand navbar-react">Fullstack React</a> 
      </div>
      <!-- /.container --> 
     </header>
     <!-- /.header --> 
    </div> 
   </header>
   <!-- /.header --> 
   <main class="main"> 
    <div class="article"> 
     <div class="intro"></div> 
     <div class="masthead"> 
      <div class="container"> 
       <img src="/assets/images/articles/cra-with-server/hero.jpg" class="img-responsive hero"> 
       <h2>How to get "create-react-app" to work with your API</h2> 
      </div> 
     </div> 
     <div class="container content"> 
      <div class="row article-content"> 
       <div class="col-lg-12 col-sm-12"> 
        <p></p> 
        <p>In this post, we detail how to use the <code>create-react-app</code> project along with an API server.</p> 
        <blockquote> 
         <p>Update (8/3/2016): We now have a mirror for this post that uses Rails. <a href="/articles/how-to-get-create-react-app-to-work-with-your-rails-api">Check out that post</a> if Rails is your preferred API server platform.</p> 
         <p>Update (8/25/2016): <code>react-scripts</code> version <code>0.2.3</code> was released, adding a proxy feature for the Webpack development server to address CORS issues in development. This post has been updated to utilize this feature.</p> 
         <p>Update (11/21/2016): We updated the repository to be cross-platform (Mac/Unix/Windows).</p> 
         <p>Update (2/8/2017): Tested and working on latest version of <code>react-scripts</code>.</p> 
        </blockquote> 
        <p>Anyone who tells you that React is easy to get started with isn't lying. You can drop React into your production application, today. All you have to do is include React and ReactDOM in some script tags:</p> 
        <pre><code>&lt;script src='https://cdnjs.cloudflare.com/ajax/libs/react/15.2.1/react.min.js'&gt;&lt;/script&gt;
&lt;script src='https://cdnjs.cloudflare.com/ajax/libs/react/15.2.1/react-dom.min.js'&gt;&lt;/script&gt;
</code></pre> 
        <p>However, if you're like most developers, you will be quickly lured away from these tranquil waters. JSX, ES6, ES6 modules, hot reloading — pick your bait.</p> 
        <p>While there are discrete steps you can take to enable individual advantages, you'll hit limitations with each sooner or later. For example, you can load <code>babel</code> in <code>script</code> tags and get JSX and ES6. But you'll start running into problems when you want to break up your app across files and use the ES6 module pattern or roll out browser-less unit tests.</p> 
        <p>Sure, not all roads lead to a JavaScript bundler. But developers starting out have many compelling reasons to want to use one. A well-configured environment gives you the ability to use the complete ES6 feature set as well as other bells and whistles like hot reloading.</p> 
        <h2 id="enter-create-react-app"><a class="headingAnchor" href="#enter-create-react-app"><span></span></a>Enter <code>create-react-app</code></h2> 
        <p>There are loads of boilerplates and libraries to help you get started with a more advanced React setup. But the Facebook team recognized that as long as there wasn't a core-team sanctioned solution, the community was likely to remain splintered. The first steps for a more complex React setup can be confusing for novice and experienced developers alike.</p> 
        <p>The <code>create-react-app</code> project aims to provide a canonical manner for initiating a new React app for those that want the benefits of a more complex setup but don't want to deal with the configuration.</p> 
        <p>In this post, we'll explore using <code>create-react-app</code> alongside a Node+Express API server.</p> 
        <p>We supply the React components used in this post. Therefore, even if you're not familiar with React, follow along and you'll see how the components of a modern web application fit together. We do assume basic knowledge of JavaScript/HTML/web servers.</p> 
        <blockquote> 
         <p>If you're interested in learning the ins and outs of React, our book <a href="https://fullstackreact.com">fullstackreact.com</a> starts at the ground floor and sprawls out to cover advanced techniques and other tools in the React ecosystem.</p> 
        </blockquote> 
        <h3 id="dependencies"><a class="headingAnchor" href="#dependencies"><span></span></a>Dependencies</h3> 
        <p>Many of the shell commands below are for Mac/*nix. But the code itself has been fully tested on Windows.</p> 
        <p>You'll need <a href="https://www.npmjs.com/">NPM</a> installed.</p> 
        <h2 id="getting-started"><a class="headingAnchor" href="#getting-started"><span></span></a>Getting started</h2> 
        <p>Our sample app will be a simple food nutrition lookup table. The data driving the app is supplied by the USDA's <a href="https://www.ars.usda.gov/northeast-area/beltsville-md/beltsville-human-nutrition-research-center/nutrient-data-laboratory/docs/usda-national-nutrient-database-for-standard-reference/">National Nutrient Database</a>.</p> 
        <p>We'll take a look at the working app first. Then we'll strip down the app to just the Node+Express server and build it back up by adding in our React app.</p> 
        <p>First, git clone the repository:</p> 
        <pre><code>$ git clone <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="8cebe5f8ccebe5f8e4f9eea2efe3e1">[email&nbsp;protected]</a>:fullstackreact/food-lookup-demo
</code></pre> 
        <p><code>cd</code> into that directory. The layout should look like this:</p> 
        <pre><code>$ cd food-lookup-demo
$ ls
Procfile
README.md
client/
db/
flow-diagram.png
package.json
server.js
start-client.js
</code></pre> 
        <p>This is where the server lives (aptly, <code>server.js</code>). Inside of the <code>db</code> folder is a sqlite database containing the nutrition data. The <code>package.json</code> in this folder specifies the dependencies for the server.</p> 
        <p>Peeking into the <code>client</code> directory:</p> 
        <pre><code>$ ls client
package.json
public/
src/
tests/
</code></pre> 
        <p>Of interest, we have <em>two</em> <code>package.json</code> files in this project — one here and one up top. The client and the server specify their own dependencies independently. For all intents and purposes, they are two completely separate apps that could exist in their own discrete git repos.</p> 
        <p>Let's install the dependencies for both:</p> 
        <pre><code>$ npm i &amp;&amp; cd client &amp;&amp; npm i &amp;&amp; cd ..
</code></pre> 
        <blockquote> 
         <p>The <code>&amp;&amp;</code> operator is Mac/Unix specific.</p> 
        </blockquote> 
        <p>And then we'll be ready to boot from the <strong>top-level directory</strong>:</p> 
        <pre><code>$ npm start
</code></pre> 
        <p>Your browser should open <code>localhost:3000</code> automagically. Behold, the most advanced and nutritious interface V8 has ever rendered:</p> 
        <p><img src="../../assets/images/articles/cra-with-server/full-food-demo.gif" alt="Demo of the completed app"></p> 
        <h3 id="tearing-it-down"><a class="headingAnchor" href="#tearing-it-down"><span></span></a>Tearing it down</h3> 
        <p>Let's shut down the app with <code>CTRL+C</code> and strip out everything but the server and see how we got here:</p> 
        <pre><code>^C
[0] npm run server exited with code null
[1] npm run client exited with code null

$ git checkout starting-point
</code></pre> 
        <p>This removes the files inside <code>client/</code>.</p> 
        <p>The <code>client</code> folder is probably still hanging around. That's because the untracked <code>node_modules</code> folder is inside. Kill it:</p> 
        <pre><code>$ rm -r client
</code></pre> 
        <h2 id="the-server"><a class="headingAnchor" href="#the-server"><span></span></a>The server</h2> 
        <p>Let's boot the server:</p> 
        <pre><code>$ npm run server
</code></pre> 
        <p>We're only booting up the server as we don't have the client yet. This server provides a single API endpoint, <code>/api/food</code>. It expects a single parameter, <code>q</code>, the food we are searching for.</p> 
        <p>You can give it a spin. The server is on <code>3001</code>. You can use <code>curl</code> or your browser. The example below pipes to the tool <a href="https://stedolan.github.io/jq/">jq</a> for human readability:</p> 
        <pre><code>$ curl localhost:3001/api/food?q=hash+browns | jq '.'

[
  {
    "description": "Fast foods, potatoes, hash browns, rnd pieces or patty",
    "kcal": 272,
    "protein_g": 2.58,
    "carbohydrate_g": 28.88,
    "sugar_g": 0.56
  },
  {
    "description": "Chick-fil-a, hash browns",
    "kcal": 301,
    "protein_g": 3,
    "carbohydrate_g": 30.51,
    "sugar_g": 0.54
  },
  {
    "description": "Denny's, hash browns",
    "kcal": 197,
    "protein_g": 2.49,
    "carbohydrate_g": 26.59,
    "sugar_g": 1.38
  },
  {
    "description": "Restaurant, family style, hash browns",
    "kcal": 197,
    "protein_g": 2.49,
    "carbohydrate_g": 26.59,
    "sugar_g": 1.38
  }
]
</code></pre> 
        <blockquote> 
         <p>Mmm, Chick-fil-A. Really hope you're not reading this on a Sunday.</p> 
        </blockquote> 
        <p>Now that we understand how this endpoint works, let's build the front-end application. Kill the server with CTRL+C.</p> 
        <h2 id="here-we-go"><a class="headingAnchor" href="#here-we-go"><span></span></a>Here we go</h2> 
        <p>Ensure that you have <code>create-react-app</code> <b>i</b>nstalled <b>g</b>lobally:</p> 
        <pre><code>$ npm i -g create-react-app
</code></pre> 
        <p>And then at the top-level directory of the project we'll create our client app. We want the React app to be in a folder called <code>client</code>, so we'll just use that name in the <code>create-react-app</code> command:</p> 
        <pre><code>$ create-react-app client
</code></pre> 
        <p>This creates a new directory with the following file structure:</p> 
        <pre><code>$ ls client
README.md
node_modules/
package.json
public/
src/
</code></pre> 
        <p>Taking a look at <code>client/package.json</code>, we note a single dev dependency:</p> 
        <pre><code>{
  "name": "client",
  "version": "0.1.0",
  "private": true,
  "devDependencies": {
    "react-scripts": 0.8.5"
  },
  "dependencies": {
    "react": "^15.4.0",
    "react-dom": "^15.4.0"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "eject": "react-scripts eject"
  }
}
</code></pre> 
        <p>What, exactly, is <code>react-scripts</code>?</p> 
        <h3 id="react-scripts"><a class="headingAnchor" href="#react-scripts"><span></span></a><code>react-scripts</code></h3> 
        <p><code>react-scripts</code> is an NPM package specifically for use with <code>create-react-app</code>. It's the "black box" which contains the essentials:</p> 
        <ul> 
         <li> <p>Dependencies</p> 
          <ul> 
           <li>Like Babel, ESLint, and Webpack.</li> 
          </ul> </li> 
         <li> <p>Configuration</p> 
          <ul> 
           <li>Config files for Webpack, Babel and ESLint, both for development and production.</li> 
          </ul> </li> 
         <li> <p>Scripts</p> 
          <ul> 
           <li>For instance, the command <code>react-scripts start</code> runs a script shipped with this package. It's responsible for ultimately booting the Webpack development server.</li> 
          </ul> </li> 
        </ul> 
        <p>To see it in action, we can run <code>npm start</code> from inside of this folder:</p> 
        <pre><code>$ cd client &amp;&amp; npm start
</code></pre> 
        <p>This will launch a Webpack dev server and should also open <code>localhost:3000</code> in your browser if you're on a Mac:</p> 
        <p><img src="../../assets/images/articles/cra-with-server/boilerplate-page.png" alt="The boilerplate create-react-app page"></p> 
        <p>We have our API server in the top-level directory and we were able to boot that. And we have our client app down here in <code>client</code> and we're able to boot a server for this.</p> 
        <p>But why does our React app need its own server? And how are we going to get these two servers working together?</p> 
        <p>Understanding this requires getting down to The Rub.</p> 
        <h2 id="the-rub-"><a class="headingAnchor" href="#the-rub-"><span></span></a>The Rub ™</h2> 
        <p>Webpack is a JavaScript bundler. You might have many different JavaScript modules, like React components and Redux reducers, strewn across many different files. Webpack rolls these up into one gigantic "bundle." Think of the bundle as a combination of a vanilla <code>index.html</code> that includes a file <code>bundle.js</code>. This JavaScript file is one big, long file with every line of JavaScript that your app depends on, all shoved into one location. This single file will contain browser-ready JavaScript as Babel will have already worked its transpiling magic.</p> 
        <p>You can instruct Webpack you would like it to produce this bundle. <code>create-react-app</code> inserts a <code>build</code> command into <code>package.json</code>:</p> 
        <pre><code>$ npm run build
</code></pre> 
        <p>This command kicks off Webpack and Webpack spits out a bundle. You could then serve the <code>index.html</code> from that bundle wherever you'd like.</p> 
        <p>So, we <em>could</em> use Webpack to generate this bundle. And we <em>could</em> have our API server serve the static asset <code>index.html</code>. We'd run the <code>build</code> command inside <code>client/</code> and out would come the magic <code>build</code> folder. We could then serve this folder with our API server.</p> 
        <p>And it would work. And we might even be happy about it.</p> 
        <p>However, there's a better approach: You can have Webpack boot a little Node server to serve the bundle. This means that when you make updates to your JavaScript/assets, you don't have to re-build and re-load — you just hit the server again to get the latest bundle. This workflow enables hot reloading, where your web app will reload itself when assets change, saving your modifier+R keys from a significant amount of wear.</p> 
        <p>In fact, if you run <code>npm run build</code> you'll find that this command is intended for production use. It does all kinds of optimization that can be time consuming — aggravating when you're quickly iterating in development. Booting a Webpack dev server is the way to go.</p> 
        <blockquote> 
         <p>In production, we'll use <code>npm run build</code> to create our static bundle. We can then throw that bundle anywhere (like S3), independent of the API server. The README of the GitHub repo for this project describes the process.</p> 
        </blockquote> 
        <p>So the user will direct their browser to <code>localhost:3000</code>, hitting the Webpack dev server. But then how will the React app communicate with our API server?</p> 
        <p>Our intuition would be to have a flow like this:</p> 
        <p><img src="../../assets/images/articles/cra-with-server/flow-diagram-erroneous.png" alt="Flow diagram of an erroneous approach"></p> 
        <p>In this flow, the user's browser makes a request to <code>localhost:3000</code>, loading the static assets from the Webpack dev server. The user's browser / React then makes requests as needed directly to the API server hosted on <code>localhost:3001</code> with calls like this:</p> 
        <pre class="language-js"><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'localhost:3001/api/foods?q=carrots'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
        <p>This would produce an issue, however. The React app (hosted at <code>localhost:3000</code>) would be attempting to load a resource from a different origin (<code>localhost:3001</code>). This would be performing <strong>Cross-Origin Resource Sharing</strong>. The browser prevents these types of requests from scripts for security reasons.</p> 
        <p><code>create-react-app</code> provides a mechanism for working with an API server in development. We can have the Webpack development server <em>proxy</em> requests intended for our API server, like this:</p> 
        <p><img class="wide" src="../../assets/images/articles/cra-with-server/flow-diagram-2.png" alt="Flow diagram of the approach with a proxy"></p> 
        <p>In this flow, React makes an API request to <code>localhost:3000</code>, the Webpack development server. And then the development server simply proxies that request to the API server, negating any CORS issues.</p> 
        <p>So, the Rub: we need to (1) launch both the Webpack dev server and the API server in order to run the app locally. And then (2) we need to get the Webpack dev server to proxy requests intended for our API server.</p> 
        <p>For the first challenge, we could use two terminal windows: boot each server in its own window. But we could get a bit fancier.</p> 
        <h2 id="concurrently"><a class="headingAnchor" href="#concurrently"><span></span></a>Concurrently</h2> 
        <p><a href="https://github.com/kimmobrunfeldt/concurrently">Concurrently</a> is a utility for running multiple processes. We'll see how it works by implementing it.</p> 
        <p>Make sure you're in the top-level directory and install it with npm:</p> 
        <pre><code>$ npm i --save-dev concurrently
</code></pre> 
        <p>We want concurrently to execute two commands, one to boot the API server and one to boot the Webpack development server. You boot multiple commands by passing them to concurrently in quotes like this:</p> 
        <pre><code>$ concurrently "command1" "command2"
</code></pre> 
        <p>If you were writing your app to just work on Mac or Unix machines, you could do something like this:</p> 
        <pre><code>$ concurrently "npm run server" "cd client &amp;&amp; npm start"
</code></pre> 
        <p>Note the second command for booting the client first changes into the <code>client</code> directory and then runs <code>npm start</code>.</p> 
        <p>However, the <code>&amp;&amp;</code> operator is not cross-platform (doesn't work on Windows). As such, we've included a <code>start-client.js</code> script with the project. This script will boot the client from the top-level directory in a manner that is cross-platform.</p> 
        <p>Ultimately, we'll want to boot <code>concurrently</code> like this:</p> 
        <pre><code>$ concurrently "npm run server" "npm run client"
</code></pre> 
        <p>This will be our <code>start</code> command. Let's add the <code>start</code> and <code>client</code> commands to our <code>package.json</code> now:</p> 
        <pre><code>"scripts": {
    "start": "concurrently \"npm run server\" \"npm run client\"",
    "server": "node server.js",
    "client": "node start-client.js"
  },
</code></pre> 
        <p>For <code>start</code>, we execute both commands, <strong>escaping the quotes</strong> because we're in a JSON file. For <code>client</code>, we execute the <code>start-client.js</code> script with <code>node</code>.</p> 
        <p>Now we can boot both servers by running <code>npm start</code>.</p> 
        <p>With the foundations in place, let's wire the two up. We'll toss in the food lookup React components which will make requests against our API server.</p> 
        <h2 id="the-apps-react-components"><a class="headingAnchor" href="#the-apps-react-components"><span></span></a>The app's React components</h2> 
        <p>Let's steal the React source files from the <code>master</code> branch. This will save you from some copying &amp; pasting:</p> 
        <pre><code>$ git checkout master -- {client/src,client/semantic,client/semantic.json}
</code></pre> 
        <p>We use <a href="semantic-ui.com">Semantic UI</a> for styling the app, which we copy over as well. It's loaded inside of <code>src/index.js</code>. <code>index.css</code> contains a few kludgey margins.</p> 
        <p>For brevity, we won't walk through the React components. For the purposes of reading along, you just need to know that changing the value of the search bar (the <code>FoodSearch</code> component) ultimately calls <code>search()</code> on <code>Client</code>.</p> 
        <p><code>Client.js</code> contains a <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">Fetch</a> call to our API endpoint:</p> 
        <br> 
        <p></p>
        <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">search</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`/api/food?q=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>query<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    accept<span class="token punctuation">:</span> <span class="token string">'application/json'</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>checkStatus<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>parseJSON<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
        <p></p> 
        <p>This is the one touch point between our React web app and the API server.</p> 
        <p>Notice how the URL <em>does not include the base</em> <code>localhost:3001</code>. That's because, as noted earlier, we want this request to be made to the Webpack development server. Thanks to the configuration established by <code>create-react-app</code>, the Webpack dev server will infer what traffic to proxy. It will proxy a request if the URL is not recognized or if the request is not loading static assets (like HTML/CSS/JS).</p> 
        <p>We just need to instruct Webpack to use the proxy.</p> 
        <blockquote> 
         <p>If you're not coding along at home and want to take a peek at <code>FoodSearch.js</code>, just check it out <a href="https://github.com/fullstackreact/food-lookup-demo/blob/master/client/src/FoodSearch.js">over on GitHub</a>.</p> 
        </blockquote> 
        <h2 id="setting-up-the-proxy"><a class="headingAnchor" href="#setting-up-the-proxy"><span></span></a>Setting up the proxy</h2> 
        <p>To have the Webpack development server proxy our API requests to our API server, we just need to add the following line to <code>client/package.json</code>:</p> 
        <pre class="language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Inside client/package.json</span>
<span class="token string">"proxy"</span><span class="token punctuation">:</span> <span class="token string">"http://localhost:3001/"</span><span class="token punctuation">,</span>
</code></pre> 
        <p>We're set.</p> 
        <h2 id="testing-it-out"><a class="headingAnchor" href="#testing-it-out"><span></span></a>Testing it out</h2> 
        <p>Our React app is ready and in place in <code>client/</code>. We have <code>concurrently</code> setup to boot both our Webpack dev server and our API server together. And we've specified the route that Webpack should proxy API traffic to.</p> 
        <p>Let's boot both servers:</p> 
        <pre><code>$ npm start
</code></pre> 
        <p>We're in business!</p> 
        <p><img src="../../assets/images/articles/cra-with-server/final-shot.png" alt="Final shot"></p> 
        <h2 id="taking-it-further"><a class="headingAnchor" href="#taking-it-further"><span></span></a>Taking it further</h2> 
        <h3 id="deployment"><a class="headingAnchor" href="#deployment"><span></span></a>Deployment</h3> 
        <p>When using Webpack/create-react-app, you have a few options for deployment.</p> 
        <p>create-react-app comes with a build command that you can use to create a static bundle of the React app:</p> 
        <pre><code>$ cd client
$ npm run build
</code></pre> 
        <p>This produces a <code>build/</code> folder which you can serve with any static asset host. It contains all your app's HTML, JavaScript, and CSS files.</p> 
        <p>You can upload this folder to a host like S3 and deploy your app to AWS. Or, you can have the API server also serve your static assets. The GitHub repo of this app contains an example of the app prepared for deployment. Check out the <a href="https://github.com/fullstackreact/food-lookup-demo#deploying">Heroku section of the README</a>.</p> 
        <h3 id="want-more"><a class="headingAnchor" href="#want-more"><span></span></a>Want more?</h3> 
        <p>If you liked this post and want to learn more about Webpack and create-react-app, you would love our book <a href="http://fullstackreact.com/">Fullstack React</a> because it contains an entire chapter on the topic.</p> 
       </div> 
      </div> 
      <div class="row"> 
       <hr> 
       <div class="author"> 
        <div class="row"> 
         <div class="col-sm-4"> 
          <img class="avatar" src="/assets/images/authors/anthony-accomazzo.png"> 
         </div> 
         <div class="col-sm-8"> 
          <h2>Anthony Accomazzo</h2> 
          <div> 
           <p> Passionate about teaching, Anthony has coached many beginning programmers through their early stages. Before <em>Fullstack React</em>, he led the development of IFTTT's API platform. A minimalist and a traveler, Anthony has been living out of a backpack for the past year. </p> 
          </div> 
         </div> 
        </div> 
       </div> 
      </div> 
     </div> 
     <div class="container newsletter-cta"> 
      <div class="row"> 
       <div class="col-xs-12 col-lg-12 col-md-12"> 
        <div class="action"> 
         <img src="/assets/images/features/icon2_dolphin.png" alt="" height="170" class="icon"> 
         <h2><strong><i>Stay up to date with React...</i></strong></h2> 
         <p> Fullstack React is a weekly newsletter about the React ecosystem with an emphasis on useful libraries, tutorials and code. Subscribe to read the best articles each week on React, Flux, GraphQL, Relay, and friends.</p> 
         <div class="form-container"> 
          <form class="form-inline" role="form" action="https://fullstackreact.curated.co/email_subscribers" id="subscribe-form" method="post" novalidate> 
           <div class="form-group"> 
            <label class="sr-only" for="exampleInputEmail2">Email address</label> 
            <input type="email" class="form-control" name="email" id="subscribe-email" placeholder="Enter email"> 
           </div> 
           <a class="btn btn-success btn-xs" href=""> <i class="glyphicon glyphicon-envelope"></i> Sign Up </a> 
          </form> 
          <div class="help">
            Join hundreds of developers. No spam ever &amp; it's easy to unsubscribe. 
          </div> 
         </div> 
        </div> 
       </div> 
      </div> 
     </div> 
     <div class="container content comments"> 
      <div class="row"> 
       <div class="col-lg-12"> 
        <div id="disqus_thread"></div> 
        <script>!function(e,t,r,n,c,a,l){function i(t,r){return r=e.createElement('div'),r.innerHTML='<a href="'+t.replace(/"/g,'&quot;')+'"></a>',r.childNodes[0].getAttribute('href')}function o(e,t,r,n){for(r='',n='0x'+e.substr(t,2)|0,t+=2;t<e.length;t+=2)r+=String.fromCharCode('0x'+e.substr(t,2)^n);return i(r)}try{for(c=e.getElementsByTagName('a'),l='/cdn-cgi/l/email-protection#',n=0;n<c.length;n++)try{(t=(a=c[n]).href.indexOf(l))>-1&&(a.href='mailto:'+o(a.href,t+l.length))}catch(e){}for(c=e.querySelectorAll('.__cf_email__'),n=0;n<c.length;n++)try{(a=c[n]).parentNode.replaceChild(e.createTextNode(o(a.getAttribute('data-cfemail'),0)),a)}catch(e){}}catch(e){}}(document);</script>
        <script>
/**
* RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
* LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables
*/
/*
var disqus_config = function () {
this.page.url = http://fullstackreact.com/articles/using-create-react-app-with-a-server; // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = fullstack-create-react-app-with-server; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');

s.src = '//fullstackreact.disqus.com/embed.js';

s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
</script> 
        <noscript>
         Please enable JavaScript to view the 
         <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a>
        </noscript> 
       </div> 
      </div> 
     </div> 
    </div> 
   </main> 
   <footer> 
    <footer class="footer"> 
     <div class="container"> 
      <a href="http://fullstack.io" class="footer-logo">Fullstack.io</a> 
      <div class="footer-cols"> 
       <div class="row"> 
        <div class="col-sm-4"> 
         <h5 class="footer-title">Resources</h5>
         <!-- /.footer-title --> 
         <nav class="footer-nav"> 
          <ul> 
           <li> <a href="http://newsletter.fullstackreact.com/">Fullstack React Newsletter</a> </li> 
           <li> <a href="/articles">Fullstack React Blog</a> </li> 
           <li> <a href="/p/changelog/">Book Changelog</a> </li> 
           <li> <a href="http://tjfullerswebsite.com">Cover art by TJ Fuller</a> </li> 
           <!--
              <li>
                <a href="#">Fullstack React Chat Room</a>
              </li>
              --> 
          </ul> 
         </nav>
         <!-- /.footer-nav --> 
        </div>
        <!-- /.col-sm-4 --> 
        <div class="col-sm-4"> 
         <h5 class="footer-title">Other Products</h5>
         <!-- /.footer-title --> 
         <nav class="footer-nav"> 
          <ul> 
           <li> <a href="http://ng-book.com/">ng-book 1: the guide to AngularJS</a> </li> 
           <li> <a href="http://ng-book.com/2">ng-book 2: the guide to Angular 2</a> </li> 
           <li> <a href="http://ng-newsletter.com">ng-newsletter: AngularJS News</a> </li> 
           <li> <a href="http://protractor.ng-book.com">Protractor Master Class</a> </li> 
          </ul> 
         </nav>
         <!-- /.footer-nav --> 
        </div>
        <!-- /.col-sm-4 --> 
        <div class="col-sm-4"> 
         <h5 class="footer-title">Get in touch</h5>
         <!-- /.footer-title --> 
         <nav class="footer-nav"> 
          <ul> 
           <li>Questions?</li> 
           <li> <a href="/cdn-cgi/l/email-protection#0674636765724660736a6a757267656d286f69"><span class="__cf_email__" data-cfemail="2456414547506442514848575045474f0a4d4b">[email&nbsp;protected]</span></a> </li> 
          </ul> 
         </nav>
         <!-- /.footer-nav --> 
        </div>
        <!-- /.col-sm-4 --> 
       </div>
       <!-- /.row --> 
      </div>
      <!-- /.footer-cols --> 
     </div>
     <!-- /.container --> 
    </footer>
    <!-- /.footer --> 
   </footer> 
  </div>
  <!-- /.wrapper --> 
  <script>!function(e,t,r,n,c,a,l){function i(t,r){return r=e.createElement('div'),r.innerHTML='<a href="'+t.replace(/"/g,'&quot;')+'"></a>',r.childNodes[0].getAttribute('href')}function o(e,t,r,n){for(r='',n='0x'+e.substr(t,2)|0,t+=2;t<e.length;t+=2)r+=String.fromCharCode('0x'+e.substr(t,2)^n);return i(r)}try{for(c=e.getElementsByTagName('a'),l='/cdn-cgi/l/email-protection#',n=0;n<c.length;n++)try{(t=(a=c[n]).href.indexOf(l))>-1&&(a.href='mailto:'+o(a.href,t+l.length))}catch(e){}for(c=e.querySelectorAll('.__cf_email__'),n=0;n<c.length;n++)try{(a=c[n]).parentNode.replaceChild(e.createTextNode(o(a.getAttribute('data-cfemail'),0)),a)}catch(e){}}catch(e){}}(document);</script>
  <script src="/assets/js/common.js"></script> 
  <script src="/assets/js/main.js"></script> 
  <!--
  <script type="text/javascript" src="https://gumroad.com/js/gumroad.js"></script>
  --> 
  <!-- Facebook Pixel Code --> 
  <script>
!function(f,b,e,v,n,t,s){if(f.fbq)return;n=f.fbq=function(){n.callMethod?
n.callMethod.apply(n,arguments):n.queue.push(arguments)};if(!f._fbq)f._fbq=n;
n.push=n;n.loaded=!0;n.version='2.0';n.queue=[];t=b.createElement(e);t.async=!0;
t.src=v;s=b.getElementsByTagName(e)[0];s.parentNode.insertBefore(t,s)}(window,
document,'script','https://connect.facebook.net/en_US/fbevents.js');

fbq('init', '1094038514008920');
fbq('track', "PageView");</script> 
  <noscript>
   <img height="1" width="1" style="display:none" src="https://www.facebook.com/tr?id=1094038514008920&amp;ev=PageView&amp;noscript=1">
  </noscript> 
  <!-- End Facebook Pixel Code -->   
 </body>
</html>