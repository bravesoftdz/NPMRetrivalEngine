<!doctype html>
<html>
 <head> 
  <title>Node.js: how to create an e-commerce shopping cart</title> 
  <meta charset="utf-8"> 
  <meta name="description" content="In this article we're going to see how to create a basic e-commerce shopping cart with Node.js."> 
  <link rel="stylesheet" href="/content/theme/style-min.css" type="text/css" media="screen"> 
  <link rel="alternate" href="/feed" type="application/rss+xml"> 
 </head> 
 <body class="single"> 
  <div id="site"> 
   <header id="site-header"> 
    <div id="site-header-wrapper" class="clearfix"> 
     <div id="brand"> 
      <h1 id="site-title"><a href="/">Gabriele Romanato</a></h1> 
     </div> 
     <nav id="navigation"> 
      <a href="#menu-wrapper" id="open-menu"> <span class="fa fa-navicon"></span> </a> 
      <div id="menu-wrapper"> 
       <a href="#menu-wrapper" id="close-menu"></a> 
       <ul id="menu"> 
        <li><a href="/">Home</a></li> 
        <li><a href="/about">About</a></li> 
        <li><a href="/all-projects">Projects</a></li> 
        <li><a href="/archives">Archives</a></li> 
        <li><a href="/code-examples">Examples</a></li> 
       </ul> 
       <ul id="social"> 
        <li> <a href="https://twitter.com/gabromanato" id="twitter" rel="nofollow">Twitter</a> </li> 
        <li> <a href="http://facebook.com/gabrieleromanatopage" id="facebook" rel="nofollow">Facebook</a> </li> 
        <li> <a href="https://www.google.com/+GabrieleRomanato" id="google-plus" rel="nofollow">Google Plus</a> </li> 
        <li> <a href="http://www.linkedin.com/in/gabrieleromanato" id="linkedin" rel="nofollow">Linkedin</a> </li> 
       </ul> 
      </div> 
     </nav> 
    </div> 
   </header> 
   <div id="sub-header" class="bg-responsive" style="background-image: url(/content/uploads/2015/12/mac-table.jpg);"> 
    <img src="/content/uploads/2015/12/mac-table.jpg" alt="" class="hidden"> 
    <div id="sub-header-wrapper" class="center-text"> 
     <h2 id="section-title">Node.js: how to create an e-commerce shopping cart</h2> 
     <div class="post-meta center-text"> 
      <span class="post-date" data-ts="1496672990000">05/06/2017</span> 
      <span class="post-author">Gabriele Romanato</span> 
      <span class="post-category"><a href="/articles/nodejs">Node.js</a></span> 
      <span class="post-link"><a href="http://gabrieleromanato.name/p/uSiIRJt">Short link</a></span> 
     </div> 
    </div> 
   </div> 
   <div id="content"> 
    <div class="post-wrap"> 
     <article class="post post-334 single-post grid-730 aligncenter"> 
      <div class="post-content"> 
       <p>In this article we're going to see how to create a basic e-commerce shopping cart with Node.js.</p> 
       <p><img src="/content/uploads/articles/nodejs-shopping-cart/1.jpg" alt=""></p> 
       <h2>Sessions</h2> 
       <p>In order to create a shopping cart we need a simple storage system where we can collect products and the cart's total.</p> 
       <p>Node.js provides us with the <a href="https://www.npmjs.com/package/express-session">express-session</a> package, a middleware for ExpressJS.</p> 
       <p>By default this package stores session data in memory but this is not recommended in a production environment. To fix this problem we need to use a specific <em>session store</em>. In our case we're going to use <a href="https://www.npmjs.com/package/connect-mongodb-session">connect-mongodb-session</a>, a store system that uses MongoDB to save session data.</p> 
       <p>To save data, you can simply add properties to the <code>session</code> object that comes along with each <code>request</code> object in Express:</p> 
       <pre><code>'use strict';

const app = require('express')();
const session = require('express-session');
const MongoDBStore = require('connect-mongodb-session')(session);
const store = new MongoDBStore({
    uri: 'mongodb://localhost:27017/db',
    collection: 'sessions'
});

app.use(session({
  secret: 'secret session key',
  resave: false,
  saveUninitialized: true,
  store: store,
  unset: 'destroy',
  name: 'session cookie name'
}));

app.get('/', (req, res) =&gt; {
  if(!req.session.test) {
    req.session.test = 'OK';
    res.send('OK');
  }
});

app.get('/test', (req, res) =&gt; {
  res.send(req.session.test); // 'OK'
});
</code></pre> 
       <p>In our session configuration an option worth mentioning here is the ability to delete session data with the aid of the <code>delete</code> operator in the <code>unset</code> option.</p> 
       <p>The session middleware generates an unique ID for each session stored in <code>session.sessionID</code>. This token can be used to enhance the overall security of our implementation by preventing session fixation and session hijacking. </p> 
       <p>We can handle tokens by setting up the following class:</p> 
       <pre><code>'use strict';
const crypto = require('crypto');
class Security {
  static md5(value) {
    if(!value) {
        return;
    }
    return crypto.createHash('md5').update(value).digest('hex');
}

static isValidNonce(value, req) {
    return (value === this.md5(req.sessionID + req.headers['user-agent']));
}
}
module.exports = Security;
</code></pre> 
       <p>Nonce is a term used by WordPress to identify a unique session token in web forms upon submission. In this case we're using the session ID and the user agent string to create a single MD5 string.</p> 
       <p>Then we are able to compare tokens in each singular form request:</p> 
       <pre><code>const Security = require('./lib/Security');
//...
app.post('/test', (req, res) =&gt; {
    let token = req.body.nonce;
    if(Security.isValidNonce(token, req)) {
      // OK
    } else {
      // Reject the request
    }
});
</code></pre> 
       <p>Now we're pretty sure that each form submission comes from a valid session, thus preventing remote form submission.</p> 
       <h2>The cart</h2> 
       <p>A shopping cart in Node.js can be represented by an object that must have at least three public properties:</p> 
       <ol> 
        <li>A property to store the products selected by the user, usually an array of objects.</li> 
        <li>A property to store the cart totals.</li> 
        <li>A property to store the cart totals as a formatted string to be displayed on the frontend.</li> 
       </ol> 
       <p>To start with, let's define our base class:</p> 
       <pre><code>'use strict';

const config = require('./config');

class Cart {
   constructor() {
      this.data = {};
      this.data.items = [];
      this.data.totals = 0;
      this.data.formattedTotals = '';
   }
}

module.exports = new Cart();
</code></pre> 
       <p>It's pretty clear now that we have to push products into the <code>items</code> array or remove them when users update the cart. We have also to update the cart totals accordingly.</p> 
       <p>However, the first thing to implement is a method that prevents duplicate products from being pushed into the cart:</p> 
       <pre><code>inCart(productID = 0) {
    let found = false;
    this.data.items.forEach(item =&gt; {
       if(item.id === productID) {
           found = true;
       }
    });
    return found;
}
</code></pre> 
       <p>Each product has its own ID so we're going to use this property as a unique identifier for all products.</p> 
       <p>Now we can update both the cart totals and the formatted totals string:</p> 
       <pre><code>calculateTotals() {
    this.data.totals = 0;
    this.data.items.forEach(item =&gt; {
        let price = item.price;
        let qty = item.qty;
        let amount = price * qty;

        this.data.totals += amount;
    });
    this.setFormattedTotals();
}

setFormattedTotals() {
    let format = new Intl.NumberFormat(config.locale.lang, {style: 'currency', currency: config.locale.currency });
    let totals = this.data.totals;
    this.data.formattedTotals = format.format(totals);
}
</code></pre> 
       <p>We're using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat">NumberFormat</a> but if you aren't planning to use large numbers of numbers, you can safely use also <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString">Number.prototype.toLocaleString()</a>.</p> 
       <p>It's time to add products to our cart:</p> 
       <pre><code>addToCart(product = null, qty = 1) {
    if(!this.inCart(product.product_id)) {
        let format = new Intl.NumberFormat(config.locale.lang, {style: 'currency', currency: config.locale.currency });
        let prod = {
          id: product.product_id,
          title: product.title,
          price: product.price,
          qty: qty,
          image: product.image,
          formattedPrice: format.format(product.price)
        };
        this.data.items.push(prod);
        this.calculateTotals();
    }
}
</code></pre> 
       <p><img src="/content/uploads/articles/nodejs-shopping-cart/2.jpg" alt=""></p> 
       <p>Our products are stored into a specific MongoDB collection and have the following document structure:</p> 
       <pre><code>'use strict';

const mongoose  = require('mongoose');

let Schema  = mongoose.Schema;

let ProductsSchema = new Schema({
    product_id: Number,
    id: String,
    title: String,
    description: String,
    manufacturer: String,
    price: Number,
    image: String},
{collection: 'products'});

module.exports = mongoose.model('Products', ProductsSchema);
</code></pre> 
       <p>Here's how products are added to the cart in our sample store:</p> 
       <pre><code>const Security = require('./lib/Security');
const Products = require('./models/Products');

app.post('/cart', (req, res) =&gt; {
  let qty = parseInt(req.body.qty, 10);
  let product = parseInt(req.body.product_id, 10);
  if(qty &gt; 0 &amp;&amp; Security.isValidNonce(req.body.nonce, req)) {
    Products.findOne({product_id: product}).then(prod =&gt; {
        Cart.addToCart(prod, qty);
        Cart.saveCart(req);
        res.redirect('/cart');
    }).catch(err =&gt; {
       res.redirect('/');
    });
} else {
    res.redirect('/');
}
});
</code></pre> 
       <p><code>saveCart()</code> saves our cart into the current Express session:</p> 
       <pre><code>saveCart(request) {
    if(request.session) {
        request.session.cart = this.data;
    }
}
</code></pre> 
       <p>We also need to allow users to remove items from the cart:</p> 
       <pre><code>removeFromCart(id = 0) {
    for(let i = 0; i &lt; this.data.items.length; i++) {
        let item = this.data.items[i];
        if(item.id === id) {
            this.data.items.splice(i, 1);
            this.calculateTotals();
        }
    }

}
</code></pre> 
       <p>There's a potential design problem in our cart: the cart is not automatically saved when we modify the cart data so that we have to manually invoke <code>saveCart()</code> in our routes. The reason behind this is that the current session is available as a property of the <code>request</code> object provided by Express, that is, is a middleware.</p> 
       <p>Obviously users can also empty their cart:</p> 
       <pre><code>emptyCart(request) {
    this.data.items = [];
    this.data.totals = 0;
    this.data.formattedTotals = '';
    if(request.session) {
        request.session.cart.items = [];
        request.session.cart.totals = 0;
        request.session.cart.formattedTotals = '';
    }


}
</code></pre> 
       <p>To avoid problems with our session and cart class, we're simply restoring values to their original defaults. Users can empty the cart and continue shopping.</p> 
       <p>Updating the cart, instead, usually means changing the quantity of each product. For that reason, we have to set our view accordingly:</p> 
       <pre><code>&lt;input type="text" class="qty" name="qty[]" value="&lt;%= product.qty %&gt;"&gt;
&lt;input type="hidden" name="product_id[]" value="&lt;%= product.id%&gt;"&gt;
</code></pre> 
       <p>We have two parallel arrays, <code>qty</code> and <code>product_id</code>. Each singular quantity points to a specific product and vice versa. In our class we have to add the following method:</p> 
       <pre><code>updateCart(ids = [], qtys = []) {
    let map = [];
    let updated = false;

    ids.forEach(id =&gt; {
       qtys.forEach(qty =&gt; {
          map.push({
              id: parseInt(id, 10),
              qty: parseInt(qty, 10)
          });
       });
    });
    map.forEach(obj =&gt; {
        this.data.items.forEach(item =&gt; {
           if(item.id === obj.id) {
               if(obj.qty &gt; 0 &amp;&amp; obj.qty !== item.qty) {
                   item.qty = obj.qty;
                   updated = true;
               }
           }
        });
    });
    if(updated) {
        this.calculateTotals();
    }
}
</code></pre> 
       <p>The update, and the consequent recalculation of the cart's totals, can take place only when there's a difference between the quantity of a product in the cart and the quantity provided by the user.</p> 
       <p>In our route we have:</p> 
       <pre><code>app.post('/cart/update', (req, res) =&gt; {
let ids = req.body["product_id[]"];
let qtys = req.body["qty[]"];
if(Security.isValidNonce(req.body.nonce, req)) {
    Cart.updateCart(ids, qtys);
    Cart.saveCart(req);
    res.redirect('/cart');
} else {
    res.redirect('/');
}
});
</code></pre> 
       <p>If you know PHP, then you won't be surprised to know that Express handles multiple values in the same way as PHP does. The only difference here is that we need to access such properties using the bracket notation.</p> 
       <h2>The checkout process</h2> 
       <p><img src="/content/uploads/articles/nodejs-shopping-cart/3.jpg" alt=""></p> 
       <p>In our sample store we use a PayPal form whose fields contain the values taken dynamically from our cart:</p> 
       <pre><code>&lt;% if(cart &amp;&amp; cart.items.length &gt; 0) { %&gt;
&lt;form id="paypal-form" action="&lt;%= paypal.url %&gt;" method="post"&gt;
&lt;input type="hidden" name="cmd" value="_cart"&gt;
&lt;input type="hidden" name="upload" value="1"&gt;
&lt;input type="hidden" name="business" value="&lt;%= paypal.businessEmail %&gt;"&gt;

&lt;input type="hidden" name="currency_code" value="&lt;%= paypal.currency %&gt;"&gt;
&lt;% cart.items.forEach(function(product, index) { var n = index + 1; %&gt;
&lt;input type="hidden" name="quantity_&lt;%= n %&gt;" value="&lt;%= product.qty%&gt;"&gt;
&lt;input type="hidden" name="item_name_&lt;%= n %&gt;" value="&lt;%= product.title %&gt;"&gt;
&lt;input type="hidden" name="item_number_&lt;%= n %&gt;" value="SKU &lt;%= product.title%&gt;"&gt;
&lt;input type="hidden" name="amount_&lt;%= n %&gt;" value="&lt;%= product.price %&gt;"&gt;
&lt;% }); %&gt;
&lt;input type="image" id="paypal-btn" alt="Pay with PayPal" src="/public/images/paypal.png"&gt;
&lt;/form&gt;
&lt;% } else { %&gt;
&lt;p class="alert alert-info"&gt;Sorry, no products in your cart.&lt;/p&gt;
&lt;% } %&gt;
</code></pre> 
       <p><img src="/content/uploads/articles/nodejs-shopping-cart/4.jpg" alt=""></p> 
       <p>Finally, the user will be redirected to PayPal to complete the checkout process.</p> 
       <p><img src="/content/uploads/articles/nodejs-shopping-cart/5.jpg" alt=""></p> 
       <h2>Complete code</h2> 
       <p><a href="https://github.com/gabrieleromanato/Node.js-Shopping-Cart" class="more-link block">Node.js Shopping Cart</a></p> 
       <div id="disqus_thread"></div> 
      </div> 
     </article> 
    </div> 
    <div id="post-share" class="grid-730 aligncenter center-text"> 
     <span class="share-link-wrap"> <a href="https://twitter.com/intent/tweet?url=http://gabrieleromanato.name/p/uSiIRJt&amp;via=gabromanato&amp;text=Node.js%3A%20how%20to%20create%20an%20e-commerce%20shopping%20cart" class="twitter-share share-link">Twitter</a> </span> 
     <span class="share-link-wrap"> <a href="https://www.facebook.com/sharer/sharer.php?u=http://gabrieleromanato.name/p/uSiIRJt" class="facebook-share share-link">Facebook</a> </span> 
    </div> 
    <div id="post-nav"> 
     <div id="post-nav-wrap" class="aligncenter grid-1140 clearfix"> 
      <a href="" id="post-nav-prev"><i class="fa fa-angle-left"></i> Prev</a> 
      <a href="/archives" id="post-nav-main">Articles</a> 
      <a href="" id="post-nav-next">Next <i class="fa fa-angle-right"></i></a> 
     </div> 
    </div> 
   </div> 
   <footer id="site-info"> 
    <div id="site-info-top"> 
     <div class="grid-1140 aligncenter clearfix"> 
      <aside class="widget col col-md-3"> 
       <h3>About</h3> 
       <p>Full-stack web developer with the MEAN stack and WordPress.</p> 
      </aside> 
      <aside class="widget col col-md-3"> 
       <h3>Information</h3> 
       <ul> 
        <li>Tax Code: RMNGRL78L20A485X</li> 
        <li>VAT: IT 02479630697</li> 
        <li><a href="https://www.iubenda.com/privacy-policy/743437/full-legal">Privacy Policy</a></li> 
       </ul> 
      </aside> 
      <aside class="widget col col-md-3"> 
       <h3>Contacts</h3> 
       <ul> 
        <li>Via San Michele 162</li> 
        <li>66054 Vasto (CH) Italy</li> 
        <li class="email">gabriele(at)gabrieleromanato(dot)name</li> 
       </ul> 
      </aside> 
      <aside class="widget col col-md-3"> 
       <h3>Sections</h3> 
       <ul> 
        <li><a href="/about">About</a></li> 
        <li><a href="/all-projects">Projects</a></li> 
        <li><a href="/code-examples">Examples</a></li> 
       </ul> 
      </aside> 
     </div> 
    </div> 
    <div id="site-info-wrapper"> 
     <div class="grid-1140 aligncenter clearfix"> 
      <div id="info" class="col col-md-6"> 
       <span id="copy">Copyright 2017 Gabriele Romanato</span> 
      </div> 
      <ul id="social-footer" class="col col-md-4 alignright"> 
       <li> <a href="https://twitter.com/gabromanato" id="twitter-footer" rel="nofollow">Twitter</a> </li> 
       <li> <a href="http://facebook.com/gabrieleromanatopage" id="facebook-footer" rel="nofollow">Facebook</a> </li> 
       <li> <a href="https://www.google.com/+GabrieleRomanato" id="google-plus-footer" rel="nofollow">Google Plus</a> </li> 
       <li> <a href="http://www.linkedin.com/in/gabrieleromanato" id="linkedin-footer" rel="nofollow">Linkedin</a> </li> 
      </ul> 
     </div> 
    </div> 
   </footer> 
  </div> 
  <div id="preload"> 
   <div id="preloader"> 
    <span></span> 
    <span></span> 
   </div> 
  </div> 
  <script type="text/javascript" src="/content/theme/js/jquery.min.js"></script> 
  <script type="text/javascript" src="/content/theme/js/plugins.js"></script> 
  <script type="text/javascript" src="/content/theme/js/highlight.js"></script> 
  <script>
(function() {
var d = document, s = d.createElement('script');
s.src = 'https://gabrieleromanatoname.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
</script> 
  <script type="text/javascript" src="/content/theme/js/gabrieleromanato-min.js"></script>   
 </body>
</html>