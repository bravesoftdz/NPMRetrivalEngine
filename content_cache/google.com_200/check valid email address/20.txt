<!doctype html>
<html>
 <head> 
  <meta HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"> 
  <title>How to Find or Validate an Email Address</title> 
  <meta name="viewport" content="width=device-width"> 
  <link rel="alternate" media="only screen and (max-device-width: 979px)" href="http://regular-expressions.mobi/email.html"> 
  <script type="text/javascript">if (screen.width < 980) window.location.replace("http://regular-expressions.mobi/email.html?wlr=1");</script>
  <script src="regex.js" type="text/javascript"></script> 
  <link rel="alternate" type="application/rss+xml" title="Regex Guru" href="http://www.regexguru.com/feed/"> 
  <meta NAME="Author" CONTENT="Jan Goyvaerts"> 
  <meta NAME="Description" CONTENT=""> 
  <meta NAME="Keywords" CONTENT=""> 
  <link REL="StyleSheet" HREF="regex.css" TYPE="text/css"> 
 </head> 
 <body bgcolor="white" text="black"> 
  <script type="text/javascript">window.onresize = movecontent;</script> 
  <div id="top"></div> 
  <div id="btntop">
   <table align="center" cellspacing="0" cellpadding="0" border="0">
    <tbody>
     <tr>
      <td><a href="quickstart.html" target="_top">
        <div onmouseover="this.style.backgroundColor='#FFA000';" onmouseout="this.style.backgroundColor='#A03300';return false;">
         Quick&nbsp;Start
        </div></a></td>
      <td><a href="tutorial.html" target="_top">
        <div onmouseover="this.style.backgroundColor='#FFA000';" onmouseout="this.style.backgroundColor='#A03300';return false;">
         Tutorial
        </div></a></td>
      <td><a href="tools.html" target="_top">
        <div onmouseover="this.style.backgroundColor='#FFA000';" onmouseout="this.style.backgroundColor='#A03300';return false;">
         Tools&nbsp;&amp;&nbsp;Languages
        </div></a></td>
      <td><a href="examples.html" target="_top">
        <div onmouseover="this.style.backgroundColor='#FFA000';" onmouseout="this.style.backgroundColor='#A03300';return false;">
         Examples
        </div></a></td>
      <td><a href="reference.html" target="_top">
        <div onmouseover="this.style.backgroundColor='#FFA000';" onmouseout="this.style.backgroundColor='#A03300';return false;">
         Reference
        </div></a></td>
      <td><a href="books.html" target="_top">
        <div onmouseover="this.style.backgroundColor='#FFA000';" onmouseout="this.style.backgroundColor='#A03300';return false;">
         Book&nbsp;Reviews
        </div></a></td>
     </tr>
    </tbody>
   </table>
  </div> 
  <div id="bodytext"> 
   <script type="text/javascript">movecontent();</script> 
   <div class="topad">
    <a href="//www.regexmagic.com/patterns.html" target="_top"><img src="ads/728/rxmemail100.png" srcset="ads/728/rxmemail100.png 1x, ads/728/rxmemail125.png 1.25x, ads/728/rxmemail150.png 1.5x, ads/728/rxmemail175.png 1.75x, ads/728/rxmemail200.png 2x, ads/728/rxmemail250.png 2.5x, ads/728/rxmemail300.png 3x, ads/728/rxmemail350.png 3.5x, ads/728/rxmemail400.png 4x" alt="RegexMagic—Generate regular expressions matching email addresses"></a>
   </div> 
   <h1>How to Find or Validate an Email Address</h1> 
   <p>The regular expression I receive the most feedback, not to mention "bug" reports on, is the one you'll find right on this site's <a href="index.html" target="_top">home page</a>: <tt class="code"><span class="regexspecial">\b</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">._%+</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">+</span><span class="regexplain">@</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">.</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">+</span><span class="regexescaped">\.</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccopen">]</span><span class="regexspecial">{2,}</span><span class="regexspecial">\b</span></tt>. This regular expression, I claim, matches any email address. Most of the feedback I get refutes that claim by showing one email address that this regex doesn't match. Usually, the "bug" report also includes a suggestion to make the regex "perfect".</p> 
   <p>As I explain below, my claim only holds true when one accepts my definition of what a valid email address really is, and what it's not. If you want to use a different definition, you'll have to adapt the regex. Matching a valid email address is a perfect example showing that (1) before writing a regex, you have to know exactly what you're trying to match, and what not; and (2) there's often a trade-off between what's exact, and what's practical.</p> 
   <p>The virtue of my regular expression above is that it matches 99% of the email addresses in use today. All the email address it matches can be handled by 99% of all email software out there. If you're looking for a quick solution, you only need to read the next paragraph. If you want to know all the trade-offs and get plenty of alternatives to choose from, read on.</p> 
   <p>If you want to use the regular expression above, there's two things you need to understand. First, long regexes make it difficult to nicely format paragraphs. So I didn't include <tt class="code"><span class="regexplain">a-z</span></tt> in any of the three character classes. This regex is intended to be used with your regex engine's "case insensitive" option turned on. (You'd be surprised how many "bug" reports I get about that.) Second, the above regex is delimited with <a href="wordboundaries.html" target="_top">word boundaries</a>, which makes it suitable for extracting email addresses from files or larger blocks of text. If you want to check whether the user typed in a valid email address, replace the word boundaries with <a href="anchors.html" target="_top">start-of-string and end-of-string anchors</a>, like this: <tt class="code"><span class="regexspecial">^</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">._%+</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">+</span><span class="regexplain">@</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">.</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">+</span><span class="regexescaped">\.</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccopen">]</span><span class="regexspecial">{2,}</span><span class="regexspecial">$</span></tt>.</p> 
   <p>The previous paragraph also applies to all following examples. You may need to change word boundaries into start/end-of-string anchors, or vice versa. And you have to turn on the case insensitive matching option.</p> 
   <div class="adsense"> 
    <script type="text/javascript"><!--
google_ad_client = "pub-7485249680256358";
google_ad_width = 728;
google_ad_height = 90;
google_ad_format = "728x90_as";
google_ad_type = "text_image";
google_ad_channel = "";
google_color_border = "FF6600";
google_color_bg = "FFF4E8";
google_color_link = "EE5500";
google_color_text = "000000";
google_color_url = "803300";
google_ui_features = "rc:0";
//-->
</script> 
    <script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script> 
   </div>
   <h2>Trade-Offs in Validating Email Addresses</h2> 
   <p>Before ICANN made it possible for any well-funded company to create their own top-level domains, the longest top-level domains were the rarely used <tt>.museum</tt> and <tt>.travel</tt> which are 6 letters long. The most common top-level domains were 2 letters long for country-specific domains, and 3 or 4 letters long for general-purpose domains like <tt>.com</tt> and <tt>.info</tt>. A lot of regexes for validating email addresses you'll find in various regex tutorials and references still assume the top-level domain to be fairly short. Older editions of <a href="tutorial.html" target="_top">this regex tutorial</a> mentioned <tt class="code"><span class="regexspecial">\b</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">._%+</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">+</span><span class="regexplain">@</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">.</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">+</span><span class="regexescaped">\.</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccopen">]</span><span class="regexspecial">{2,4}</span><span class="regexspecial">\b</span></tt> as the regex for email addresses in its introduction. There's only one little difference between this regex and the one at the top of this page. The <tt class="code"><span class="regexspecial">4</span></tt> at the end of the regex restricts the top-level domain to 4 characters. If you use this regex with anchors to validate the email address entered on your order form, <tt class="string">fabio@disapproved.solutions</tt> has to do his shopping elsewhere. Yes, the <tt>.solutions</tt> TLD exists and when I write this, <tt>disaproved.solutions</tt> can be yours for $16.88 per year.</p> 
   <p>If you want to be more strict than <tt class="code"><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccopen">]</span><span class="regexspecial">{2,}</span></tt> for the top-level domain, <tt class="code"><span class="regexspecial">^</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">._%+</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">+</span><span class="regexplain">@</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">.</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">+</span><span class="regexescaped">\.</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccopen">]</span><span class="regexspecial">{2,63}</span><span class="regexspecial">$</span></tt> is as far as you can practically go. Each part of a domain name can be no longer than 63 characters. There are no single-digit top-level domains and none contain digits. It doesn't look like ICANN will approve such domains either.</p> 
   <p>Email addresses can be on servers on a subdomain as in <tt class="string">john@server.department.company.com</tt>. All of the above regexes match this email address, because I included a dot in the character class after the @ symbol. But the above regexes also match <tt class="string">john@aol...com</tt> which is not valid due to the consecutive dots. You can exclude such matches by replacing <tt class="code"><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">.</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">+</span><span class="regexescaped">\.</span></tt> with <tt class="code"><span class="regexnest1">(?:</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">+</span><span class="regexescaped">\.</span><span class="regexnest1">)</span><span class="regexspecial">+</span></tt> in any of the above regexes. I removed the dot from the character class and instead repeated the character class and the following literal dot. E.g. <tt class="code"><span class="regexspecial">^</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">._%+</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">+</span><span class="regexplain">@</span><span class="regexnest1">(?:</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">+</span><span class="regexescaped">\.</span><span class="regexnest1">)</span><span class="regexspecial">+</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccopen">]</span><span class="regexspecial">{2,}</span><span class="regexspecial">$</span></tt> matches <tt class="match">john@server.department.company.com</tt> but not <tt class="string">john@aol...com</tt>.</p> 
   <p>If you want to avoid your system choking on arbitrarily large input, you can replace the infinite <a href="repeat.html" target="_top">quantifiers</a> with finite ones. <tt class="code"><span class="regexspecial">^</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">._%+</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">{1,64}</span><span class="regexplain">@</span><span class="regexnest1">(?:</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">{1,63}</span><span class="regexescaped">\.</span><span class="regexnest1">)</span><span class="regexspecial">{1,125}</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccopen">]</span><span class="regexspecial">{2,63}</span><span class="regexspecial">$</span></tt> takes into account that the local part (before the @) is limited to 64 characters and that each part of the domain name is limited to 63 characters. There's no direct limit on the number of subdomains. But the maximum length of an email address that can be handled by SMTP is 254 characters. So with a single-character local part, a two-letter top-level domain and single-character sub-domains, 125 is the maximum number of sub-domains.</p> 
   <p>The previous regex does not actually limit email addresses to 254 characters. If each part is at its maximum length, the regex can match strings up to 8129 characters in length. You can reduce that by lowering the number of allowed sub-domains from 125 to something more realistic like 8. I've never seen an email address with more than 4 subdomains. If you want to enforce the 254 character limit, the best solution is to check the length of the input string before you even use a regex. Though this requires a few lines of procedural code, checking the length of a string is near-instantaneous. If you can only use regexes, <tt class="code"><span class="regexspecial">^</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">._%+</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">{6,254}</span><span class="regexspecial">$</span></tt> can be used as a first pass to make sure the string doesn't contain invalid characters and isn't too short or too long. If you need to do everything with one regex, you'll need a regex flavor that supports <a href="lookaround.html" target="_top">lookahead</a>. The regular expression <tt class="code"><span class="regexspecial">^</span><span class="regexnest1">(?=</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">._%+</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">{6,254}</span><span class="regexspecial">$</span><span class="regexnest1">)</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">._%+</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">{1,64}</span><span class="regexplain">@</span><span class="regexnest1">(?:</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">{1,63}</span><span class="regexescaped">\.</span><span class="regexnest1">)</span><span class="regexspecial">{1,8}</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccopen">]</span><span class="regexspecial">{2,63}</span><span class="regexspecial">$</span></tt> uses a lookahead to first check that the string doesn't contain invalid characters and isn't too short or too long. When the lookahead succeeds, the remainder of the regex makes a second pass over the string to check for proper placement of the @ sign and the dots.</p> 
   <p>All of these regexes allow the characters <tt>._%+-</tt> anywhere in the local part. You can force the local part to begin with a letter by using <tt class="code"><span class="regexspecial">^</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">._%+</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">{0,63}</span></tt> instead of <tt class="code"><span class="regexspecial">^</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">._%+</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">{1,64}</span></tt> for the local part: <tt class="code"><span class="regexspecial">^</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">._%+</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">{0,63}</span><span class="regexplain">@</span><span class="regexnest1">(?:</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">{1,63}</span><span class="regexescaped">\.</span><span class="regexnest1">)</span><span class="regexspecial">{1,125}</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccopen">]</span><span class="regexspecial">{2,63}</span><span class="regexspecial">$</span></tt>. When using lookahead to check the overall length of the address, the first character can be checked in the lookahead. We don't need to repeat the initial character check when checking the length of the local part. This regex is too long to fit the width of the page, so let's turn on <a href="freespacing.html" target="_top">free-spacing mode</a>:</p> 
   <p><tt class="code"><span class="regexspecial">^</span><span class="regexnest1">(?=</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">@._%+</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">{5,253}</span><span class="regexspecial">$</span><span class="regexnest1">)</span><span class="regexplain"><br> </span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">._%+</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">{1,64}</span><span class="regexplain">@</span><span class="regexnest1">(?:</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">{1,63}</span><span class="regexescaped">\.</span><span class="regexnest1">)</span><span class="regexspecial">{1,8}</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccopen">]</span><span class="regexspecial">{2,63}</span><span class="regexspecial">$</span></tt> </p>
   <p>Domain names can contain hyphens. But they cannot begin or end with a hyphen. <tt class="code"><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexnest1">(?:</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">{0,62}</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexnest1">)</span><span class="regexspecial">?</span></tt> matches a domain name between 1 and 63 characters long that starts and ends with a letter or digit. The non-capturing group makes the middle of the domain and the final letter or digit optional as a whole to ensure that we allow single-character domains while at the same time ensuring that domains with two or more characters do not end with a hyphen. The overall regex starts to get quite complicated:</p> 
   <p><tt class="code"><span class="regexspecial">^</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">._%+</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">{0,63}</span><span class="regexplain">@</span><span class="regexplain"><br> </span><span class="regexnest1">(?:</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexnest2">(?:</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">{0,62}</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexnest2">)</span><span class="regexspecial">?</span><span class="regexescaped">\.</span><span class="regexnest1">)</span><span class="regexspecial">{1,8}</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccopen">]</span><span class="regexspecial">{2,63}</span><span class="regexspecial">$</span></tt> </p>
   <p>Domain names cannot contain consecutive hyphens. <tt class="code"><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexspecial">+</span><span class="regexnest1">(?:</span><span class="regexplain">-</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexspecial">+</span><span class="regexnest1">)</span><span class="regexspecial">*</span></tt> matches a domain name that starts and ends with a letter or digit and that contains any number of non-consecutive hyphens. This is the most efficient way. This regex does not do any backtracking to match a valid domain name. It matches all letters and digits at the start of the domain name. If there are no hyphens, the optional group that follows fails immediately. If there are hyphens, the group matches each hyphen followed by all letters and digits up to the next hyphen or the end of the domain name. We can't enforce the maximum length when hyphens must be paired with a letter or digit, but letters and digits can stand on their own. But we can use the <a href="lookaround.html" target="_top">lookahead</a> technique that we used to enforce the overall length of the email address to enforce the length of the domain name while disallowing consecutive hyphens: <tt class="code"><span class="regexnest1">(?=</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">{1,63}</span><span class="regexescaped">\.</span><span class="regexnest1">)</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexspecial">+</span><span class="regexnest1">(?:</span><span class="regexplain">-</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexspecial">+</span><span class="regexnest1">)</span><span class="regexspecial">*</span></tt>. Notice that the lookahead also checks for the dot that must appear after the domain name when it is fully qualified in an email address. This is important. Without checking for the dot, the lookahead would accept longer domain names. Since the lookahead does not consume the text it matches, the dot is not included in the overall match of this regex. When we put this regex into the overall regex for email addresses, the dot will be matched as it was in the previous regexes:</p> 
   <p><tt class="code"><span class="regexspecial">^</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">._%+</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">{0,63}</span><span class="regexplain">@</span><span class="regexplain"><br> </span><span class="regexnest1">(?:</span><span class="regexnest2">(?=</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">{1,63}</span><span class="regexescaped">\.</span><span class="regexnest2">)</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexspecial">+</span><span class="regexnest2">(?:</span><span class="regexplain">-</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexspecial">+</span><span class="regexnest2">)</span><span class="regexspecial">*</span><span class="regexescaped">\.</span><span class="regexnest1">)</span><span class="regexspecial">{1,8}</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccopen">]</span><span class="regexspecial">{2,63}</span><span class="regexspecial">$</span></tt></p> 
   <p>If we include the lookahead to check the overall length, our regex makes two passes over the local part, and three passes over the domain names to validate everything:</p> 
   <p><tt class="code"><span class="regexspecial">^</span><span class="regexnest1">(?=</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">@._%+</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">{5,253}</span><span class="regexspecial">$</span><span class="regexnest1">)</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">._%+</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">{1,64}</span><span class="regexplain">@</span><span class="regexplain"><br> </span><span class="regexnest1">(?:</span><span class="regexnest2">(?=</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">{1,63}</span><span class="regexescaped">\.</span><span class="regexnest2">)</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexspecial">+</span><span class="regexnest2">(?:</span><span class="regexplain">-</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexspecial">+</span><span class="regexnest2">)</span><span class="regexspecial">*</span><span class="regexescaped">\.</span><span class="regexnest1">)</span><span class="regexspecial">{1,8}</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccopen">]</span><span class="regexspecial">{2,63}</span><span class="regexspecial">$</span></tt></p> 
   <p>On a modern PC or server this regex will perform just fine when validating a single 254-character email address. Rejecting longer input would even be faster because the regex will fail when the lookahead fails during first pass. But I wouldn't recommend using a regex as complex as this to search for email addresses through a large archive of documents or correspondence. You're better off using the simple regex at the top of this page to quickly gather everything that looks like an email address. Deduplicate the results and then use a stricter regex if you want to further filter out invalid addresses.</p> 
   <p>And speaking of backtracking, none of the regexes on this page do any backtracking to match valid email addresses. But particularly the latter ones may do a fair bit of backtracking on something that's not quite a valid email address. If your regex flavor supports possessive quantifiers, you can eliminate all backtracking by making all quantifiers possessive. Because no backtracking is needed to find matches, doing this does not change what is matched by these regexes. It only allows them to fail faster when the input is not a valid email address. Our simplest regex then becomes <tt class="code"><span class="regexspecial">^</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">._%+</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">+</span><span class="regexspecial">+</span><span class="regexplain">@</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">.</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">+</span><span class="regexspecial">+</span><span class="regexescaped">\.</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccopen">]</span><span class="regexspecial">{2,}</span><span class="regexspecial">+</span><span class="regexspecial">$</span></tt> with an extra <tt>+</tt> after each quantifier. We can do the same with our most complex regex:</p> 
   <p><tt class="code"><span class="regexspecial">^</span><span class="regexnest1">(?=</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">@._%+</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">{5,253}</span><span class="regexspecial">+</span><span class="regexspecial">$</span><span class="regexnest1">)</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">._%+</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">{1,64}</span><span class="regexspecial">+</span><span class="regexplain">@</span><span class="regexplain"><br> </span><span class="regexnest1">(?:</span><span class="regexnest2">(?=</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">{1,63}</span><span class="regexspecial">+</span><span class="regexescaped">\.</span><span class="regexnest2">)</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexspecial">+</span><span class="regexspecial">+</span><span class="regexnest2">(?:</span><span class="regexplain">-</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexspecial">+</span><span class="regexspecial">+</span><span class="regexnest2">)</span><span class="regexspecial">*</span><span class="regexspecial">+</span><span class="regexescaped">\.</span><span class="regexnest1">)</span><span class="regexspecial">{1,8}</span><span class="regexspecial">+</span><span class="regexccopen">[</span><span class="regexccrange">A</span><span class="regexccrange">-</span><span class="regexccrange">Z</span><span class="regexccopen">]</span><span class="regexspecial">{2,63}</span><span class="regexspecial">+</span><span class="regexspecial">$</span></tt></p> 
   <p>An important trade-off in all these regexes is that they only allow English letters, digits, and the most commonly used special symbols. The main reason is that I don't trust all my email software to be able to handle much else. Even though <tt>John.O'Hara@theoharas.com</tt> is a syntactically valid email address, there's a risk that some software will misinterpret the apostrophe as a delimiting quote. Blindly inserting this email address into an SQL query, for example, will at best cause it to fail when strings are delimited with single quotes and at worst open your site up to SQL injection attacks.</p> 
   <p>And of course, it's been many years already that domain names can include non-English characters. But most software still sticks to the 37 characters Western programmers are used to. Supporting internationalized domains opens up a whole can of worms of how the non-ASCII characters should be encoded. So if you use any of the regexes on this page, anyone with an 
    <nobr>
     @????????.???
    </nobr> address will be out of luck. But perhaps it is telling that 
    <nobr>
     <a href="http://????????.???">http://????????.???</a>
    </nobr> simply redirects to <a href="http://thnic.co.th">http://thnic.co.th</a> even though they're in the business of selling 
    <nobr>
     .???
    </nobr> domains.</p> 
   <p>The conclusion is that to decide which regular expression to use, whether you're trying to match an email address or something else that's vaguely defined, you need to start with considering all the trade-offs. How bad is it to match something that's not valid? How bad is it not to match something that is valid? How complex can your regular expression be? How expensive would it be if you had to change the regular expression later because it turned out to be too broad or too narrow? Different answers to these questions will require a different regular expression as the solution. My email regex does what I want, but it may not do what you want.</p> 
   <div class="adsense"> 
    <script type="text/javascript"><!--
google_ad_client = "pub-7485249680256358";
google_ad_width = 728;
google_ad_height = 90;
google_ad_format = "728x90_as";
google_ad_type = "text_image";
google_ad_channel = "";
google_color_border = "FF6600";
google_color_bg = "FFF4E8";
google_color_link = "EE5500";
google_color_text = "000000";
google_color_url = "803300";
google_ui_features = "rc:0";
//-->
</script> 
    <script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script> 
   </div>
   <h2>Regexes Don’t Send Email</h2> 
   <p>Don't go overboard in trying to eliminate invalid email addresses with your regular expression. The reason is that you don't really know whether an address is valid until you try to send an email to it. And even that might not be enough. Even if the email arrives in a mailbox, that doesn't mean somebody still reads that mailbox. If you really need to be sure an email address is valid, you'll need to send an email to it that contains a code or link for the recipient to perform a second authentication step. And if you're doing that, then there is little point in using a regex that may reject valid email addresses.</p> 
   <p>The same principle applies in many situations. When trying to <a href="dates.html" target="_top">match a valid date</a>, it's often easier to use a bit of arithmetic to check for leap years, rather than trying to do it in a regex. Use a regular expression to find potential matches or check if the input uses the proper syntax, and do the actual validation on the potential matches returned by the regular expression. Regular expressions are a powerful tool, but they're far from a panacea.</p> 
   <h2>The Official Standard: RFC 5322</h2> 
   <p>Maybe you're wondering why there's no "official" fool-proof regex to match email addresses. Well, there is an official definition, but it's hardly fool-proof.</p> 
   <p>The official standard is known as <a href="http://tools.ietf.org/html/rfc5322#section-3.4">RFC 5322</a>. It describes the syntax that valid email addresses must adhere to. You can (but you shouldn't—read on) implement it with the following regular expression. RFC 5322 leaves the domain name part open to implementation-specific choices that won't work on the Internet today. The regex implements the "preferred" syntax from <a href="http://tools.ietf.org/html/rfc1035#section-2.3.1">RFC 1035</a> which is one of the recommendations in RFC 5322:</p> 
   <p><tt class="code"><span class="regexspecial">\A</span><span class="regexnest1">(?:</span><span class="regexccopen">[</span><span class="regexccrange">a</span><span class="regexccrange">-</span><span class="regexccrange">z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">!#$%&amp;'*+/=?^_`{|}~</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">+</span><span class="regexnest2">(?:</span><span class="regexescaped">\.</span><span class="regexccopen">[</span><span class="regexccrange">a</span><span class="regexccrange">-</span><span class="regexccrange">z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">!#$%&amp;'*+/=?^_`{|}~</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">+</span><span class="regexnest2">)</span><span class="regexspecial">*</span><span class="regexplain"><br> &nbsp;</span><span class="regexnest1">|</span><span class="regexplain">&nbsp;&nbsp;</span><span class="regexplain">"</span><span class="regexnest2">(?:</span><span class="regexccopen">[</span><span class="regexccrange">\x01</span><span class="regexccrange">-</span><span class="regexccrange">\x08</span><span class="regexccspecial">\x0b</span><span class="regexccspecial">\x0c</span><span class="regexccrange">\x0e</span><span class="regexccrange">-</span><span class="regexccrange">\x1f</span><span class="regexccspecial">\x21</span><span class="regexccrange">\x23</span><span class="regexccrange">-</span><span class="regexccrange">\x5b</span><span class="regexccrange">\x5d</span><span class="regexccrange">-</span><span class="regexccrange">\x7f</span><span class="regexccopen">]</span><span class="regexplain"><br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="regexnest2">|</span><span class="regexplain">&nbsp;&nbsp;</span><span class="regexescaped">\\</span><span class="regexccopen">[</span><span class="regexccrange">\x01</span><span class="regexccrange">-</span><span class="regexccrange">\x09</span><span class="regexccspecial">\x0b</span><span class="regexccspecial">\x0c</span><span class="regexccrange">\x0e</span><span class="regexccrange">-</span><span class="regexccrange">\x7f</span><span class="regexccopen">]</span><span class="regexnest2">)</span><span class="regexspecial">*</span><span class="regexplain">"</span><span class="regexnest1">)</span><span class="regexplain"><br> </span><span class="regexplain">@</span><span class="regexplain">&nbsp;</span><span class="regexnest1">(?:</span><span class="regexnest2">(?:</span><span class="regexccopen">[</span><span class="regexccrange">a</span><span class="regexccrange">-</span><span class="regexccrange">z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexnest3">(?:</span><span class="regexccopen">[</span><span class="regexccrange">a</span><span class="regexccrange">-</span><span class="regexccrange">z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">*</span><span class="regexccopen">[</span><span class="regexccrange">a</span><span class="regexccrange">-</span><span class="regexccrange">z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexnest3">)</span><span class="regexspecial">?</span><span class="regexescaped">\.</span><span class="regexnest2">)</span><span class="regexspecial">+</span><span class="regexccopen">[</span><span class="regexccrange">a</span><span class="regexccrange">-</span><span class="regexccrange">z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexnest2">(?:</span><span class="regexccopen">[</span><span class="regexccrange">a</span><span class="regexccrange">-</span><span class="regexccrange">z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">*</span><span class="regexccopen">[</span><span class="regexccrange">a</span><span class="regexccrange">-</span><span class="regexccrange">z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexnest2">)</span><span class="regexspecial">?</span><span class="regexplain"><br> &nbsp;&nbsp;</span><span class="regexnest1">|</span><span class="regexplain">&nbsp;&nbsp;</span><span class="regexescaped">\[</span><span class="regexnest2">(?:</span><span class="regexnest3">(?:</span><span class="regexplain">25</span><span class="regexccopen">[</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">5</span><span class="regexccopen">]</span><span class="regexnest3">|</span><span class="regexplain">2</span><span class="regexccopen">[</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">4</span><span class="regexccopen">]</span><span class="regexccopen">[</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexnest3">|</span><span class="regexccopen">[</span><span class="regexccliteral">01</span><span class="regexccopen">]</span><span class="regexspecial">?</span><span class="regexccopen">[</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexccopen">[</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexspecial">?</span><span class="regexnest3">)</span><span class="regexescaped">\.</span><span class="regexnest2">)</span><span class="regexspecial">{3}</span><span class="regexplain"><br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="regexnest2">(?:</span><span class="regexplain">25</span><span class="regexccopen">[</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">5</span><span class="regexccopen">]</span><span class="regexnest2">|</span><span class="regexplain">2</span><span class="regexccopen">[</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">4</span><span class="regexccopen">]</span><span class="regexccopen">[</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexnest2">|</span><span class="regexccopen">[</span><span class="regexccliteral">01</span><span class="regexccopen">]</span><span class="regexspecial">?</span><span class="regexccopen">[</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexccopen">[</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexspecial">?</span><span class="regexnest2">|</span><span class="regexccopen">[</span><span class="regexccrange">a</span><span class="regexccrange">-</span><span class="regexccrange">z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">*</span><span class="regexccopen">[</span><span class="regexccrange">a</span><span class="regexccrange">-</span><span class="regexccrange">z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexplain">:</span><span class="regexplain"><br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="regexnest3">(?:</span><span class="regexccopen">[</span><span class="regexccrange">\x01</span><span class="regexccrange">-</span><span class="regexccrange">\x08</span><span class="regexccspecial">\x0b</span><span class="regexccspecial">\x0c</span><span class="regexccrange">\x0e</span><span class="regexccrange">-</span><span class="regexccrange">\x1f</span><span class="regexccrange">\x21</span><span class="regexccrange">-</span><span class="regexccrange">\x5a</span><span class="regexccrange">\x53</span><span class="regexccrange">-</span><span class="regexccrange">\x7f</span><span class="regexccopen">]</span><span class="regexplain"><br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="regexnest3">|</span><span class="regexplain">&nbsp;&nbsp;</span><span class="regexescaped">\\</span><span class="regexccopen">[</span><span class="regexccrange">\x01</span><span class="regexccrange">-</span><span class="regexccrange">\x09</span><span class="regexccspecial">\x0b</span><span class="regexccspecial">\x0c</span><span class="regexccrange">\x0e</span><span class="regexccrange">-</span><span class="regexccrange">\x7f</span><span class="regexccopen">]</span><span class="regexnest3">)</span><span class="regexspecial">+</span><span class="regexnest2">)</span><span class="regexplain"><br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="regexescaped">\]</span><span class="regexnest1">)</span><span class="regexspecial">\z</span></tt></p> 
   <p>This regex has two parts: the part before the @, and the part after the @. There are two alternatives for the part before the @: it can either consist of a series of letters, digits and certain symbols, including one or more dots. However, dots may not appear consecutively or at the start or end of the email address. The other alternative requires the part before the @ to be enclosed in double quotes, allowing any string of ASCII characters between the quotes. Whitespace characters, double quotes and backslashes must be escaped with backslashes.</p> 
   <p>The part after the @ also has two alternatives. It can either be a fully qualified domain name (e.g. regular-expressions.info), or it can be a literal Internet address between square brackets. The literal Internet address can either be an IP address, or a domain-specific routing address.</p> 
   <p>The reason you shouldn't use this regex is that it is overly broad. Your application may not be able to handle all email addresses this regex allows. Domain-specific routing addresses can contain non-printable ASCII control characters, which can cause trouble if your application needs to display addresses. Not all applications support the syntax for the local part using double quotes or square brackets. In fact, RFC 5322 itself marks the notation using square brackets as obsolete.</p> 
   <p>We get a more practical implementation of RFC 5322 if we omit IP addresses, domain-specific addresses, the syntax using double quotes and square brackets. It will still match 99.99% of all email addresses in actual use today.</p> 
   <p><tt class="code"><span class="regexspecial">\A</span><span class="regexccopen">[</span><span class="regexccrange">a</span><span class="regexccrange">-</span><span class="regexccrange">z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">!#$%&amp;'*+/=?^_`{|}~</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">+</span><span class="regexnest1">(?:</span><span class="regexescaped">\.</span><span class="regexccopen">[</span><span class="regexccrange">a</span><span class="regexccrange">-</span><span class="regexccrange">z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">!#$%&amp;'*+/=?^_`{|}~</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">+</span><span class="regexnest1">)</span><span class="regexspecial">*</span><span class="regexplain">@</span><span class="regexplain"><br> </span><span class="regexnest1">(?:</span><span class="regexccopen">[</span><span class="regexccrange">a</span><span class="regexccrange">-</span><span class="regexccrange">z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexnest2">(?:</span><span class="regexccopen">[</span><span class="regexccrange">a</span><span class="regexccrange">-</span><span class="regexccrange">z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">*</span><span class="regexccopen">[</span><span class="regexccrange">a</span><span class="regexccrange">-</span><span class="regexccrange">z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexnest2">)</span><span class="regexspecial">?</span><span class="regexescaped">\.</span><span class="regexnest1">)</span><span class="regexspecial">+</span><span class="regexccopen">[</span><span class="regexccrange">a</span><span class="regexccrange">-</span><span class="regexccrange">z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexnest1">(?:</span><span class="regexccopen">[</span><span class="regexccrange">a</span><span class="regexccrange">-</span><span class="regexccrange">z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">*</span><span class="regexccopen">[</span><span class="regexccrange">a</span><span class="regexccrange">-</span><span class="regexccrange">z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexnest1">)</span><span class="regexspecial">?</span><span class="regexspecial">\z</span></tt></p> 
   <p>Neither of these regexes enforce length limits on the overall email address or the local part or the domain names. RFC 5322 does not specify any length limitations. Those stem from limitations in other protocols like the SMTP protocol for actually sending email. RFC 1035 does state that domains must be 63 characters or less, but does not include that in its syntax specification. The reason is that a true regular language cannot enforce a length limit and disallow consecutive hyphens at the same time. But modern regex flavors aren't truly regular, so we can add length limit checks using lookahead like we did before:</p> 
   <p><tt class="code"><span class="regexspecial">\A</span><span class="regexnest1">(?=</span><span class="regexccopen">[</span><span class="regexccrange">a</span><span class="regexccrange">-</span><span class="regexccrange">z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">@.!#$%&amp;'*+/=?^_`{|}~</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">{6,254}</span><span class="regexspecial">\z</span><span class="regexnest1">)</span><span class="regexplain"><br> &nbsp;</span><span class="regexnest1">(?=</span><span class="regexccopen">[</span><span class="regexccrange">a</span><span class="regexccrange">-</span><span class="regexccrange">z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">.!#$%&amp;'*+/=?^_`{|}~</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">{1,64}</span><span class="regexplain">@</span><span class="regexnest1">)</span><span class="regexplain"><br> &nbsp;</span><span class="regexccopen">[</span><span class="regexccrange">a</span><span class="regexccrange">-</span><span class="regexccrange">z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">!#$%&amp;'*+/=?^_`{|}~</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">+</span><span class="regexnest1">(?:</span><span class="regexescaped">\.</span><span class="regexccopen">[</span><span class="regexccrange">a</span><span class="regexccrange">-</span><span class="regexccrange">z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">!#$%&amp;'*+/=?^_`{|}~</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">+</span><span class="regexnest1">)</span><span class="regexspecial">*</span><span class="regexplain"><br> </span><span class="regexplain">@</span><span class="regexplain"> </span><span class="regexnest1">(?:</span><span class="regexnest2">(?=</span><span class="regexccopen">[</span><span class="regexccrange">a</span><span class="regexccrange">-</span><span class="regexccrange">z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">{1,63}</span><span class="regexescaped">\.</span><span class="regexnest2">)</span><span class="regexccopen">[</span><span class="regexccrange">a</span><span class="regexccrange">-</span><span class="regexccrange">z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexnest2">(?:</span><span class="regexccopen">[</span><span class="regexccrange">a</span><span class="regexccrange">-</span><span class="regexccrange">z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">*</span><span class="regexccopen">[</span><span class="regexccrange">a</span><span class="regexccrange">-</span><span class="regexccrange">z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexnest2">)</span><span class="regexspecial">?</span><span class="regexescaped">\.</span><span class="regexnest1">)</span><span class="regexspecial">+</span><span class="regexplain"><br> &nbsp;&nbsp;</span><span class="regexnest1">(?=</span><span class="regexccopen">[</span><span class="regexccrange">a</span><span class="regexccrange">-</span><span class="regexccrange">z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">{1,63}</span><span class="regexspecial">\z</span><span class="regexnest1">)</span><span class="regexccopen">[</span><span class="regexccrange">a</span><span class="regexccrange">-</span><span class="regexccrange">z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexnest1">(?:</span><span class="regexccopen">[</span><span class="regexccrange">a</span><span class="regexccrange">-</span><span class="regexccrange">z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccliteral">-</span><span class="regexccopen">]</span><span class="regexspecial">*</span><span class="regexccopen">[</span><span class="regexccrange">a</span><span class="regexccrange">-</span><span class="regexccrange">z</span><span class="regexccrange">0</span><span class="regexccrange">-</span><span class="regexccrange">9</span><span class="regexccopen">]</span><span class="regexnest1">)</span><span class="regexspecial">?</span><span class="regexspecial">\z</span></tt></p> 
   <p>So even when following official standards, there are still trade-offs to be made. Don't blindly copy regular expressions from online libraries or discussion forums. Always test them on your own data and with your own applications.</p> 
   <h2>Make a Donation</h2> 
   <p>Did this website just save you a trip to the bookstore? Please <a href="donate.html">make a donation</a> to support this site, and you'll get a <b>lifetime of advertisement-free access</b> to this site! Credit cards, PayPal, and Bitcoin gladly accepted.</p> 
   <div id="copyright"> 
    <p class="copyright">Page URL: <a href="http://www.regular-expressions.info/email.html" target="_top">http://www.regular-expressions.info/email.html</a><br> Page last updated: 07 July 2017<br> Site last updated: 15 September 2017<br> Copyright © 2003-2017 Jan Goyvaerts. All rights reserved.</p> 
   </div> 
  </div> 
  <div id="side">
   <script type="text/javascript">movecontent();</script> 
   <a href="donate.html" class="img"><img src="img/donate.png" width="240" height="40" class="side"></a> 
   <table class="side" cellspacing="0" cellpadding="4">
    <tbody>
     <tr>
      <td class="sideheader">Examples</td>
     </tr>
     <tr>
      <td><a href="examples.html" target="_top">Regular&nbsp;Expressions&nbsp;Examples</a></td>
     </tr>
     <tr>
      <td><a href="numericranges.html" target="_top">Numeric&nbsp;Ranges</a></td>
     </tr>
     <tr>
      <td><a href="floatingpoint.html" target="_top">Floating&nbsp;Point&nbsp;Numbers</a></td>
     </tr>
     <tr>
      <td><a href="email.html" target="_top">Email&nbsp;Addresses</a></td>
     </tr>
     <tr>
      <td><a href="ip.html" target="_top">IP&nbsp;Addresses</a></td>
     </tr>
     <tr>
      <td><a href="dates.html" target="_top">Valid&nbsp;Dates</a></td>
     </tr>
     <tr>
      <td><a href="datestotext.html" target="_top">Numeric&nbsp;Dates&nbsp;to&nbsp;Text</a></td>
     </tr>
     <tr>
      <td><a href="creditcard.html" target="_top">Credit&nbsp;Card&nbsp;Numbers</a></td>
     </tr>
     <tr>
      <td><a href="completelines.html" target="_top">Matching&nbsp;Complete&nbsp;Lines</a></td>
     </tr>
     <tr>
      <td><a href="duplicatelines.html" target="_top">Deleting&nbsp;Duplicate&nbsp;Lines</a></td>
     </tr>
     <tr>
      <td><a href="examplesprogrammer.html" target="_top">Programming</a></td>
     </tr>
     <tr>
      <td><a href="near.html" target="_top">Two&nbsp;Near&nbsp;Words</a></td>
     </tr> 
    </tbody>
   </table>
   <table class="side" cellspacing="0" cellpadding="4">
    <tbody>
     <tr>
      <td class="sideheader">Pitfalls</td>
     </tr>
     <tr>
      <td><a href="catastrophic.html" target="_top">Catastrophic&nbsp;Backtracking</a></td>
     </tr>
     <tr>
      <td><a href="redos.html" target="_top">Denial&nbsp;of&nbsp;Service</a></td>
     </tr>
     <tr>
      <td><a href="floatingpoint.html" target="_top">Making&nbsp;Everything&nbsp;Optional</a></td>
     </tr>
     <tr>
      <td><a href="captureall.html" target="_top">Repeated&nbsp;Capturing&nbsp;Group</a></td>
     </tr>
     <tr>
      <td><a href="unicode8bit.html" target="_top">Mixing&nbsp;Unicode&nbsp;&amp;&nbsp;8-bit</a></td>
     </tr> 
    </tbody>
   </table>
   <table class="side" cellspacing="0" cellpadding="4">
    <tbody>
     <tr>
      <td class="sideheader">More on This Site</td>
     </tr>
     <tr>
      <td><a href="index.html" target="_top">Introduction</a></td>
     </tr>
     <tr>
      <td><a href="quickstart.html" target="_top">Regular&nbsp;Expressions&nbsp;Quick&nbsp;Start</a></td>
     </tr>
     <tr>
      <td><a href="tutorial.html" target="_top">Regular&nbsp;Expressions&nbsp;Tutorial</a></td>
     </tr>
     <tr>
      <td><a href="replacetutorial.html" target="_top">Replacement&nbsp;Strings&nbsp;Tutorial</a></td>
     </tr>
     <tr>
      <td><a href="tools.html" target="_top">Applications&nbsp;and&nbsp;Languages</a></td>
     </tr>
     <tr>
      <td><a href="examples.html" target="_top">Regular&nbsp;Expressions&nbsp;Examples</a></td>
     </tr>
     <tr>
      <td><a href="reference.html" target="_top">Regular&nbsp;Expressions&nbsp;Reference</a></td>
     </tr>
     <tr>
      <td><a href="refreplace.html" target="_top">Replacement&nbsp;Strings&nbsp;Reference</a></td>
     </tr>
     <tr>
      <td><a href="books.html" target="_top">Book&nbsp;Reviews</a></td>
     </tr>
     <tr>
      <td><a href="print.html" target="_top">Printable&nbsp;PDF</a></td>
     </tr>
     <tr>
      <td><a href="about.html" target="_top">About&nbsp;This&nbsp;Site</a></td>
     </tr>
     <tr>
      <td><a href="updates.html" target="_top">RSS&nbsp;Feed&nbsp;&amp;&nbsp;Blog</a></td>
     </tr>
    </tbody>
   </table>
   <iframe class="amazonsingle" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;OneJS=1&amp;Operation=GetAdHtml&amp;MarketPlace=US&amp;source=ss&amp;ref=as_ss_li_til&amp;ad_type=product_link&amp;tracking_id=jgsbookselection&amp;marketplace=amazon&amp;region=US&amp;placement=1449319432&amp;asins=1449319432&amp;linkId=cc38d5883c3f92bbeb69b93a6810322a&amp;show_border=true&amp;link_opens_in_new_window=true"></iframe>
   <div class="adsense"> 
    <script type="text/javascript"><!--
google_ad_client = "pub-7485249680256358";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
google_color_border = "FF6600";
google_color_bg = "FFF4E8";
google_color_link = "EE5500";
google_color_text = "000000";
google_color_url = "803300";
google_ui_features = "rc:0";
//-->
</script> 
    <script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script> 
   </div>
   <div>
    <a href="//www.powergrep.com/"><img class="side" src="ads/pgr100.png" srcset="ads/pgr100.png 1x, ads/pgr125.png 1.25x, ads/pgr150.png 1.5x, ads/pgr175.png 1.75x, ads/pgr200.png 2x, ads/pgr250.png 2.5x, ads/pgr300.png 3x" alt="PowerGREP—The world’s most powerful tool to flex your regex muscles!"></a>
   </div>
  </div>
  <script type="text/javascript">movecontent();</script>
 </body>
</html>