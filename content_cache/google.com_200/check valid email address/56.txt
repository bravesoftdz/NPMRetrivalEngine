<!doctype html>
<html class="no-js hasSidebar hasPageActions hasBreadcrumb " lang="en-us" dir="ltr">
 <head> 
  <meta charset="utf-8"> 
  <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
  <meta property="og:title" content="How to: Verify that Strings Are in Valid Email Format"> 
  <meta property="og:image" content="https://docs.microsoft.com/_themes/docs.theme/master/en-us/_themes/images/microsoft-header.png"> 
  <meta name="author" content="rpetrusha"> 
  <meta name="ms.author" content="ronpet"> 
  <meta name="manager" content="wpickett"> 
  <meta name="breadcrumb_path" content="/dotnet/toc.json"> 
  <meta name="apiPlatform" content="dotnet"> 
  <meta name="uhfHeaderId" content="MSDocsHeader-DotNet"> 
  <meta name="ms.suite" content=""> 
  <meta name="ms.custom" content=""> 
  <meta name="ms.tgt_pltfrm" content=""> 
  <meta name="ms.assetid" content="7536af08-4e86-4953-98a1-a8298623df92"> 
  <meta name="caps.latest.revision" content="30"> 
  <meta name="ms.topic" content="article"> 
  <meta name="ms.date" content="03/30/2017"> 
  <meta name="ms.technology" content="dotnet-standard"> 
  <meta name="ms.prod" content=".net"> 
  <meta name="ms.reviewer" content=""> 
  <meta name="search.ms_sitename" content="Docs"> 
  <meta name="search.ms_docsetname" content="core-docs"> 
  <meta name="locale" content="en-us"> 
  <meta name="site_name" content="Docs"> 
  <meta name="search.ms_product" content="VS"> 
  <meta name="depot_name" content="VS.core-docs"> 
  <meta name="updated_at" content="2017-09-17 12:23 AM"> 
  <meta name="gitcommit" content="https://github.com/dotnet/docs/blob/629a5eb29c455d8c1ef4686c8c5b0d79d7786e1f/docs/standard/base-types/how-to-verify-that-strings-are-in-valid-email-format.md"> 
  <meta name="original_content_git_url" content="https://github.com/dotnet/docs/blob/live/docs/standard/base-types/how-to-verify-that-strings-are-in-valid-email-format.md"> 
  <meta name="document_id" content="202e3f9f-a12a-53de-9069-fd469e3dbebc"> 
  <meta name="pagetype" content="Conceptual"> 
  <meta name="toc_rel" content="toc.json"> 
  <meta name="pdf_url_template" content="https://docs.microsoft.com/pdfstore/en-us/VS.core-docs/{branchName}{pdfName}"> 
  <meta name="word_count" content="1481"> 
  <meta name="scope" content=".NET"> 
  <link href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/how-to-verify-that-strings-are-in-valid-email-format" rel="canonical"> 
  <title>How to: Verify that Strings Are in Valid Email Format | Microsoft Docs</title> 
  <link rel="stylesheet" href="/_themes/docs.theme/master/en-us/_themes/css/b11234fb1603062af431.site.css "> 
  <link rel="stylesheet" href="/_themes/docs.theme/master/en-us/_themes/css/b11234fb1603062af431.conceptual.css "> 
  <script>
	var msDocs = {
		data:{
			contentLocale: 'en-us',
			contentDir: 'ltr',
			userLocale: 'en-us',
			userDir: 'ltr',
			pathToTheme: '/_themes/docs.theme/master/en-us/_themes/',
			pageTemplate: 'Conceptual',
			brand: ''
		},
		functions:{},
		settings:{
			extendBreadcrumb: false
		}
	};
	if (!('Promise' in window && 'resolve' in window.Promise && 'reject' in window.Promise && 'all' in window.Promise && 'race' in window.Promise)) {
		document.write('<script src="/_themes/docs.theme/master/en-us/_themes/global/js/bluebird.min.js"><\/script>');
	}
	</script> 
  <!--[if lt IE 9]>
		<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.12.4.min.js"></script>
		<script src="/_themes/docs.theme/master/en-us/_themes/global/js/polyfills/all.js"></script>
	<![endif]--> 
  <!--[if gte IE 9]><!--> 
  <script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-2.2.4.min.js"></script> 
  <!--<![endif]--> 
  <script>window.jQuery || document.write('<script src="/_themes/docs.theme/master/en-us/_themes/global/js/jquery/jquery-1.12.4.min.js"><\/script>')</script> 
  <script src="/_themes/docs.theme/master/en-us/_themes/global/js/global.min.js?v=247"></script> 
 </head> 
 <body> 
  <div id="headerAreaHolder" ms.pgarea="header" data-bi-name="header"> 
   <div id="uhfPlaceHolder" class="c-me"></div> 
  </div> 
  <div class="container mainContainer" lang="en-us" dir="ltr" ms.pgarea="body" data-bi-name="body"> 
   <main role="main" ms.cmpgrp="content" data-bi-name="content"> 
    <div id="main"> 
     <h1 id="how-to-verify-that-strings-are-in-valid-email-format" sourcefile="docs/standard/base-types/how-to-verify-that-strings-are-in-valid-email-format.md" sourcestartlinenumber="29" sourceendlinenumber="29">How to: Verify that Strings Are in Valid Email Format</h1> 
     <div class="metadata loading" ms.cmpgrp="page info" data-bi-name="page info"> 
      <div> 
       <time class="date" datetime="3/30/2017 12:00:00 AM">2017-3-30</time> 
       <span class="reading-time">7 minutes to read</span> 
       <span class="contributors-text">Contributors</span> 
       <ul class="contributors" ms.cmpgrp="contributors" data-bi-name="contributors"> 
        <li><a href="https://github.com/rpetrusha" title="Ron Petrusha" ms.cmpnm="contributorprofile" data-bi-name="contributorprofile"><img src="https://github.com/rpetrusha.png?size=16" alt="Ron Petrusha"></a></li> 
        <li><a href="https://github.com/p13i" title="Pramod Kotipalli" ms.cmpnm="contributorprofile" data-bi-name="contributorprofile"><img src="https://github.com/p13i.png?size=16" alt="Pramod Kotipalli"></a></li> 
        <li><a href="https://github.com/GuardRex" title="Luke Latham" ms.cmpnm="contributorprofile" data-bi-name="contributorprofile"><img src="https://github.com/GuardRex.png?size=16" alt="Luke Latham"></a></li> 
        <li><a href="https://github.com/yishengjin1413" title="yishengjin1413" ms.cmpnm="contributorprofile" data-bi-name="contributorprofile"><img src="https://github.com/yishengjin1413.png?size=16" alt="yishengjin1413"></a></li> 
        <li><a href="https://github.com/tompratt-AQ" title="tompratt-AQ" ms.cmpnm="contributorprofile" data-bi-name="contributorprofile"><img src="https://github.com/tompratt-AQ.png?size=16" alt="tompratt-AQ"></a></li> 
       </ul> 
      </div> 
      <nav id="center-doc-outline" class="doc-outline" ms.cmpgrp="intopic toc" data-bi-name="intopic toc" role="navigation" aria-label="On page navigation"> 
       <h3>In this article</h3> 
      </nav> 
     </div> 
     <div>
      <div class="content"> 
       <p>The following example uses a regular expression to verify that a string is in valid email format. </p> 
       <h2 id="example">Example</h2> 
       <p> The example defines an <code>IsValidEmail</code> method, which returns <code>true</code> if the string contains a valid email address and <code>false</code> if it does not, but takes no other action. </p> 
       <p> To verify that the email address is valid, the <code>IsValidEmail</code> method calls the <a class="xref" href="../../api/system.text.regularexpressions.regex.replace#System_Text_RegularExpressions_Regex_Replace_System_String_System_String_System_Text_RegularExpressions_MatchEvaluator_" data-linktype="relative-path">Regex.Replace(String, String, MatchEvaluator)</a> method with the <code>(@)(.+)$</code> regular expression pattern to separate the domain name from the email address. The third parameter is a <a class="xref" href="../../api/system.text.regularexpressions.matchevaluator" data-linktype="relative-path">MatchEvaluator</a> delegate that represents the method that processes and replaces the matched text. The regular expression pattern is interpreted as follows. </p> 
       <table> 
        <thead> 
         <tr> 
          <th>Pattern</th> 
          <th>Description</th> 
         </tr> 
        </thead> 
        <tbody> 
         <tr> 
          <td><code>(@)</code></td> 
          <td>Match the @ character. This is the first capturing group.</td> 
         </tr> 
         <tr> 
          <td><code>(.+)</code></td> 
          <td>Match one or more occurrences of any character. This is the second capturing group.</td> 
         </tr> 
         <tr> 
          <td><code>$</code></td> 
          <td>End the match at the end of the string.</td> 
         </tr> 
        </tbody> 
       </table> 
       <p> The domain name along with the @ character is passed to the <code>DomainMapper</code> method, which uses the <a class="xref" href="../../api/system.globalization.idnmapping" data-linktype="relative-path">IdnMapping</a> class to translate Unicode characters that are outside the US-ASCII character range to Punycode. The method also sets the <code>invalid</code> flag to <code>True</code> if the <a class="xref" href="../../api/system.globalization.idnmapping.getascii" data-linktype="relative-path">IdnMapping.GetAscii</a> method detects any invalid characters in the domain name. The method returns the Punycode domain name preceded by the @ symbol to the <code>IsValidEmail</code> method. </p> 
       <p> The <code>IsValidEmail</code> method then calls the <a class="xref" href="../../api/system.text.regularexpressions.regex.ismatch#System_Text_RegularExpressions_Regex_IsMatch_System_String_System_String_" data-linktype="relative-path">Regex.IsMatch(String, String)</a> method to verify that the address conforms to a regular expression pattern. </p> 
       <p> Note that the <code>IsValidEmail</code> method does not perform authentication to validate the email address. It merely determines whether its format is valid for an email address. In addition, the <code>IsValidEmail</code> method does not verify that the top-level domain name is a valid domain name listed at the <a href="https://www.iana.org/domains/root/db" data-linktype="external">IANA Root Zone Database</a>, which would require a look-up operation. Instead, the regular expression merely verifies that the top-level domain name consists of between two and twenty-four ASCII characters, with alphanumeric first and last characters and the remaining characters being either alphanumeric or a hyphen (-). </p> 
       <pre><code class="lang-csharp" data-src="https://github.com/dotnet/docs/blob/live/samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions.Examples.Email/cs/example4.cs" name="RegularExpressions.Examples.Email#7">using System;
using System.Globalization;
using System.Text.RegularExpressions;

public class RegexUtilities
{
   bool invalid = false;

   public bool IsValidEmail(string strIn)
   {
       invalid = false;
       if (String.IsNullOrEmpty(strIn))
          return false;

       // Use IdnMapping class to convert Unicode domain names.
       try {
          strIn = Regex.Replace(strIn, @"(@)(.+)$", this.DomainMapper,
                                RegexOptions.None, TimeSpan.FromMilliseconds(200));
       }
       catch (RegexMatchTimeoutException) {
         return false;
       }

        if (invalid)
           return false;

       // Return true if strIn is in valid e-mail format.
       try {
          return Regex.IsMatch(strIn,
                @"^(?("")("".+?(?&lt;!\\)""@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&amp;'\*\+/=\?\^`\{\}\|~\w])*)(?&lt;=[0-9a-z])@))" +
                @"(?(\[)(\[(\d{1,3}\.){3}\d{1,3}\])|(([0-9a-z][-\w]*[0-9a-z]*\.)+[a-z0-9][\-a-z0-9]{0,22}[a-z0-9]))$",
                RegexOptions.IgnoreCase, TimeSpan.FromMilliseconds(250));
       }
       catch (RegexMatchTimeoutException) {
          return false;
       }
   }

   private string DomainMapper(Match match)
   {
      // IdnMapping class with default property values.
      IdnMapping idn = new IdnMapping();

      string domainName = match.Groups[2].Value;
      try {
         domainName = idn.GetAscii(domainName);
      }
      catch (ArgumentException) {
         invalid = true;
      }
      return match.Groups[1].Value + domainName;
   }
}
</code></pre>
       <pre><code class="lang-vb" data-src="https://github.com/dotnet/docs/blob/live/samples/snippets/visualbasic/VS_Snippets_CLR/RegularExpressions.Examples.Email/vb/example4.vb" name="RegularExpressions.Examples.Email#7">Imports System.Globalization
Imports System.Text.RegularExpressions

Public Class RegexUtilities
   Dim invalid As Boolean = False
   
   public Function IsValidEmail(strIn As String) As Boolean
       invalid = False
       If String.IsNullOrEmpty(strIn) Then Return False
       
       ' Use IdnMapping class to convert Unicode domain names.
       Try
          strIn = Regex.Replace(strIn, "(@)(.+)$", AddressOf Me.DomainMapper, 
                                RegexOptions.None, TimeSpan.FromMilliseconds(200))
       Catch e As RegexMatchTimeoutException
          Return False
       End Try
       
       If invalid Then Return False
       
       ' Return true if strIn is in valid e-mail format.
       Try
          Return Regex.IsMatch(strIn,
                 "^(?("")("".+?(?&lt;!\\)""@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&amp;'\*\+/=\?\^`\{\}\|~\w])*)(?&lt;=[0-9a-z])@))" +
                 "(?(\[)(\[(\d{1,3}\.){3}\d{1,3}\])|(([0-9a-z][-\w]*[0-9a-z]*\.)+[a-z0-9][\-a-z0-9]{0,22}[a-z0-9]))$",
                 RegexOptions.IgnoreCase, TimeSpan.FromMilliseconds(250))
       Catch e As RegexMatchTimeoutException
          Return False
       End Try  
   End Function
   
   Private Function DomainMapper(match As Match) As String
      ' IdnMapping class with default property values.
      Dim idn As New IdnMapping()

      Dim domainName As String = match.Groups(2).Value
      Try
         domainName = idn.GetAscii(domainName)
      Catch e As ArgumentException
         invalid = True      
      End Try      
      Return match.Groups(1).Value + domainName
   End Function
End Class
</code></pre>
       <p> In this example, the regular expression pattern <code>^(?(")(".+?(?&lt;!\\)"@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&amp;'\*\+/=\?\^`{}|~\w])*)(?&lt;=[0-9a-z])@))(?([)([(\d{1,3}.){3}\d{1,3}])|(([0-9a-z][-\w]*[0-9a-z]*.)+[a-z0-9][-a-z0-9]{0,22}[a-z0-9]))$</code> is interpreted as shown in the following table. Note that the regular expression is compiled using the <a class="xref" href="../../api/system.text.regularexpressions.regexoptions.ignorecase" data-linktype="relative-path">RegexOptions.IgnoreCase</a> flag. </p> 
       <table> 
        <thead> 
         <tr> 
          <th>Pattern</th> 
          <th>Description</th> 
         </tr> 
        </thead> 
        <tbody> 
         <tr> 
          <td><code>^</code></td> 
          <td>Begin the match at the start of the string.</td> 
         </tr> 
         <tr> 
          <td><code>(?(")</code></td> 
          <td>Determine whether the first character is a quotation mark. <code>(?(")</code> is the beginning of an alternation construct.</td> 
         </tr> 
         <tr> 
          <td><code>(?("")("".+?(?&lt;!\\)""@)</code></td> 
          <td>If the first character is a quotation mark, match a beginning quotation mark followed by at least one occurrence of any character, followed by an ending quotation mark. The ending quotation mark must not be preceded by a backslash character (\). <code>(?&lt;!</code> is the beginning of a zero-width negative lookbehind assertion. The string should conclude with an at sign (@).</td> 
         </tr> 
         <tr> 
          <td><code>&amp;#124;(([0-9a-z]</code></td> 
          <td>If the first character is not a quotation mark, match any alphabetic character from a to z or A to Z (the comparison is case insensitive), or any numeric character from 0 to 9.</td> 
         </tr> 
         <tr> 
          <td><code>(\.(?!\.))</code></td> 
          <td>If the next character is a period, match it. If it is not a period, look ahead to the next character and continue the match. <code>(?!\.)</code> is a zero-width negative lookahead assertion that prevents two consecutive periods from appearing in the local part of an email address.</td> 
         </tr> 
         <tr> 
          <td><code>&amp;#124;[-!#\$%&amp;'\*\+/=\?\^`{}\&amp;#124;~\w]</code></td> 
          <td>If the next character is not a period, match any word character or one of the following characters: -!#$%'*+=?^`{}|~.</td> 
         </tr> 
         <tr> 
          <td><code>((\.(?!\.))&amp;#124;[-!#\$%'\*\+/=\?\^`{}\&amp;#124;~\w])*</code></td> 
          <td>Match the alternation pattern (a period followed by a non-period, or one of a number of characters) zero or more times.</td> 
         </tr> 
         <tr> 
          <td><code>@</code></td> 
          <td>Match the @ character.</td> 
         </tr> 
         <tr> 
          <td><code>(?&lt;=[0-9a-z])</code></td> 
          <td>Continue the match if the character that precedes the @ character is A through Z, a through z, or 0 through 9. The <code>(?&lt;=[0-9a-z])</code> construct defines a zero-width positive lookbehind assertion.</td> 
         </tr> 
         <tr> 
          <td><code>(?(\[)</code></td> 
          <td>Check whether the character that follows @ is an opening bracket.</td> 
         </tr> 
         <tr> 
          <td><code>(\[(\d{1,3}\.){3}\d{1,3}\])</code></td> 
          <td>If it is an opening bracket, match the opening bracket followed by an IP address (four sets of one to three digits, with each set separated by a period) and a closing bracket.</td> 
         </tr> 
         <tr> 
          <td><code>&amp;#124;(([0-9a-z][-\w]*[0-9a-z]*\.)+</code></td> 
          <td>If the character that follows @ is not an opening bracket, match one alphanumeric character with a value of A-Z, a-z, or 0-9, followed by zero or more occurrences of a word character or a hyphen, followed by zero or one alphanumeric character with a value of A-Z, a-z, or 0-9, followed by a period. This pattern can be repeated one or more times, and must be followed by the top-level domain name.</td> 
         </tr> 
         <tr> 
          <td><code>[a-z0-9][\-a-z0-9]{0,22}[a-z0-9]))</code></td> 
          <td>The top-level domain name must begin and end with an alphanumeric character (a-z, A-Z, and 0-9). It can also include from zero to 22 ASCII characters that are either alphanumeric or hyphens.</td> 
         </tr> 
         <tr> 
          <td><code>$</code></td> 
          <td>End the match at the end of the string.</td> 
         </tr> 
        </tbody> 
       </table> 
       <div class="NOTE">
        <h5>Note</h5>
        <p> Instead of using a regular expression to validate an email address, you can use the <a class="xref" href="../../api/system.net.mail.mailaddress" data-linktype="relative-path">System.Net.Mail.MailAddress</a> class. To determine whether an email address is valid, pass the email address to the <a class="xref" href="../../api/system.net.mail.mailaddress.-ctor#System_Net_Mail_MailAddress__ctor_System_String_" data-linktype="relative-path">MailAddress.MailAddress(String)</a> class constructor. </p> 
       </div> 
       <h2 id="compiling-the-code">Compiling the Code</h2> 
       <p> The <code>IsValidEmail</code> and <code>DomainMapper</code> methods can be included in a library of regular expression utility methods, or they can be included as private static or instance methods in the application class. </p> 
       <p> To include them in a regular expression library, either copy and paste the code into a Visual Studio Class Library project, or copy and paste it into a text file and compile it from the command line with a command like the following (assuming that the name of the source code file is RegexUtilities.cs or RegexUtilities.vb: </p> 
       <pre><code class="lang-csharp">csc /t:library RegexUtilities.cs  
</code></pre>
       <pre><code class="lang-vb">vbc /t:library RegexUtilities.vb  
</code></pre>
       <p> You can also use the <a class="xref" href="../../api/system.text.regularexpressions.regex.compiletoassembly" data-linktype="relative-path">Regex.CompileToAssembly</a> method to include this regular expression in a regular expression library. </p> 
       <p> If they are used in a regular expression library, you can call them by using code such as the following: </p> 
       <pre><code class="lang-csharp" data-src="https://github.com/dotnet/docs/blob/live/samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions.Examples.Email/cs/example4.cs" name="RegularExpressions.Examples.Email#8">public class Application
{
   public static void Main()
   {
      RegexUtilities util = new RegexUtilities();
      string[] emailAddresses = { "david.jones@proseware.com", "d.j@server1.proseware.com",
                                  "jones@ms1.proseware.com", "j.@server1.proseware.com",
                                  "j@proseware.com9", "js#internal@proseware.com",
                                  "j_9@[129.126.118.1]", "j..s@proseware.com",
                                  "js*@proseware.com", "js@proseware..com",
                                  "js@proseware.com9", "j.s@server1.proseware.com",
                                   "\"j\\\"s\\\"\"@proseware.com", "js@contoso.??" };

      foreach (var emailAddress in emailAddresses) {
         if (util.IsValidEmail(emailAddress))
            Console.WriteLine("Valid: {0}", emailAddress);
         else
            Console.WriteLine("Invalid: {0}", emailAddress);
      }                                            
   }
}
// The example displays the following output:
//       Valid: david.jones@proseware.com
//       Valid: d.j@server1.proseware.com
//       Valid: jones@ms1.proseware.com
//       Invalid: j.@server1.proseware.com
//       Valid: j@proseware.com9
//       Valid: js#internal@proseware.com
//       Valid: j_9@[129.126.118.1]
//       Invalid: j..s@proseware.com
//       Invalid: js*@proseware.com
//       Invalid: js@proseware..com
//       Valid: js@proseware.com9
//       Valid: j.s@server1.proseware.com
//       Valid: "j\"s\""@proseware.com
//       Valid: js@contoso.中国
</code></pre>
       <pre><code class="lang-vb" data-src="https://github.com/dotnet/docs/blob/live/samples/snippets/visualbasic/VS_Snippets_CLR/RegularExpressions.Examples.Email/vb/example4.vb" name="RegularExpressions.Examples.Email#8">Public Class Application
   Public Shared Sub Main()
      Dim util As New RegexUtilities()
      Dim emailAddresses() As String = { "david.jones@proseware.com", "d.j@server1.proseware.com", _
                                         "jones@ms1.proseware.com", "j.@server1.proseware.com", _
                                         "j@proseware.com9", "js#internal@proseware.com", _
                                         "j_9@[129.126.118.1]", "j..s@proseware.com", _
                                         "js*@proseware.com", "js@proseware..com", _
                                         "js@proseware.com9", "j.s@server1.proseware.com",
                                         """j\""s\""""@proseware.com", "js@contoso.??" }

      For Each emailAddress As String In emailAddresses
         If util.IsValidEmail(emailAddress) Then
            Console.WriteLine("Valid: {0}", emailAddress)
         Else
            Console.WriteLine("Invalid: {0}", emailAddress)
         End If      
      Next                                            
   End Sub
End Class
' The example displays the following output:
'       Valid: david.jones@proseware.com
'       Valid: d.j@server1.proseware.com
'       Valid: jones@ms1.proseware.com
'       Invalid: j.@server1.proseware.com
'       Valid: j@proseware.com9
'       Valid: js#internal@proseware.com
'       Valid: j_9@[129.126.118.1]
'       Invalid: j..s@proseware.com
'       Invalid: js*@proseware.com
'       Invalid: js@proseware..com
'       Valid: js@proseware.com9
'       Valid: j.s@server1.proseware.com
'       Valid: "j\"s\""@proseware.com
'       Valid: js@contoso.中国
</code></pre>
       <p> Assuming you've created a class library named RegexUtilities.dll that includes your email validation regular expression, you can compile this example in either of the following ways: </p> 
       <ul> 
        <li><p>In Visual Studio, by creating a Console Application and adding a reference to RegexUtilities.dll to your project. </p> </li> 
        <li><p>From the command line, by copying and pasting the source code into a text file and compiling it with a command like the following (assuming that the name of the source code file is Example.cs or Example.vb: </p> <pre><code class="lang-csharp">csc Example.cs /r:RegexUtilities.dll  
</code></pre><pre><code class="lang-vb">vbc Example.vb /r:RegexUtilities.dll  
</code></pre></li> 
       </ul> 
       <h2 id="see-also">See Also</h2> 
       <p> <a href="regular-expressions" data-linktype="relative-path">.NET Framework Regular Expressions</a></p> 
      </div>
     </div> 
     <div id="comments-container" ms.cmpgrp="comments" data-bi-name="comments" role="form"></div> 
    </div> 
   </main> 
   <div class="pageActions"> 
    <div id="page-actions" ms.cmpgrp="pageactions" data-bi-name="pageactions" role="complementary"> 
     <div id="page-actions-content"> 
      <ul class="action-list"> 
       <li> <a href="#comments-container" id="comments-link" ms.cmpnm="comments" data-bi-name="comments"> <i class="icon icon-comments"></i>Comments </a> </li> 
       <li id="contenteditbtn"> <a href="https://github.com/dotnet/docs/blob/master/docs/standard/base-types/how-to-verify-that-strings-are-in-valid-email-format.md" title="Edit This Document" ms.cmpnm="edit" data-bi-name="edit"> <i class="icon icon-editor"></i>Edit </a> </li> 
       <li> <a href="#" class="sharebutton" title="Share This Document" ms.cmpnm="share" data-bi-name="share"><i class="icon icon-share"></i>Share</a> 
        <div class="share-container"> 
         <div>
          <a href="" class="share-twitter" ms.cmpnm="twitter" data-bi-name="twitter"><i class="icon icon-twitter"></i>Twitter</a>
         </div> 
         <div>
          <a href="" class="share-linkedin" ms.cmpnm="share-linkedin" data-bi-name="linkedin"><i class="icon icon-linkedin"></i>LinkedIn</a>
         </div> 
         <div>
          <a href="" class="share-facebook" ms.cmpnm="facebook" data-bi-name="facebook"><i class="icon icon-facebook"></i>Facebook</a>
         </div> 
         <div>
          <a href="" class="share-email" ms.cmpnm="email" data-bi-name="email"><i class="icon icon-email"></i>Email</a>
         </div> 
        </div> </li> 
       <li class="typeSep">|</li> 
       <li> <label for="theme-selector">Theme</label> <select id="theme-selector" data-bi-name="select-theme"> <option value="" class="removedOnload"></option> <option value="">Light</option> <option value="theme_night">Dark</option> </select> </li> 
      </ul> 
      <nav id="side-doc-outline" class="doc-outline" ms.cmpnm="intopic toc" data-bi-name="intopic toc" role="navigation" aria-label="On page navigation"> 
       <h3>In this article</h3> 
      </nav> 
     </div> 
    </div> 
   </div> 
   <ul class="breadcrumbs" ms.cmpgrp="breadcrumb" data-bi-name="breadcrumb" role="navigation" aria-label="breadcrumb">
    <li></li>
   </ul> 
   <div class="sidebar" id="sidebar" ms.cmpgrp="left toc" data-bi-name="left toc" role="navigation" aria-label="main navigation" lang="en-us" dir="ltr"> 
    <div id="sidebarContent"> 
     <div class="filterHolder"> 
     </div> 
     <nav class="toc"></nav> 
     <div class="pdfDownloadHolder"></div> 
    </div> 
    <div class="tocSpace"></div> 
   </div> 
   <div id="menu-nav" class="dropdown-container" lang="en-us" dir="ltr"> 
    <div class="dropdown dropdown-full mobilenavi"> 
     <select> </select> 
    </div> 
   </div> 
  </div> 
  <div id="openFeedbackContainer" class="openfeedback-container footer-layout"></div> 
  <div class="container footerContainer"> 
   <footer id="footer" ms.pgarea="footer" data-bi-name="footer" class="footer-layout"> 
    <div class="container" role="contentinfo"> 
     <a id="locale-selector-link" href="#" data-bi-name="select-locale" ms.cmpnm="select-locale"></a> 
     <ul class="links" ms.cmpgrp="footerlinks" data-bi-name="footerlinks"> 
      <li><a id="footer-about-link" href="https://docs.microsoft.com/teamblog" ms.cmpnm="bloglink" data-bi-name="bloglink">Blog</a></li> 
      <li><a id="footer-privacy-link" href="//privacy.microsoft.com/en-us/" ms.cmpnm="privacy" data-bi-name="privacy">Privacy &amp; Cookies</a></li> 
      <li><a id="footer-term-of-use" href="/en-us/legal/termsofuse" ms.cmpnm="termsofuse" data-bi-name="termsofuse">Terms of Use</a></li> 
      <li><a href="//aka.ms/sitefeedback" ms.cmpnm="feedback" data-bi-name="feedback">Feedback</a></li> 
      <li id="impressum-section" hidden><a id="impressum-link" href="#" ms.cmpnm="impressum" data-bi-name="impressum">Impressum</a></li> 
      <li><a href="https://www.microsoft.com/en-us/legal/intellectualproperty/Trademarks/EN-US.aspx" ms.cmpnm="trademarks" data-bi-name="trademarks">Trademarks</a></li> 
     </ul> 
    </div> 
   </footer> 
  </div> 
  <script src="/_themes/docs.theme/master/en-us/_themes/javascript/b11234fb1603062af431.conceptual.js"></script>  
 </body>
</html>