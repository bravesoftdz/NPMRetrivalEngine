<!doctype html>
<html>
 <head> 
  <title>Dean Edwards: A Base Class for JavaScript Inheritance</title> 
  <meta charset="utf-8"> 
  <meta name="author" content="Dean Edwards">
  <!-- Keeping code tidy! :) --> 
  <link rel="stylesheet" href="/offline/css/style.css" media="all"> 
  <link rel="icon" href="/favicon.ico" type="image/x-icon"> 
  <script src="/offline/js/my.js"></script> 
  <!--[if lt IE 9]><script>"abbr,article,footer,header,nav,section,time".replace(/\w+/g,function(t){document.createElement(t)})</script><![endif]--> 
  <link rel="alternate" type="application/rss+xml" title="RSS" href="http://feeds.feedburner.com/deanedwards/weblog"> 
  <link rel="pingback" href="http://dean.edwards.name/weblog/xmlrpc.php"> 
 </head> 
 <body id="weblog-single"> 
  <header> 
   <h1 class="home"><a href="/">dean.edwards.name</a>/<a href="/weblog/">weblog</a>/<a href="/weblog/2006/">2006</a>/<a href="/weblog/2006/03/">03</a>/base/</h1> 
   <nav> 
    <ul>
     <!--
-->
     <li><a href="/my/">my</a></li>
     <!--
-->
     <li><a href="/weblog/">weblog</a></li>
     <!--
-->
     <li><a href="/about/">about</a></li>
     <!--
-->
     <li class="last-child"><a href="/search/">search</a></li>
     <!--
-->
    </ul> 
   </nav> 
  </header> 
  <nav id="prev-next"> 
   <ul> 
    <li class="prev" title="Previous post"><span>Previous post: </span><a href="http://dean.edwards.name/weblog/2005/12/js-tip1/">JavaScript Tip #1: Speed Up Object Detection</a></li> 
    <li class="next" title="Next post"><span>Next post: </span><a href="http://dean.edwards.name/weblog/2006/03/faster/">Faster <abbr>DOM</abbr> Queries</a></li> 
   </ul> 
  </nav> 
  <article> 
   <header> 
    <h2>A Base Class for JavaScript Inheritance</h2> 
   </header> 
   <div class="section note"> 
    <p><strong>NB.</strong> I’ve amended the code samples below to reflect recent changes in this class.</p> 
   </div> 
   <p>I’m an <abbr title="Object Oriented">OO</abbr> programmer at heart and JavaScript supports prototype based inheritance. Unfortunatley this leads to verbose class definitions:</p> 
   <pre class="javascript">
function Animal(name) {};
Animal.prototype.eat = function() {};
Animal.prototype.say = function(message) {};
</pre> 
   <p>I want a nice base class for JavaScript <abbr>OO</abbr>:</p> 
   <ul> 
    <li>I want to easily create classes without the <code>MyClass.prototype</code> cruft</li> 
    <li>I want method overriding with intuitive access to the overridden method (like Java’s <code>super</code>)</li> 
    <li>I want to avoid calling a class’ constructor function during the prototyping phase</li> 
    <li>I want to easily add static (class) properties and methods</li> 
    <li>I want to achieve the above without resorting to <a href="http://www.sitepoint.com/blogs/2006/01/17/javascript-inheritance/">global functions</a> to build prototype chains</li> 
    <li>I want to achieve the above without <a href="http://erik.eae.net/archives/2005/06/06/22.13.54/">affecting <code>Object.prototype</code></a></li> 
   </ul> 
   <h4>The Base Class</h4> 
   <p>I’ve created a JavaScript class (<a href="http://dean.edwards.name/base/Base.js">Base.js</a>) that I hope eases the pain of JavaScript <abbr>OO</abbr>. It’s a simple class and extends the <code>Object</code> object by adding two instance methods and one class method.</p> 
   <p>The <code>Base</code> class defines two instance methods:</p> 
   <h5>extend</h5> 
   <p>Call this method to extend an object with another interface:</p> 
   <pre class="javascript">
var object = new Base;
object.extend({
	value: "some data",
	method: function() {
		alert("Hello World!");
	}
});
object.method();
// ==&gt; Hello World!
</pre> 
   <h5>base</h5> 
   <p>If a method has been overridden then the <code>base</code> method provides access to the overridden method:</p> 
   <pre class="javascript">
var object = new Base;
object.method = function() {
	alert("Hello World!");
};
object.extend({
	method: function() {
		// call the "super" method
		this.base();
		// add some code
		alert("Hello again!");
	}
});
object.method();
// ==&gt; Hello World!
// ==&gt; Hello again!
</pre> 
   <p>You can also call the <code>base</code> method from within a constructor function.</p> 
   <h4>Creating Classes</h4> 
   <p>Classes are created by calling the <code>extend</code> method on the <code>Base</code> class:</p> 
   <pre class="javascript">
var Animal = Base.extend({
	constructor: function(name) {
		this.name = name;
	},
	
	name: "",
	
	eat: function() {
		this.say("Yum!");
	},
	
	say: function(message) {
		alert(this.name + ": " + message);
	}
});
</pre> 
   <p>All classes created in this manner will inherit the <code>extend</code> method so we can easily subclass the <code>Animal</code> class:</p> 
   <pre class="javascript">
var Cat = Animal.extend({
	eat: function(food) {
		if (food instanceof Mouse) this.base();
		else this.say("Yuk! I only eat mice.");
	}
});
	
var Mouse = Animal.extend();
</pre> 
   <h4>Class Properties and Methods</h4> 
   <p>A second parameter passed to the <code>extend</code> method of a class defines the class interface:</p> 
   <pre class="javascript">
var Circle = Shape.extend({ // instance interface
	constructor: function(x, y, radius) {
		this.base(x, y);
		this.radius = radius;
	},
	
	radius: 0,
	
	getCircumference: function() {
		return 2 * Circle.PI * this.radius;
	}
}, { // class interface
	PI: 3.14
});
</pre> 
   <p>Note the use of the <code>base</code> method in the constructor. This ensures that the <code>Shape</code> constructor is also called. Some other things to note:</p> 
   <ul> 
    <li>If you define a class method (<em>not</em> an instance method) called <code>init</code> it will be automatically called when the class is created</li> 
    <li>Constructor functions are never called during the prototyping phase (subclassing)</li> 
   </ul> 
   <h4>Classes With Private Data</h4> 
   <p>Some developers prefer to create classes where methods access private data:</p> 
   <pre class="javascript">
function Circle(radius) {
	this.getCircumference = function() {
		return 2 * Math.PI * radius;
	};
};
</pre> 
   <p>You can achieve the same result using the Base class:</p> 
   <pre class="javascript">
var Circle = Shape.extend({
	constructor: function(radius) {
		this.extend({
			getCircumference: function() {
				return 2 * Math.PI * radius;
			}
		});
	}
});
</pre> 
   <p>The code is slightly more verbose in this case but you get access to the <code>base</code> method which I find incredibly useful.</p> 
   <h4>Single Instances</h4> 
   <p>I changed my mind a lot about this but finally decided to allow the creation of single instance classes by defining a <code>null</code> constructor:</p> 
   <pre class="javascript">
var Math = Base.extend({
	constructor: null,
	PI: 3.14,
	sqr: function(number) {
		return number * number;
	}
});
</pre> 
   <h4>Conclusion</h4> 
   <p>This supersedes my <a href="http://dean.edwards.name/common/">old <abbr>OO</abbr> framework</a> which was not as cross-browser as I would have liked (and had other shortcomings).</p> 
   <p>I have a <a href="http://code.google.com/p/base2/">development area</a> where I’m developing bits and pieces based on this engine. <del datetime="20080226">Most of this is work in progress but illustrates the flexibility of this technique.</del></p> 
   <p>You can grab the <code>Base</code> class here: <a href="http://dean.edwards.name/base/Base.js">Base.js</a>.</p> 
   <div class="section note"> 
    <p><strong>Update.</strong> I’ve posted a <a href="/weblog/2006/05/prototype-and-base/">follow-up</a> to this post with some improvements suggested in the comments below.</p> 
   </div> 
   <footer> 
    <ul class="meta"> 
     <li>Posted: <time datetime="2006-03-23T21:52:43+00:00">2006/03/23 9:52 pm</time></li> 
     <li>Filed under: Uncategorised</li> 
     <li>Links: <a href="/weblog/2006/03/base/" title="Permanent link to this post">permalink</a></li> 
    </ul> 
   </footer> 
  </article> 
  <section id="comments"> 
   <h3>Comments (225)</h3> 
   <p><a href="#postcomment">Leave a comment</a></p> 
   <article id="comment3118"> 
    <p class="permalink"> <a href="#comment3118" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>1</a> </p> 
    <p>In the Circle examples you have declared a method “area” which is “perimeter” instead<img src="http://dean.edwards.name/weblog/wp-includes/images/smilies/icon_wink.gif" alt=";-)" class="wp-smiley" style="height: 1em; max-height: 1em;"> Area is Math.PI *this.radius ^ 2</p> 
    <p>Anyway it’s really a simple and effective system to simplify class declaration and inheritance. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Franco Ponticelli</cite></li> 
      <li>Posted: <time datetime="2006-03-23T23:16:49+00:00">2006/03/23 11:16 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3119"> 
    <p class="permalink"> <a href="#comment3119" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>2</a> </p> 
    <p>The JS inheritance class that I use is from <a href="http://www.crockford.com/javascript/inheritance.html">Doug Crockford</a>. It’s a nice simple class inheritance base class that just modifies the main Function class. It supports calling parent methods and doing multiple inheritence (which thus far I have never found a need for)</p> 
    <p>The only change I had to make from his code to make it fully cross-browser (opera had some issues) was to change his declaration of ‘uber’ in the ‘inherits’ method to NOT specify “function uber(name)” but instead use “function (name)” (anonymous function). </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Edward Rudd</cite></li> 
      <li>Posted: <time datetime="2006-03-23T23:53:16+00:00">2006/03/23 11:53 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3120"> 
    <p class="permalink"> <a href="#comment3120" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>3</a> </p> 
    <p>@Franco – Oops! Fixed now. Thanks. Maths was never my strong point (actually it was but I’ve now forgotten everything<img src="http://dean.edwards.name/weblog/wp-includes/images/smilies/icon_smile.gif" alt=":-)" class="wp-smiley" style="height: 1em; max-height: 1em;">) </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-03-24T00:38:55+00:00">2006/03/24 12:38 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3122"> 
    <p class="permalink"> <a href="#comment3122" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>4</a> </p> 
    <p>What benefits do you think this has over the Object.extend() and Class.create() features of Prototype? </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://www.snook.ca/jonathan/" rel="external" class="url">Jonathan Snook</a></cite></li> 
      <li>Posted: <time datetime="2006-03-24T02:12:32+00:00">2006/03/24 2:12 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3126"> 
    <p class="permalink"> <a href="#comment3126" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>5</a> </p> 
    <p>not work in firefox </p> 
    <p>“prototype.call is not a function” </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>modi</cite></li> 
      <li>Posted: <time datetime="2006-03-24T06:12:29+00:00">2006/03/24 6:12 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3129"> 
    <p class="permalink"> <a href="#comment3129" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>6</a> </p> 
    <p>@modi – What doesn’t work? </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-03-24T07:03:28+00:00">2006/03/24 7:03 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3131"> 
    <p class="permalink"> <a href="#comment3131" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>7</a> </p> 
    <p>I got message “prototype.call is not a function” in Javascript Console when i try to Creating Class </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>modi</cite></li> 
      <li>Posted: <time datetime="2006-03-24T08:09:25+00:00">2006/03/24 8:09 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3135"> 
    <p class="permalink"> <a href="#comment3135" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>8</a> </p> 
    <p>@modi – you are going to have to show me some code. I’ve created dozens of classes in Firefox and have not seen the error you mention. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-03-24T15:41:46+00:00">2006/03/24 3:41 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3136"> 
    <p class="permalink"> <a href="#comment3136" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>9</a> </p> 
    <p>I was also about to ask the same thing as Jonathan… </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Mislav</cite></li> 
      <li>Posted: <time datetime="2006-03-24T18:30:38+00:00">2006/03/24 6:30 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3137"> 
    <p class="permalink"> <a href="#comment3137" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>10</a> </p> 
    <p>@Mislav/Jonathon,</p> 
    <p>There is nothing wrong with Prototype’s method. I prefer mine for the following reasons:</p> 
    <ol> 
     <li>the <code>inherit</code> method</li> 
     <li>readability</li> 
    </ol> 
    <p>It’s like comparing <code>x=x+1</code> with <code>x++</code>. A slight improvement but an improvement nonetheless.</p> 
    <p>Read this for a better explanation: <a href="http://www.sitepoint.com/blogs/2006/01/17/javascript-inheritance/">http://www.sitepoint.com/blogs/2006/01/17/javascript-inheritance/</a>.</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-03-24T19:11:05+00:00">2006/03/24 7:11 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3138"> 
    <p class="permalink"> <a href="#comment3138" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>11</a> </p> 
    <p>As for readability, I see hardly a difference. As for the inherit method, this is really a blank spot in prototype.js</p> 
    <p>Unless you apply the patch from <a href="http://dev.rubyonrails.org/ticket/4060">http://dev.rubyonrails.org/ticket/4060</a> </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Martin Bialasinski</cite></li> 
      <li>Posted: <time datetime="2006-03-24T19:36:19+00:00">2006/03/24 7:36 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3139"> 
    <p class="permalink"> <a href="#comment3139" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>12</a> </p> 
    <p>@Martin – This is not designed to compete with Prototype. If people are comfortable with that library then they should continue using it. I wrote this for my own needs and I thought I’d share it. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-03-24T19:58:01+00:00">2006/03/24 7:58 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3140"> 
    <p class="permalink"> <a href="#comment3140" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>13</a> </p> 
    <p>Dean, I think when you’re writing “overload”, you mean “override”.</p> 
    <p>Two method declarations of the same name but different parameter lists are said to be “overloaded”. This isn’t possible in JS (unless you count using the arguments object and inspecting the passed argument types).</p> 
    <p>A method reimplemented which was defined in a superclass is said to be “overridden”.</p> 
    <p>Right? </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Jeremy Dunck</cite></li> 
      <li>Posted: <time datetime="2006-03-24T20:19:45+00:00">2006/03/24 8:19 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3141"> 
    <p class="permalink"> <a href="#comment3141" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>14</a> </p> 
    <p>Ah, that really makes a difference. I particulary like Ben’s patch; thanks for the link, Martin.</p> 
    <p>Dean: about singletons… The example provided isn’t exactly a singleton pattern, just a class that cannot be instantiated with some class constants and methods. I would call that a static class (or something like that), not a singleton.</p> 
    <p>And why did you choose to call the method <code>inherit</code>? Wouldn’t <code>sup</code> or <code>super</code> or <code>parent</code> be a better name?</p> 
    <p>Apart from that I like the work you’ve done very much, especially the clear examples. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Mislav</cite></li> 
      <li>Posted: <time datetime="2006-03-24T20:36:40+00:00">2006/03/24 8:36 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3142"> 
    <p class="permalink"> <a href="#comment3142" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>15</a> </p> 
    <p>Dean, I never thought you want to compete with prototype.js, and I am certainly not a “XY already has this, no need for this” fan-boy. Sorry if this is what it looked like.</p> 
    <p>More choices are good, and one can always learn from other code, especially if it is yours, and adapt ideas. So thank you for sharing some of your work once again. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Martin Bialasinski</cite></li> 
      <li>Posted: <time datetime="2006-03-24T21:09:38+00:00">2006/03/24 9:09 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3144" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>16</p> 
    <p>[…] art man, and wasn’t happy with any Base classes out there in various libraries so he wrote his own Base.js. His goals: I want to easily create classes without the MyClass.prototype […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://ajaxian.com/archives/dean-edwards-and-another-basejs" rel="external" class="url">Ajaxian » Dean Edwards and Another Base.js</a></cite></li> 
      <li>Posted: <time datetime="2006-03-25T02:00:03+00:00">2006/03/25 2:00 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3145"> 
    <p class="permalink"> <a href="#comment3145" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>17</a> </p> 
    <pre class="javascript">
var Animal = Base.extend({
	constructor: function(name) {
		this.name = name;
	},

	say: function(message) {
		alert(this.name + ": " + message);
	}
});
</pre> 
    <p>Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-TW; rv:1.7.12) Gecko/20050919 Firefox/1.0.7 </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>modi</cite></li> 
      <li>Posted: <time datetime="2006-03-25T03:37:52+00:00">2006/03/25 3:37 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3146"> 
    <p class="permalink"> <a href="#comment3146" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>18</a> </p> 
    <p>Nice work.</p> 
    <p>In the private data example, did you mean to use just ‘radius’ in the formula instead of ‘this.radius’, as in…</p> 
    <pre class="javascript">
var Circle = Shape.extend({
	constructor: function(radius) {
		this.extend({
			getCircumference: function() {
				return Math.PI * radius * radius;
			}
		});
	}
});
</pre> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://www.trimpath.com" rel="external" class="url">Steve Yen</a></cite></li> 
      <li>Posted: <time datetime="2006-03-25T05:00:02+00:00">2006/03/25 5:00 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3147"> 
    <p class="permalink"> <a href="#comment3147" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>19</a> </p> 
    <p>@modi – Fixed now. Thanks for letting me know. I had to rename a variable from <code>prototype</code> to <code>_prototype</code> in a couple of functions. Presumably this is a bug that has been fixed in later versions of Firefox. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-03-25T06:57:27+00:00">2006/03/25 6:57 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3148"> 
    <p class="permalink"> <a href="#comment3148" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>20</a> </p> 
    <p>@Jeremy/Mislav – I’ve changed the text of the post. I now use the expressions “override” and “single instance”. Thanks for correcting my poor use of computing terminology.<img src="http://dean.edwards.name/weblog/wp-includes/images/smilies/icon_wink.gif" alt=";-)" class="wp-smiley" style="height: 1em; max-height: 1em;"></p> 
    <p>@Steve – Fixed now. Thank you.</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-03-25T07:05:21+00:00">2006/03/25 7:05 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3149"> 
    <p class="permalink"> <a href="#comment3149" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>21</a> </p> 
    <p>Just a detail… I think inherit should be called something different. (It’s a semantic thing only, nothing wrong with the code in itself)</p> 
    <p>When you call <code>baseclass.extend</code> it is correctly a verb and your action is that expressed by the verb: extending your base class. But if I understood this correctly, when you call <code>this.inherit</code> you’re not really <em>inheriting</em> something, but actually calling the inherited method. The difference is subtle, I know, but it somehow doesn’t seem completely right.</p> 
    <p>I might suggest <code>inherited</code> instead, if you want to keep the inherit root, or something along the lines of what Mislav suggested above. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Gonzalo</cite></li> 
      <li>Posted: <time datetime="2006-03-25T09:56:36+00:00">2006/03/25 9:56 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3150"> 
    <p class="permalink"> <a href="#comment3150" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>22</a> </p> 
    <p>What do others think of the name <code>inherit</code>? Any other ideas? <code>ancestor</code>? I don’t like the other suggestions much (<code>inherited</code>, <code>parent</code>, <code>sup</code>) and <code>super</code> is already a reserved word. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-03-25T13:15:38+00:00">2006/03/25 1:15 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3151"> 
    <p class="permalink"> <a href="#comment3151" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>23</a> </p> 
    <p>I have a couple of questions:</p> 
    <p>Whats the use of “…If you define a class method (not an instance method!) called init then will it …”, I thought thats what the constructor method was for.</p> 
    <p>Also this may be a newb question but when you stated that the ‘… second parameter passed to the extend method of a class defines the class interface’ in your example does is the PI property set the to Shape class?</p> 
    <p>– Thank you for all your contributions<img src="http://dean.edwards.name/weblog/wp-includes/images/smilies/icon_cool.gif" alt="8)" class="wp-smiley" style="height: 1em; max-height: 1em;"> </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>John</cite></li> 
      <li>Posted: <time datetime="2006-03-25T17:44:42+00:00">2006/03/25 5:44 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3152"> 
    <p class="permalink"> <a href="#comment3152" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>24</a> </p> 
    <p>BTW – I like ‘ancestor’ it gives me a better since of what its doing </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>John</cite></li> 
      <li>Posted: <time datetime="2006-03-25T17:45:41+00:00">2006/03/25 5:45 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3153"> 
    <p class="permalink"> <a href="#comment3153" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>25</a> </p> 
    <p><a href="http://www.crockford.com/javascript/inheritance.html" title="Classical Inheritance in JavaScript">Douglas Crockford</a> proposed a long time ago the word <code>uber</code>. I’m not really sure I like it, but there it is anyway.</p> 
    <p>I do like <code>ancestor</code>. <code>parent</code> is ok too. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Gonzalo</cite></li> 
      <li>Posted: <time datetime="2006-03-25T18:09:02+00:00">2006/03/25 6:09 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3154"> 
    <p class="permalink"> <a href="#comment3154" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>26</a> </p> 
    <p>@John – You can pass two parameters to <code><i>class</i>.extend</code>. These parameters should be object literals. The first parameter defines the instance interface of the class. The second defines the class interface itself. You can perform class initialisation (rare but sometimes needed) by defining an <code>init</code> method on the class interface. This method will be called immediately the class is created. This is very different to the constructor function.</p> 
    <p>Below is a more detailed example. Class initialisation is required here because we need to close all open files when the document is unloaded. So we define an <code>init</code> method which adds an event handler:</p> 
    <pre class="javascript">
var File = Base.extend({ // instance interface
	constructor: function(name, mode) {
		this.name = name;
		this.$guid = System.register(this);
		if (mode) this.open(mode);
	},

	$guid: 0,
	mode: 0,
	name: "",

	close: function() {
		delete File.opened[this.$guid];
		this.mode = 0;
	},

	open: function(mode) {
		this.mode = mode || File.READ;
		File.opened[this.$guid] = this;
	},

	read: function() {
	},

	write: function() {
	}
}, { // class interface
	CLOSED: 0,
	READ: 1,
	WRITE: 2,

	opened: {},

	closeAll: function() {
		var files = this.opened;
		for (var i in files) files[i].close();
	},

	init: function() {
		// class initialisation
		Event.add(window, "unload", this.closeAll, this);
	}
});
</pre> 
    <p>Does that makes sense? If you are not sure then ignore class initialisation.<img src="http://dean.edwards.name/weblog/wp-includes/images/smilies/icon_wink.gif" alt=";-)" class="wp-smiley" style="height: 1em; max-height: 1em;">Like I said, it is rarely need.</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-03-25T18:18:57+00:00">2006/03/25 6:18 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3155"> 
    <p class="permalink"> <a href="#comment3155" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>27</a> </p> 
    <p>As for the name: inherited() looks like a test that returns a bool. Aside: I like that ruby allows questionmarks in names, like “SomeObject.inherited?”</p> 
    <p>“parent()” is nice, but might be too often used already in objects (to express the relationship between two objects like in the DOM).</p> 
    <p>Nice example in #26. Shows of the lib quite well. The class / instance interface distinction is very neat. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Martin Bialasinski</cite></li> 
      <li>Posted: <time datetime="2006-03-25T18:45:17+00:00">2006/03/25 6:45 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3156"> 
    <p class="permalink"> <a href="#comment3156" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>28</a> </p> 
    <p>So the init is similer to the</p> 
    <p>var foo = Class.create(); Object.extend(foo,{</p> 
    <p> initialize: function(){ … } });</p> 
    <p>of Prototype? </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>John</cite></li> 
      <li>Posted: <time datetime="2006-03-25T18:47:04+00:00">2006/03/25 6:47 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3157"> 
    <p class="permalink"> <a href="#comment3157" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>29</a> </p> 
    <p><code> foo = Base.extend({<br> constructor: function(){<br> this.bar = 3;<br> },<br> bar = 3 },</code></p> 
    <p><code> {<br> init: function(){<br> this.bar = 3;<br> },<br> bar = 3<br> });<br></code></p> 
    <p>In this example I have set bar in alot of places. In both the instance and class interface. Also in the construcor and init methods. They all do the same thing right?</p> 
    <p>If I only did it in the constructor method would alert(foo.prototype.bar); // still show 3</p> 
    <p>So I guess I dont see the need for an instance interface and a class interface, don’t they both do the exact same thing? </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>John</cite></li> 
      <li>Posted: <time datetime="2006-03-25T19:16:02+00:00">2006/03/25 7:16 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3158"> 
    <p class="permalink"> <a href="#comment3158" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>30</a> </p> 
    <p>BTW thank you for taking your time to help and show examples<img src="http://dean.edwards.name/weblog/wp-includes/images/smilies/icon_cool.gif" alt="8)" class="wp-smiley" style="height: 1em; max-height: 1em;"> </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>John</cite></li> 
      <li>Posted: <time datetime="2006-03-25T19:18:03+00:00">2006/03/25 7:18 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3159"> 
    <p class="permalink"> <a href="#comment3159" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>31</a> </p> 
    <p>@John – You’ve missed the point slightly. Have another look at the example I posted.</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-03-25T19:39:21+00:00">2006/03/25 7:39 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3163"> 
    <p class="permalink"> <a href="#comment3163" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>32</a> </p> 
    <p>More suggestions instead of “inherited”:</p> 
    <ul> 
     <li>base</li> 
     <li>over</li> 
     <li>proto</li> 
    </ul> 
    <p>And all those suggesions prepended w/ “call”, so “callBase”.</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Jeremy Dunck</cite></li> 
      <li>Posted: <time datetime="2006-03-26T03:52:39+00:00">2006/03/26 3:52 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3164"> 
    <p class="permalink"> <a href="#comment3164" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>33</a> </p> 
    <p>Err, any chance of this being made MIT, BSD, AFL, or similar? LGPL? Really? </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Jeremy Dunck</cite></li> 
      <li>Posted: <time datetime="2006-03-26T04:55:16+00:00">2006/03/26 4:55 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3165"> 
    <p class="permalink"> <a href="#comment3165" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>34</a> </p> 
    <p>Hey, since this is a “refactored” version of common are we going to see an IDE? That was a fun project I thought (more so since I’ve started playing with smalltalk)</p> 
    <p>Anyway, Base is nice. I do agree with the folks that think the “inherit” method seems oddly named. I say forget all that tired language of “super”, “parent” or “inherit” and go with something new. I like “basis” as it goes well with the name Base. Mmm… “basis” </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>mitchell</cite></li> 
      <li>Posted: <time datetime="2006-03-26T07:35:39+00:00">2006/03/26 7:35 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3166"> 
    <p class="permalink"> <a href="#comment3166" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>35</a> </p> 
    <p>So I just answered my own question about the IDE. I looked through your development area, and was stoked to see all that. Nice work! How long have you been at this? This has way more written on top of it then common ever did. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>mitchell</cite></li> 
      <li>Posted: <time datetime="2006-03-26T07:49:05+00:00">2006/03/26 7:49 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3168"> 
    <p class="permalink"> <a href="#comment3168" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>36</a> </p> 
    <p>@Jeremy – I’ll look at changing the license for this.</p> 
    <p>@Mitchell – Yes, <a href="/common/">common</a> was fun and I managed to write at least one <a href="http://sourceforge.net/projects/wf2/">complex application</a> using it. Base is more cross-browser. The <abbr title="Integrated Development Environment">IDE</abbr> is unfinished. The <abbr>IDE</abbr> is useful for browsing object hierarchies but less useful for actually writing code. Until someone writes a decent text editor that is…</p> 
    <p>And you are right. The <abbr>IDE</abbr> is based on Smalltalk.<img src="http://dean.edwards.name/weblog/wp-includes/images/smilies/icon_wink.gif" alt=";-)" class="wp-smiley" style="height: 1em; max-height: 1em;"></p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-03-26T18:20:41+00:00">2006/03/26 6:20 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3169"> 
    <p class="permalink"> <a href="#comment3169" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>37</a> </p> 
    <p>Very nice. Not sure if I will use it since I’ve already written so much of my code using prototype but this is the cleanist implementation of class based OO I’ve yet seen.</p> 
    <p>I was a bit unclear about the point of the _static argument (i.e. second argument in Base.extend( , ) ). It seems to add methods just to the class but not to any instance variables but it also doesn’t seem to be inherited. Is this the intended behavior or am I just missing something in the code? I guess I’m just a bit confused as to what sort of OO model you have in mind with the static stuff.</p> 
    <p>One thought for future improvement. It seems possible that if you use object.extend inside an event handler or more likely the return from an XHR the global flag Base._prototyping could cause some problems. It seems possible to instead avoid the problem of calling the initializer when you new this by instead copying this to a temp variable renaming the constructoring calling new and then returning the constructor. However, maybe I am missing something. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://computationaltruth.net/rants/" rel="external" class="url">logicnazi</a></cite></li> 
      <li>Posted: <time datetime="2006-03-26T20:21:06+00:00">2006/03/26 8:21 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3170"> 
    <p class="permalink"> <a href="#comment3170" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>38</a> </p> 
    <p>@logicnazi – It is my intention that static methods and properties are not inherited. I’ve provided this mechanism mainly for the provision of class constants. Look at JavaScript’s <code>Number</code> class as an example of what I mean:</p> 
    <p><a href="http://phrogz.net/ObjJob/object.asp?id=172">http://phrogz.net/ObjJob/object.asp?id=172</a></p> 
    <p>As to your other point. The <code>Base._prototyping</code> flag is only set when creating a class. It is not set when using <code><i>object</i>.extend</code>.</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-03-26T20:43:58+00:00">2006/03/26 8:43 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3171"> 
    <p class="permalink"> <a href="#comment3171" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>39</a> </p> 
    <p>Hmm… feels a lot like the Dojo toolkit’s ‘dojo.lang.extend’, except they’re missing a lot of the extended functionality you’re providing.</p> 
    <p>Might be worth a look, though, as you seem to be on the same track: <a href="http://manual.dojotoolkit.org/lang.html">http://manual.dojotoolkit.org/lang.html</a> </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>James Bennett</cite></li> 
      <li>Posted: <time datetime="2006-03-27T15:42:59+00:00">2006/03/27 3:42 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3172"> 
    <p class="permalink"> <a href="#comment3172" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>40</a> </p> 
    <p>Ohh right I see about the _prototyping flag. I retract my point. It would be kinda wastefull to add all that code for the crazy situation where people are defining new classes in event handlers. </p> 
    <p>Okay, now I understand what you meant by static. I was just a bit confused by the terminology.</p> 
    <p>Thanks alot for your response not to mention the library. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://computationaltruth.net/rants/" rel="external" class="url">logicnazi</a></cite></li> 
      <li>Posted: <time datetime="2006-03-27T18:40:48+00:00">2006/03/27 6:40 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3187"> 
    <p class="permalink"> <a href="#comment3187" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>41</a> </p> 
    <p>If I try to pass a function in a class, I lose the properties of that class. Any idea why?</p> 
    <pre class="javascript">var obj = new Base;
obj.extend({
	val    : 5,
	method : function(){ alert(this.val); }
});

var myMethod = obj.method;

obj.method(); // 5
myMethod();   // undefined</pre> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Mark Kahn</cite></li> 
      <li>Posted: <time datetime="2006-03-28T18:46:44+00:00">2006/03/28 6:46 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3188"> 
    <p class="permalink"> <a href="#comment3188" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>42</a> </p> 
    <p>Mark – this is what should happen. When you call <code>myMethod</code>, the <code>this</code> value is pointing to the global (<code>window</code>) object. Because there is no <code>window.val</code> defined the function returns <code>undefined</code>.</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-03-28T19:00:06+00:00">2006/03/28 7:00 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3192"> 
    <p class="permalink"> <a href="#comment3192" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>43</a> </p> 
    <p>@Mark: </p> 
    <p> Javascript “methods” are just functions hanging off an object– the “this” keyword isn’t bound to the object if you don’t scope it with the “.” operator.</p> 
    <p> Check out Boodman’s “hitch” function (which he called “close” in that post) — it makes the function do what you want</p> 
    <pre>
function hitch(obj, methodName) {
  return function() { 
    obj[methodName].apply(obj, arguments);
}
</pre> 
    <p>(from <a href="http://youngpup.net//2005/0525024806/comments#c1444">http://youngpup.net//2005/0525024806/comments#c1444</a> )</p> 
    <p> You’d change this line:</p> 
    <p>var myMethod = obj.method;</p> 
    <p>to this:</p> 
    <p> var myMethod = hitch(obj,’method’); </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Jeremy Dunck</cite></li> 
      <li>Posted: <time datetime="2006-03-28T22:21:01+00:00">2006/03/28 10:21 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3193"> 
    <p class="permalink"> <a href="#comment3193" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>44</a> </p> 
    <p>Hello.</p> 
    <p>Great tool Dean, I like it and I will start using it. Thanks.</p> 
    <p>Just two comments:</p> 
    <ul> 
     <li>If inherit is going to be renamed, I vote for “super” (Java), or just “base” (C#) because it is the same name of the framework.</li> 
     <li> 2) Are you going to rewrite IE7 and the rest of your scripts so as to use Base?</li> 
    </ul> 
    <p>Thanks for your attention. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://knocte.blogspot.com/" rel="external" class="url">knocte</a></cite></li> 
      <li>Posted: <time datetime="2006-03-29T00:45:44+00:00">2006/03/29 12:45 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3202"> 
    <p class="permalink"> <a href="#comment3202" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>45</a> </p> 
    <p>I have already converted <a href="/IE7/">IE7</a>, <a href="/packer/">packer</a> and my <a href="/my/behaviors/#star-light">syntax highlighter</a> to Base. I haven’t released any of this code yet. Some of the classes are here:</p> 
    <p><a href="http://dean.edwards.name/base/text/src/">http://dean.edwards.name/base/text/src/</a> </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-03-29T18:11:27+00:00">2006/03/29 6:11 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3243"> 
    <p class="permalink"> <a href="#comment3243" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>46</a> </p> 
    <p>Dean, I saw that you mentioned that you didn’t want to mess with the Object.prototype. Have you considered muffing with the Function.prototype instead? Like…something like this:</p> 
    <pre class="javascript">Function.prototype.method = 
	function (name, func) { 
		this.prototype[name] = func; 
		return this; 
	};</pre> 
    <p>This typically shows up in Crockford’s toolkit and I’ve found it to be pretty nice. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://www.dustindiaz.com" rel="external" class="url">Dustin Diaz</a></cite></li> 
      <li>Posted: <time datetime="2006-04-08T01:13:23+00:00">2006/04/08 1:13 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3244" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>47</p> 
    <p>[…] ebdesign imagereplacement) gotAPI.com :: API lookup service (tags: reference html css) A Base Class for JavaScript Inheritance (tags: javascript oop) […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://www.barelyfitz.com/blog/archives/2006/04/07/312/" rel="external" class="url">BarelyBlogging » Blog Archive » links for 2006-04-08</a></cite></li> 
      <li>Posted: <time datetime="2006-04-08T01:33:53+00:00">2006/04/08 1:33 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3263"> 
    <p class="permalink"> <a href="#comment3263" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>48</a> </p> 
    <p>@Dustin – Yeah, this was the way I wrote it <a href="/my/extend.js">originally</a>. But adding an override capability meant that I had to add the <code>inherit</code> mechanism too. It felt too much like I was extending the language rather than just adding a new class. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-04-11T18:56:02+00:00">2006/04/11 6:56 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3264"> 
    <p class="permalink"> <a href="#comment3264" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>49</a> </p> 
    <p>Dean, how would you use your library for implementing a class that contains both static and non-static members and properties in a class? </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Ympostor</cite></li> 
      <li>Posted: <time datetime="2006-04-12T08:09:14+00:00">2006/04/12 8:09 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3299"> 
    <p class="permalink"> <a href="#comment3299" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>50</a> </p> 
    <p>@Ympostor – An example of a class with both a class and instance interface is shown in <a href="#comment3154">Comment #26</a>. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-04-19T18:37:46+00:00">2006/04/19 6:37 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3300"> 
    <p class="permalink"> <a href="#comment3300" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>51</a> </p> 
    <p>neat! the inherit() method is really useful but has been missing badly in other libs i have come across. don’t really like the name though. i vote for base() or super(). </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>oak</cite></li> 
      <li>Posted: <time datetime="2006-04-19T19:02:55+00:00">2006/04/19 7:02 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3301"> 
    <p class="permalink"> <a href="#comment3301" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>52</a> </p> 
    <p>Nobody likes <code>inherit</code> except me :-(.</p> 
    <p><code>super</code> is already a reserved word. These are the alternatives that I like:</p> 
    <ul> 
     <li>$uper</li> 
     <li>base</li> 
     <li>ancestor</li> 
    </ul> 
    <p>I’m still undecided…</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-04-19T19:08:15+00:00">2006/04/19 7:08 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3304"> 
    <p class="permalink"> <a href="#comment3304" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>53</a> </p> 
    <p>What about polymorphism?</p> 
    <p>I implemented a fully supported but complicated Object Oriented JavaScript library: <a href="http://j2s.sourceforge.net/j2sclazz/">http://j2s.sourceforge.net/j2sclazz/</a> And the article: <a href="http://j2s.sourceforge.net/articles/oop-in-js-by-j2s.html">http://j2s.sourceforge.net/articles/oop-in-js-by-j2s.html</a></p> 
    <p>It seems it also fits all of your requirements of OO. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://j2s.sourceforge.net/blog/" rel="external" class="url">Josson Smith</a></cite></li> 
      <li>Posted: <time datetime="2006-04-21T07:50:00+00:00">2006/04/21 7:50 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3306"> 
    <p class="permalink"> <a href="#comment3306" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>54</a> </p> 
    <blockquote>
     <p>What about polymorphism?</p>
    </blockquote> 
    <p>Polymorphism is provided by inheritance. Quoting from your own document:</p> 
    <blockquote>
     <p>Methods can be overridden and polymorphism is supported</p>
    </blockquote> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-04-21T10:30:04+00:00">2006/04/21 10:30 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3307"> 
    <p class="permalink"> <a href="#comment3307" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>55</a> </p> 
    <p>The polymorphism that I mean is methods with same name but different arguments, for example, aObj.action1(), aObj.action1(bObj). It seems that such polymorphism should be provided in a simple way.</p> 
    <p>And for the previous comment, I prefer to the keyword “$uper”. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://j2s.sourceforge.net/blog/" rel="external" class="url">Josson Smith</a></cite></li> 
      <li>Posted: <time datetime="2006-04-21T13:36:56+00:00">2006/04/21 1:36 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3318"> 
    <p class="permalink"> <a href="#comment3318" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>56</a> </p> 
    <p>$uper??? don’t get me wrong, but that’s an awful proposition </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Ympostor</cite></li> 
      <li>Posted: <time datetime="2006-04-22T14:18:13+00:00">2006/04/22 2:18 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3319" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>57</p> 
    <p>[…] es info How to boot Knoppix 4.0 from a USB Flash Drive DutchPIPE software A Base Class for JavaScript Inheritance Faster DOM Queries This entry was posted […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://cthorn.com/?p=104" rel="external" class="url">cthorn.com » Blog Archive » Links :: 04-22-2006</a></cite></li> 
      <li>Posted: <time datetime="2006-04-23T03:47:10+00:00">2006/04/23 3:47 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3323"> 
    <p class="permalink"> <a href="#comment3323" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>58</a> </p> 
    <p>Think about a more complex case:</p> 
    <pre class="javascript">
var trace = function (str) {
    document.write(str + '&lt;br /&gt;');
}

var C1 = Base.extend({
    constructor: function () {
        trace('C1.constructor call.');
    },
    m: function () {
        trace('C1.m call.');
    }
});

var C2 = C1.extend({});

var C3 = C2.extend({
    constructor: function (name) {
        this.inherit();
        trace('C3.constructor call.');
    },
    m: function () {
        this.inherit();
        trace('C3.m call.');
    }
});

var o = new C3; 
o.m();
</pre> 
    <p>The output is:</p> 
    <p><code> C3.constructor call.<br> C1.m call.<br> C3.m call.<br> </code></p> 
    <p>But I think the output should be:</p> 
    <p><code> C1.constructor call.<br> C3.constructor call.<br> C1.m call.<br> C3.m call.<br> </code> </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://www.ajaxwing.com/" rel="external" class="url">Report Bug: this.inherit can not work correctly in constructor</a></cite></li> 
      <li>Posted: <time datetime="2006-04-24T09:54:50+00:00">2006/04/24 9:54 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3324"> 
    <p class="permalink"> <a href="#comment3324" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>59</a> </p> 
    <p>Here is the <a href="http://www.ajaxwing.com/examples/test_base_js.html">test page</a> of the code above. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://modello.sourceforge.net/" rel="external" class="url">kenxu</a></cite></li> 
      <li>Posted: <time datetime="2006-04-24T10:12:20+00:00">2006/04/24 10:12 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3325"> 
    <p class="permalink"> <a href="#comment3325" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>60</a> </p> 
    <p>@kenxu: This is not a bug. C2 is an empty constructor. When you call <code>this.inherit</code> from C3 you are calling C2 which does nothing. The output is as expected. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-04-24T10:52:53+00:00">2006/04/24 10:52 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3326"> 
    <p class="permalink"> <a href="#comment3326" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>61</a> </p> 
    <p>@kenxu: On second thoughts, I prefer your output. I will amend the Base class so that it no longer creates an empty constructor if none is supplied. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-04-24T11:43:25+00:00">2006/04/24 11:43 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3338"> 
    <p class="permalink"> <a href="#comment3338" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>62</a> </p> 
    <p>another name proposal for the inherit method</p> 
    <p>callParent();</p> 
    <p>Bye, Markus </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Markus</cite></li> 
      <li>Posted: <time datetime="2006-04-25T20:30:21+00:00">2006/04/25 8:30 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3344"> 
    <p class="permalink"> <a href="#comment3344" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>63</a> </p> 
    <p>Hello Dean, thanks for your class, it’s been a nice help already. I’ve just stumbled upon an oddity:</p> 
    <pre class="javascript">
var Test = Base.extend({
	test: [],
	name: '',

	constructor: function(name) {
		this.name = name;
	} ,

	add: function(item) {
		this.test[this.test.length] = item;
	},

	print: function() {
		alert(this.name + " contains " + this.test);
	}
});

var t1 = new Test('test 1');
var t2 = new Test('test 2');

t1.add('one');
t1.add('two');

t2.add('three');
t2.print();
</pre> 
    <p>This alerts “test2 contains one, two, three”. So the “test” property is static over all instances of the class, even though I’m adressing it with “this”. If I initialize test in the constructor (with this.test = []), it does behave like an instance variable. Wouldn’t it be better if this were default behaviour? You could have static variables accessible through Test.test in stead of this.test (as in Java)</p> 
    <p>Just a thought<img src="http://dean.edwards.name/weblog/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;"> </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Alex</cite></li> 
      <li>Posted: <time datetime="2006-04-26T18:33:34+00:00">2006/04/26 6:33 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment3345"> 
    <p class="permalink"> <a href="#comment3345" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>64</a> </p> 
    <p>@Alex – there is already a mechanism for providing static variables. The example you supply does not look like an oddity to me. Object properties should be initialised in the constructor function. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-04-26T18:45:47+00:00">2006/04/26 6:45 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment4013"> 
    <p class="permalink"> <a href="#comment4013" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>65</a> </p> 
    <p>Good stuff.</p> 
    <p>How about <strong>supr</strong> instead of <strong>inherit</strong>, like <a href="http://jsolait.net/">jsolait</a>?</p> 
    <p>Coupla questions. Does Base support multiple inheritance? And is the constructor definition needed? In the Mouse case for example can’t the sleekit wee beastie simply inherit the Animal constructor?</p> 
    <p>The <a href="http://dean.edwards.name/base/core/src/Package.js">Package</a> class looks interesting as well. Have you written about it anywhere? If not, care to spare a few words? </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>chocolateboy</cite></li> 
      <li>Posted: <time datetime="2006-05-19T19:43:02+00:00">2006/05/19 7:43 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment4038"> 
    <p class="permalink"> <a href="#comment4038" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>66</a> </p> 
    <p>@chocolateboy – I got rid of the need of the need to specify a constructor. From now on constructors are inherited as per <a href="#comment3323">comment #58</a></p> 
    <p>Yes, the Package class is interesting. I’m trying to avoid the verbosity of other JavaScript libraries. The Package class allows importing/exporting of namespaces to keep the JavaScript namespace clean. I’ll blog about it later when I’m totally happy with it.</p> 
    <p>BTW, I’m renaming “inherit” to “base”. I got persuaded by the crowd.<img src="http://dean.edwards.name/weblog/wp-includes/images/smilies/icon_wink.gif" alt=";-)" class="wp-smiley" style="height: 1em; max-height: 1em;"> </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-05-20T01:22:54+00:00">2006/05/20 1:22 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment4041"> 
    <p class="permalink"> <a href="#comment4041" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>67</a> </p> 
    <p>@chocolateboy – Multiple inheritance? Yes.</p> 
    <p>I don’t trust multiple inheritance but the <code>Base</code> class supports it through the <code>extend</code> method:</p> 
    <pre class="javascript">
FlyingFish = Fish.extend();
FlyingFish.prototype.extend(Bird.prototype);
</pre> 
    <p>I’m thinking of writing another function to make this easier. <code>implement</code>?</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-05-20T02:22:37+00:00">2006/05/20 2:22 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment4109"> 
    <p class="permalink"> <a href="#comment4109" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>68</a> </p> 
    <pre class="javascript">
FlyingFish = Fish.extend();
FlyingFish.implement(Bird);
</pre> 
    <p>That seems good.<img src="http://dean.edwards.name/weblog/wp-includes/images/smilies/icon_smile.gif" alt=":-)" class="wp-smiley" style="height: 1em; max-height: 1em;"></p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-05-20T19:29:55+00:00">2006/05/20 7:29 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment4208"> 
    <p class="permalink"> <a href="#comment4208" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>69</a> </p> 
    <p>Nice<img src="http://dean.edwards.name/weblog/wp-includes/images/smilies/icon_smile.gif" alt=":-)" class="wp-smiley" style="height: 1em; max-height: 1em;"></p> 
    <p>I’ve been evaluating this and jsolait (and had a look at j2Script) as the basis for a largeish library. I’m gonna go with Base. Please blog about Package when you get a chance. I want to play with that as well<img src="http://dean.edwards.name/weblog/wp-includes/images/smilies/icon_smile.gif" alt=":-)" class="wp-smiley" style="height: 1em; max-height: 1em;"> </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>chocolateboy</cite></li> 
      <li>Posted: <time datetime="2006-05-21T14:13:36+00:00">2006/05/21 2:13 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment4211"> 
    <p class="permalink"> <a href="#comment4211" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>70</a> </p> 
    <p>I’m going to blog a bit more about Base in the near future. I’m just working out which classes should go in the core library.</p> 
    <p>The key features will be fast DOM queries, cross-browser event handling, a packaging system for clean namespaces (and readable code), a good collection class with powerful iteration methods and a binding mechanism for behavioral extensions. I’m going to try to squeeze that into a 15-20Kb file. </p> 
    <p>I’m also working on an object browser (like the Smalltalk IDE) and a mechanism for building documentation on the fly.</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-05-21T14:26:33+00:00">2006/05/21 2:26 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment4425" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>71</p> 
    <p>[…] (thanks to Justin Plamer). I’ve made a couple of tweaks to the class since I last blogged about it. The most important change is that I’ve renamed the inherit method to base. […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://dean.edwards.name/weblog/2006/05/prototype-and-base/" rel="external" class="url">Prototype and Base</a></cite></li> 
      <li>Posted: <time datetime="2006-05-23T21:35:58+00:00">2006/05/23 9:35 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment4475" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>72</p> 
    <p>[…] ojectionist doesn’t count.) His first post is monumental: he all but guarantees that Dean Edwards’s Base will be integrated into Prototype, allowing for true inheritance. (I&amp;#821 […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://www.andrewdupont.net/2006/05/23/link-sams-blog/" rel="external" class="url">Painfully Obvious » Blog Archive » Link: Sam’s Blog</a></cite></li> 
      <li>Posted: <time datetime="2006-05-24T04:27:31+00:00">2006/05/24 4:27 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment4525"> 
    <p class="permalink"> <a href="#comment4525" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>73</a> </p> 
    <p>You’ve renamed it to <code>base</code>? Blah<img src="http://dean.edwards.name/weblog/wp-includes/images/smilies/icon_sad.gif" alt=":(" class="wp-smiley" style="height: 1em; max-height: 1em;"> It might as well be called <code>über</code> then, because that makes as much sense calling the overriden method as <code>base</code>…</p> 
    <p>No offense, but I think these things should have semantics other than just functionality.</p> 
    <p><code>parent</code> and <code>super</code> being reserved, maybe it can be called <code><b>sup</b></code> (if it’s not too late)? <code>$uper</code>, of course, is out of the question. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Mislav</cite></li> 
      <li>Posted: <time datetime="2006-05-25T10:26:23+00:00">2006/05/25 10:26 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment4526"> 
    <p class="permalink"> <a href="#comment4526" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>74</a> </p> 
    <p>@Mislav – what’s wrong with <code>base</code>? It seems whatever I call it there will always be someone that doesn’t like the name.<img src="http://dean.edwards.name/weblog/wp-includes/images/smilies/icon_sad.gif" alt=":-(" class="wp-smiley" style="height: 1em; max-height: 1em;"> </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-05-25T10:45:42+00:00">2006/05/25 10:45 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment4554"> 
    <p class="permalink"> <a href="#comment4554" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>75</a> </p> 
    <p>Well, many people wouldn’t like <code>sup</code> either, but (as an abbreviation of <em>super</em>) it’s more correct. Unlike others, I have my arguments; <em>base</em> – as a word – is absolute and more like <i>top</i>. If someone asked me what do I think base method might be in an inheritance scheme, the first thing that comes to mind is that it might return the base class (top-level) of the inheritance structure. When one would give me a hint that it’s about methods, at first I would be puzzled, then I would think it might call the same method as implemented in the <em>base</em> class.</p> 
    <p>Because of the absolute nature of the word, I would never think it refers to something ‘one level above’. <em>Ancestor</em> is ambiguous, while <code>parent</code> is perfect – it is the first ancestor. <em>Super</em> (above; over; upon) is less ambiguous than ancestor because it usually implies ‘one level above’, eg. in ‘superclass’. </p> 
    <p>But you can’t change it forever, so if <code>sup</code> is ugly to some maybe it’s best to leave it like this. Note that when this ‘extension’ gets widely adopted (I’m sure it’ll be before it enters Prototype), changing the name would not be an option anymore.</p> 
    <p>Wow… It almost feels like we are making a language<img src="http://dean.edwards.name/weblog/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;"></p> 
    <p>One more suggestion… what about upcased names: <code>Parent</code> or <code>Super</code>? Just a thought… </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Mislav</cite></li> 
      <li>Posted: <time datetime="2006-05-26T12:15:05+00:00">2006/05/26 12:15 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment4555"> 
    <p class="permalink"> <a href="#comment4555" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>76</a> </p> 
    <p>One more thing – I’ve just went through the examples again; <code>this.inherit()</code> was certainly the worst choice, glad you’ve changed it<img src="http://dean.edwards.name/weblog/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;">but the code examples need to reflect this change otherwise newcomers will be greatly confused without reading the lengthy discussion. This is just a reminder.</p> 
    <p>I’ve taken a look once more at <a href="http://dev.rubyonrails.org/ticket/4060">Rails ticked #4060 for Prototype.js</a>. Ben uses <code>sup</code>, but (in spite Ben’s explanation) one <a href="http://dev.rubyonrails.org/ticket/4060#change_15">Frank tried to write</a> <code>this.sup.foo()</code> and <code>this.sup().foo()</code>. This is an example how there are always people who would find something unlogical<img src="http://dean.edwards.name/weblog/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;"> </p> 
    <p>Best of luck! </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Mislav</cite></li> 
      <li>Posted: <time datetime="2006-05-26T12:38:10+00:00">2006/05/26 12:38 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment4556"> 
    <p class="permalink"> <a href="#comment4556" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>77</a> </p> 
    <p>@Mislav – I think that <code>super</code> is the only name that would have had universal acceptance. I chose <code>base</code> because, as someone <a href="http://dean.edwards.name/weblog/2006/03/base/#comment3193">pointed out</a>, it is the same name as the framework. Not the best reason but no one likes the other names anyway.</p> 
    <p>The real problem is that what we are talking about is not really a method. Sure, it is invoked like a method but in real terms it is more like a keyword. This is the reason that I liked <code>inherit</code> in the first place – “inherit the behaviour of the super class”.</p> 
    <p>I’m not going to change it any more!<img src="http://dean.edwards.name/weblog/wp-includes/images/smilies/icon_smile.gif" alt=":-)" class="wp-smiley" style="height: 1em; max-height: 1em;"> </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-05-26T14:18:40+00:00">2006/05/26 2:18 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment4570"> 
    <p class="permalink"> <a href="#comment4570" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>78</a> </p> 
    <p>I never had any strong feelings about ‘sup’. For being only three letters long, though, it evokes its intended meaning pretty well. But it is a little easy to mistake for an abbreviation of “superclass” (like ‘super’ in java). I think ‘base’ gets the point across just as well if not better.</p> 
    <p>Once I see which way the wind is blowing, I’ll be able to change the vocabulary by retyping the method name in just one place.</p> 
    <p>I’ve spent some quality time this afternoon slimming down my <a href="http://dev.rubyonrails.org/ticket/4060">patch</a>. It’s now less than twice the size of Base.js, and Dean’s awesome JS <a href="http://dean.edwards.name/packer/">packer</a> condenses them to within 1.5k of one another (he’s still winning though). The prototype library is ~60k (25k compressed). </p> 
    <p>I’ve also added a couple of lines of code that support Dean’s .extend() syntax. This was criminally easy<img src="http://dean.edwards.name/weblog/wp-includes/images/smilies/icon_wink.gif" alt=";)" class="wp-smiley" style="height: 1em; max-height: 1em;"></p> 
    <pre class="javascript">
constructor['extend'] = function(declarations) {
  declarations['extending'] = constructor;
  return Class.create(declarations);
};
</pre> 
    <p>Underneath the syntactic sugar, Dean and I appear to be doing very similar things. </p> 
    <p>All the best, Ben </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dev.rubyonrails.org/ticket/4060" rel="external" class="url">Ben Newman</a></cite></li> 
      <li>Posted: <time datetime="2006-05-27T06:03:15+00:00">2006/05/27 6:03 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment4572"> 
    <p class="permalink"> <a href="#comment4572" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>79</a> </p> 
    <blockquote>
     <p>Underneath the syntactic sugar, Dean and I appear to be doing very similar things.</p>
    </blockquote> 
    <p>And I’m silently lurking, waiting for you two to finish to overview both solutions, take out what’s best from the two and release it as my own mashup<img src="http://dean.edwards.name/weblog/wp-includes/images/smilies/icon_razz.gif" alt=":P" class="wp-smiley" style="height: 1em; max-height: 1em;"></p> 
    <p>Just kidding<img src="http://dean.edwards.name/weblog/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;"></p> 
    <p>Shame you don’t work together<img src="http://dean.edwards.name/weblog/wp-includes/images/smilies/icon_confused.gif" alt=":?" class="wp-smiley" style="height: 1em; max-height: 1em;"> </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Mislav</cite></li> 
      <li>Posted: <time datetime="2006-05-27T10:59:39+00:00">2006/05/27 10:59 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment4684"> 
    <p class="permalink"> <a href="#comment4684" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>80</a> </p> 
    <p>Hi dean, why is this possible? I built a lot around your base class, finding it needs fixing<img src="http://dean.edwards.name/weblog/wp-includes/images/smilies/icon_sad.gif" alt=":(" class="wp-smiley" style="height: 1em; max-height: 1em;"></p> 
    <pre class="javascript">
var BaseView = Base.extend({

	vars: []

});

var ThisView = BaseView.extend({

	constructor: function () { this.vars.push('test'); }

});

var ThatView = BaseView.extend({

	constructor: function () { alert (this.vars[0]); }

});

var x = new ThisView;
var y = new ThatView;
</pre> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>morriz</cite></li> 
      <li>Posted: <time datetime="2006-05-30T18:04:04+00:00">2006/05/30 6:04 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment4687"> 
    <p class="permalink"> <a href="#comment4687" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>81</a> </p> 
    <p>@morriz – you haven’t really asked a question but I guess you are wondering why the <code>alert</code> shows “test”. It is because you need to initialize object properties in the constructor function. i.e.</p> 
    <pre class="javascript">
var BaseView = Base.extend({
	constructor: function () { this.vars = []; },
	vars : null
});
</pre> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-05-30T19:25:30+00:00">2006/05/30 7:25 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment4746"> 
    <p class="permalink"> <a href="#comment4746" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>82</a> </p> 
    <p>Hi Dean, what do you mean? I think I dont get u right<img src="http://dean.edwards.name/weblog/wp-includes/images/smilies/icon_sad.gif" alt=":(" class="wp-smiley" style="height: 1em; max-height: 1em;"></p> 
    <p>Maybe its time for that question then:</p> 
    <p>Why does the class property ‘vars’ get changed when I instantiate an object and change its property? You clearly can see that it does. When I instantiate another class derived from the same base class, it gets the other childs instance’s value.</p> 
    <p>Actually I dont really need to now why this strange behaviour occurs. Can you tell me where I should declare class properties? Surely not in its constructor, that would kill a big part of the inheritance functionality :/</p> 
    <p>Maybe your init thingy could be used for that?</p> 
    <p>I will also try prototype to see if they have the same problem<img src="http://dean.edwards.name/weblog/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;"> </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>morriz</cite></li> 
      <li>Posted: <time datetime="2006-06-01T09:14:29+00:00">2006/06/01 9:14 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment4748"> 
    <p class="permalink"> <a href="#comment4748" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>83</a> </p> 
    <p>Hi Dean,</p> 
    <p>prototype is not the answer…to say the least…but I found out more:</p> 
    <p>From trial and error it seems that simple properties like strings etc can be declared in the class and will be inherited as is, </p> 
    <p>BUT…complex structures like empty arrays and empty objects are instantiated and reused…I guess that is implicit to javascripts prototype model, but couldnt it be resolved somehow by managing these instances somewhere under water? That would be messy I guess, so I’ll have to do with prorotype’s limitations after all (thanks to guys like you to a limited degree that is<img src="http://dean.edwards.name/weblog/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;">But plz do let your mind go crazy on it, cuz it might lead to something ;] </p> 
    <p>cheerz,</p> 
    <p>Maurice</p> 
    <p>PS: I am too busy atm with work n all, otherwise I would love to dive in an not only be asking all the time<img src="http://dean.edwards.name/weblog/wp-includes/images/smilies/icon_razz.gif" alt=":P" class="wp-smiley" style="height: 1em; max-height: 1em;"> </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>morriz</cite></li> 
      <li>Posted: <time datetime="2006-06-01T10:17:52+00:00">2006/06/01 10:17 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment4878" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>84</p> 
    <p>[…] this interface. The Special this.$base Property This feature was inspired by Dean Edwards’ Base class. When a class overrides a method of a class that it extends, a specia […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://www.uselesspickles.com/blog/2006/06/02/java-like-object-oriented-code-in-javascript/" rel="external" class="url">Useless Pickles » Blog Archive » Java-like Object-Oriented Code in Javascript</a></cite></li> 
      <li>Posted: <time datetime="2006-06-03T05:48:46+00:00">2006/06/03 5:48 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment5117"> 
    <p class="permalink"> <a href="#comment5117" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>85</a> </p> 
    <p>Sorry to join so late, but what does “I want to easily create classes without the MyClass.prototype cruft ” mean?! </p> 
    <p>I have always rather liked the prototype syntax… </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Mark</cite></li> 
      <li>Posted: <time datetime="2006-06-07T18:48:02+00:00">2006/06/07 6:48 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment5245" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>86</p> 
    <p>[…] cripting books. Here’s a rundown on what’s been happening. Dean Edwards’ Base class is on its way to being incorporated into Prototype. His Base class offers a clean way of […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://www.webstandards.org/2006/06/12/promoting-the-responsible-use-of-javascript-writing-teaching-and-presenting/" rel="external" class="url">Promoting the responsible use of JavaScript: writing, teaching and presenting - The Web Standards Project</a></cite></li> 
      <li>Posted: <time datetime="2006-06-12T20:36:12+00:00">2006/06/12 8:36 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment5320" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>87</p> 
    <p>[…] áció) – Dojo (home) – Rico (home) – Scriptaculous (home) – Base OOP JavaScript(home, dokumentáció) Ezen kódkönyvtárak nagyrészt egymásra épülnek, melyek közül kiemelked?en […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://www.sportspositive.com/neujk/?p=146" rel="external" class="url">Neumann János klub » Egy pár JavaScript függvénytár</a></cite></li> 
      <li>Posted: <time datetime="2006-06-15T09:52:08+00:00">2006/06/15 9:52 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment5522" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>88</p> 
    <p>[…] 12;———– Just like Dean Edwards, I want an OO library that solves a number of problems. For convenience, here is Dean Edwards’ list. I want to easily create cl […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://twologic.com/archives/2006/06/17/ruby-oo-continued/" rel="external" class="url">Twologic » Blog Archive » Ruby OO Continued…</a></cite></li> 
      <li>Posted: <time datetime="2006-06-18T05:03:07+00:00">2006/06/18 5:03 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment5789"> 
    <p class="permalink"> <a href="#comment5789" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>89</a> </p> 
    <p>have started to use Base for my little project. said <a href="http://dean.edwards.name/weblog/2006/03/base/#comment3300">before</a>, but Base is simply awesome!<img src="http://dean.edwards.name/weblog/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;">just wondering if anyone has figured out how to document the Base-based code. <a href="http://jsdoc.sourceforge.net/">JSDoc</a> does not seem to foot the bill. for the moment, i am sticking with <a href="http://perldoc.perl.org/perlpod.html">POD</a>. better ideas? </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://www.ezpdo.net" rel="external" class="url">oak</a></cite></li> 
      <li>Posted: <time datetime="2006-06-23T21:14:52+00:00">2006/06/23 9:14 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment6105" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>90</p> 
    <p>[…] class this link tutorial maybe will help you &nbsp;A Base Class for JavaScript Inheritance […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://javascript.blogsome.com/2006/06/29/javascript-base-class/" rel="external" class="url">Javascript :: Javascript base class :: June :: 2006</a></cite></li> 
      <li>Posted: <time datetime="2006-06-29T19:52:21+00:00">2006/06/29 7:52 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment6128"> 
    <p class="permalink"> <a href="#comment6128" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>91</a> </p> 
    <p>Hi Dean, I am still building a whole GUI framework on top of your Base class and loving it!! But I have a question. I found out that you don’t do the ‘init’ of a class if it already has a constructor….why?</p> 
    <p>snippet:</p> 
    <p>// single instance var object = constructor ? klass : _prototype; // class initialisation if (object.init instanceof Function) object.init();</p> 
    <p>TNX in advance </p> 
    <p>Maurice </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>morriz</cite></li> 
      <li>Posted: <time datetime="2006-06-30T15:01:40+00:00">2006/06/30 3:01 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment6129"> 
    <p class="permalink"> <a href="#comment6129" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>92</a> </p> 
    <p>@morriz – You are misinterpreting the code. The <code>init</code> method is for class initialisation <em>only</em> (see <a href="#comment3154">comment #26</a>). The snippet you are referencing deals with the initialisation of classes and <em>single instance</em> objects. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-06-30T15:15:13+00:00">2006/06/30 3:15 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment6142"> 
    <p class="permalink"> <a href="#comment6142" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>93</a> </p> 
    <p>@dean: take a look at the following snippet of code. it seems to me like Son.weird(); should still be a valid function.</p> 
    <pre>
var Pop = Base.extend({},{
   weird : function()
   {
      alert("Pa says `I like bacon'");
   }
});

var Son = Pop.extend();

Pop.weird(); //O.K.
Son.weird(); //Error: weird is undefined
</pre> 
    <p>I reckon classes should inherit instance AND static members. According to the <a href="http://www.mozilla.org/js/language/es4/core/classes.html">ECMAScript 4</a> proposal, “static members are inherited from the superclass.” That proposal might also be helpful when defining a standard inheritance hack now, even though we’re not yet to Javascript 2. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://www.openbookindex.com/" rel="external" class="url">red daly</a></cite></li> 
      <li>Posted: <time datetime="2006-07-01T02:34:42+00:00">2006/07/01 2:34 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment6151"> 
    <p class="permalink"> <a href="#comment6151" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>94</a> </p> 
    <p>@red – I thought about making static methods inherited but eventually decided against it. I’ll take a look at JS2 but I get the feeling the inheritance method there is slightly different. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-07-01T13:56:25+00:00">2006/07/01 1:56 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment6447"> 
    <p class="permalink"> <a href="#comment6447" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>95</a> </p> 
    <p>Dean, thanx for explaining that (again, doh!)</p> 
    <p>But I have one other issue, which I assume must be related to my noobness:</p> 
    <p>I wish to use my eventmapping klass which has an interface like this:</p> 
    <p>EventMapper.addHandler(trigger, handler) // references to functions EventMapper.dispatch(obj, trigger)</p> 
    <p>but it seems that instantiations of objects use pointers to their original class functions and not copies of them, which makes my event dispatching fire all the time<img src="http://dean.edwards.name/weblog/wp-includes/images/smilies/icon_sad.gif" alt=":(" class="wp-smiley" style="height: 1em; max-height: 1em;">This is intrinsic to javascript’s prototype model I think, but I wish I could find a way to distinguish instances functions from each other….adding a reference to the instance itself leads to the same problem, ‘this’ is the same everywhere….drama </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>morriz</cite></li> 
      <li>Posted: <time datetime="2006-07-10T11:12:30+00:00">2006/07/10 11:12 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment6458"> 
    <p class="permalink"> <a href="#comment6458" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>96</a> </p> 
    <p>Wouldn’t be nice if you could just do</p> 
    <pre class="javascript">
Vehicle={      
    wheels:2,      
    setWheels:function(x){this.wheels=x},
    getWheels:function(x){return this.wheels} 
}.classify();

Car={wheels:4}.classify().inherit(Vehicle);

// This will now return 4
myCar=new Car();
alert(myCar.getWheels());
</pre> 
    <p>I think this is a pretty clean implementation of inheritance, so I’ve written a small library to support this. Have a look at <a href="http://www.thomasfrank.se/classy_json.html">http://www.thomasfrank.se/classy_json.html</a> </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://www.thomasfrank.se" rel="external" class="url">Thomas Frank</a></cite></li> 
      <li>Posted: <time datetime="2006-07-10T15:48:46+00:00">2006/07/10 3:48 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment6459"> 
    <p class="permalink"> <a href="#comment6459" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>97</a> </p> 
    <p>@Thomas – <a href="http://erik.eae.net/archives/2005/06/06/22.13.54/">extending <code>Object.prototype</code> is verboten</a>. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-07-10T15:55:08+00:00">2006/07/10 3:55 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment6603"> 
    <p class="permalink"> <a href="#comment6603" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>98</a> </p> 
    <p>@Dean – <a href="http://www.thomasfrank.se/object_prototype_is_erlaubt.html">extending Object.prototype is erlaubt</a> </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://www.thomasfrank.se" rel="external" class="url">Thomas Frank</a></cite></li> 
      <li>Posted: <time datetime="2006-07-13T13:47:36+00:00">2006/07/13 1:47 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment6652"> 
    <p class="permalink"> <a href="#comment6652" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>99</a> </p> 
    <p>@Thomas – That’s an awful solution. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-07-14T12:34:14+00:00">2006/07/14 12:34 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment6694"> 
    <p class="permalink"> <a href="#comment6694" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>100</a> </p> 
    <p>@Dean – I suspect you’re not using “awful” as a synonym to “great” here. There are a couple of other solutions to “remove” Object.prototype members from for-in-loops and if-in-statements, some you might consider more elegant, but none that I found as easy to apply as this one.</p> 
    <p>Kind of suspected you wouldn’t give up your point of view on this one anyway, since you were the first to congratulate Eric on his unfortunate verboten standpoint. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://www.thomasfrank.se" rel="external" class="url">Thomas Frank</a></cite></li> 
      <li>Posted: <time datetime="2006-07-15T13:56:59+00:00">2006/07/15 1:56 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment6908"> 
    <p class="permalink"> <a href="#comment6908" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>101</a> </p> 
    <p>I would love to use your libary, but LGPL seems strange for Javascript, and I’m not quite sure how to interpret it. I wonder if there is a different license choice you could make that would make it easier to use. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Chris Smoak</cite></li> 
      <li>Posted: <time datetime="2006-07-25T16:51:17+00:00">2006/07/25 4:51 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment6909"> 
    <p class="permalink"> <a href="#comment6909" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>102</a> </p> 
    <p>@Chris – the next release will have an MIT license. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-07-25T17:13:51+00:00">2006/07/25 5:13 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment6911"> 
    <p class="permalink"> <a href="#comment6911" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>103</a> </p> 
    <p>I’ve been using Base with much success recently. However, I’ve run into a vexing problem that I was hoping someone might be able to help solve.</p> 
    <p>In the following code I’ve set up a <code>CustomEvent</code> class that extends <code>Base</code>. Ideally, other classes will create events internally and allow others to subscribe to them. Not rocket science so far. However, if you run the code below you’ll get two alerts showing “1”, rather than a “1” for <code>x</code> and “0” for <code>y</code>, as I would have expected. It looks like both <code>x</code> and <code>y</code> are sharing the same <code>listeners</code> array internally.</p> 
    <p>Have I constructed my classes incorrectly? Am I missing something basic? Any help would be much appreciated.</p> 
    <pre class="javascript">
var Util = {} //namespace
Util.Events = {} // namespace
Util.Events.CustomEvent = Base.extend({
	listeners: [],
	subscribe: function(listener) {
		this.listeners.push(listener);
	},
	fire: function(scope) {
		this.listeners.each(function(listener) {
			listener.apply(scope, arguments);
		});
	}
});

var x = new Util.Events.CustomEvent;
var y = new Util.Events.CustomEvent;

x.subscribe(function(){});
alert(x.listeners.length);
alert(y.listeners.length);
</pre> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://www.audiblepop.com/" rel="external" class="url">Justin Makeig</a></cite></li> 
      <li>Posted: <time datetime="2006-07-26T00:23:41+00:00">2006/07/26 12:23 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment6915"> 
    <p class="permalink"> <a href="#comment6915" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>104</a> </p> 
    <p>Thanks, Dean, for the change to the more friendly license. Any hints on when the next release might be?</p> 
    <p>Justin, I would suspect your problem is the array literal you assign to <code>listeners</code> in the class definition, which won’t be dup’ed properly by Base for the separate instances of <code>CustomEvent</code>. If you set the property in the constructor, instead, it should work as expected:</p> 
    <pre class="javascript">
...
Util.Events.CustomEvent = Base.extend({
    constructor: function() {
        this.listeners = [];
    },
    ...
</pre> 
    <p>In this case, the constructor is executed for each instance, creating two different arrays, instead of creating just one array in the block that gets passed to <code>Base.extend</code>. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Chris Smoak</cite></li> 
      <li>Posted: <time datetime="2006-07-26T09:41:37+00:00">2006/07/26 9:41 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment6945"> 
    <p class="permalink"> <a href="#comment6945" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>105</a> </p> 
    <p>@<a href="#comment6915">Chris</a>, thanks for your help. You are right about using a constructor. If I change the above code to </p> 
    <pre class="javascript">var Util = {} //namespace
Util.Events = {} // namespace
Util.Events.CustomEvent = Base.extend({
	listeners: null,
	constructor: function() {
		this.listeners = [];
	},
	subscribe: function(listener) {
		this.listeners.push(listener);
	},
	fire: function(scope) {
		this.listeners.each(function(listener) {
			listener.apply(scope, arguments);
		});
	}
});

var x = new Util.Events.CustomEvent;
var y = new Util.Events.CustomEvent;

x.subscribe(function(){});
alert(x.listeners.length);
alert(y.listeners.length);</pre> 
    <p>I get the results I expected: <code>x</code> has 1 listener and <code>y</code> has 0. </p> 
    <p>I’m a little sketchy on why my original method didn’t work, though. Is this a bug or is this behavior by design? I fear that I’ve been instantiating fields outside of a constructor on many of my classes that extend Base. Any help would be much appreciated.</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://www.audiblepop.com/" rel="external" class="url">Justin Makeig</a></cite></li> 
      <li>Posted: <time datetime="2006-07-28T00:10:56+00:00">2006/07/28 12:10 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment6973"> 
    <p class="permalink"> <a href="#comment6973" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>106</a> </p> 
    <p>@Justin – there is no real sense of “class” in JavaScript. So when we define class/object properties we are merely creating an object literal. That is why you need to initialise object properties in the constructor function.</p> 
    <p>@Everyone – I have a lot of code to release surrounding Base. The first package I will release will extend the JavaScript language a little:</p> 
    <ul> 
     <li>Array (filter, map, etc)</li> 
     <li>Hash &amp; Collection classes polymorphic with Array</li> 
     <li>RegGrp class (collection of RegExps for powerful parsing)</li> 
     <li>Package class (for handling namespacing)</li> 
     <li>A Module class (like Ruby)</li> 
     <li>An Enumerable module (like Ruby)</li> 
    </ul> 
    <p>I want to get these classes right before releasing. If you want an advance look then send me an email. I cannot guarantee that the code I send you will work though. It would just be for viewing.</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-07-28T14:34:00+00:00">2006/07/28 2:34 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment6986"> 
    <p class="permalink"> <a href="#comment6986" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>107</a> </p> 
    <p>I’d love to take a look at the code.</p> 
    <p>/Thomas </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://www.thomasfrank.se" rel="external" class="url">Thomas Frank</a></cite></li> 
      <li>Posted: <time datetime="2006-07-29T00:33:39+00:00">2006/07/29 12:33 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment7054"> 
    <p class="permalink"> <a href="#comment7054" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>108</a> </p> 
    <p>The Dojo folks have a <a href="http://manual.dojotoolkit.org/WikiHome/DojoDotBook/Book20">nice page</a> explaining their subclassing system. Some interesting stuff regarding their mix-in (multiple inheritance) approach and how they handle constructors vs initializers. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Mike Wilson</cite></li> 
      <li>Posted: <time datetime="2006-08-03T15:31:56+00:00">2006/08/03 3:31 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment7248"> 
    <p class="permalink"> <a href="#comment7248" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>109</a> </p> 
    <p>I recently did a journey somewhat like yours, with a slightly different ending.</p> 
    <pre class="javascript">Function.prototype.inherits = function (baseClass)
{
    function Blank() {}
    this.base = Blank.prototype = baseClass.prototype;
    this.prototype = new Blank();
    this.prototype.constructor = this;
};</pre> 
    <p>That’s the entirety of my solution. Sample code:</p> 
    <pre class="javascript">// ==== Ancestor ====

function Ancestor() {
    this.ancestorVar = 0;
    this.instances++;
}

Ancestor.prototype.instances = 0;  // class variable

Ancestor.prototype.toString = function() {
    return "Ancestor";
};

// ==== Parent ====

function Parent() {
    Parent.base.constructor.call(this);
    this.parentVar = 0;
}
Parent.inherits(Ancestor);

Parent.prototype.toString = function() {
    return "Parent";
};

// ==== Child ====

function Child() {
    Child.base.constructor.call(this);
    this.objectNumber = this.instances;
}
Child.inherits(Parent);

Child.prototype.toString = function() {
    var ancestor = Child.base.toString.call(this);
    return ancestor + "'s Child #" + this.objectNumber;
};</pre> 
    <p>Yes, there’s still the prototype element, but I prefer to keep everything out in the open. Functions and class variables are equals here. Accessing overridden functions is a bit ugly, but again, nothing hidden.</p> 
    <p>Once you get over those two bits, I love the rest of it. No calls to the constructor during the prototyping phase. Very light on memory (no redundant copies of anything during prototyping, no unnecessary closures). No global functions, and no affecting Object.prototype. The syntax is easily understandable by most automated tools. And the only marginally-difficult function is four lines long.</p> 
    <p>Ah well. Just felt like sharing.<img src="http://dean.edwards.name/weblog/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;"></p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://amills.net/" rel="external" class="url">Anthony Mills</a></cite></li> 
      <li>Posted: <time datetime="2006-08-17T20:03:11+00:00">2006/08/17 8:03 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment7271" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>110</p> 
    <p>[…] Over the years a myriad of implementations have popped up to simplify JavaScript inheritance. Some of the well known ones are from Douglas Crockford, Kevin Lindsey and Dean Edwards. These are all fine implementations. They of course differ somewhat in their capabilities and complexity. […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://cfis.savagexi.com/articles/2006/08/21/yet-another-javascript-inheritance-implementation" rel="external" class="url">Yet Another JavaScript Inheritance Implementation</a></cite></li> 
      <li>Posted: <time datetime="2006-08-22T06:31:46+00:00">2006/08/22 6:31 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment7351" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>111</p> 
    <p>[…] There is basicly two things you need to learn. There is a base class called Base. to write your own class you call Base.extend with a hash that contains all the methods. To call a superclass version of the method you just call this.base. Its really simple and adds just enough to help you build better code without getting in the road. See also: Base, Another post about Base […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://brehaut.net/blog/2006/08/27/basejs-javascript-with-classes/" rel="external" class="url">brehaut.net : blog : Base.js: Javascript with Classes</a></cite></li> 
      <li>Posted: <time datetime="2006-08-27T08:26:26+00:00">2006/08/27 8:26 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment7543" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>112</p> 
    <p><strong>“Proper” OO Inheritance for JavaScript</strong> … this is the subject of a post by juerg leny to the helma mailing list. Juerg and Hannes attemted (independendly) to improve an approach by Dean Edwards. Dean meantions a few goals: I want to easily create classes without the MyClass.prototype cr…</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Trackback by: <cite><a href="http://www.matsblog.com/stories/2628565/" rel="external" class="url">www.matsblog.com</a></cite></li> 
      <li>Posted: <time datetime="2006-09-05T16:28:38+00:00">2006/09/05 4:28 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment7567" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>113</p> 
    <p><strong>MOOTOOLS kommen</strong> Erst gestern hat mich Jens auf das Banner auf der Mad4Milk-Website aufmerksam gemacht. Das darafhin lange (und ausgesprochen witzige) spekulieren, darüber was diese Tools sein könnten, hätten wir uns schon kurz danach sparen können. Denn Valerio Pro</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Trackback by: <cite><a href="http://blog.ginader.de/archives/2006/09/07/MOOTOOLS-kommen.php" rel="external" class="url">web output</a></cite></li> 
      <li>Posted: <time datetime="2006-09-07T07:22:05+00:00">2006/09/07 7:22 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment7762" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>114</p> 
    <p><strong>Mootools JavaScript Library Released</strong> Mootools JavaScript Library Released</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Trackback by: <cite><a href="http://brunofigueiredo.com/archive/2006/09/11/74.aspx" rel="external" class="url">Creative Minds</a></cite></li> 
      <li>Posted: <time datetime="2006-09-11T10:35:11+00:00">2006/09/11 10:35 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment7775" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>115</p> 
    <p>[…] Si Prototype, script.aculo.us jQuery, MooFX, Dojo, Mochikit, Rico y las demás te parecían pocas librerías Javasript para elegir, los italianos de Mad4milk (los desarrolladores de MooFX, que a su vez sirvió de base para jQuery) acaban de lanzar MooTools, una pequeña librería que incluye los efectos de MooFX e incorpora las utilidades de Orientación a Objetos de Prototype, con mejoras introducidas por la clase Base.js de Dean Edwards. […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://www.estadobeta.com/2006/09/11/mootools-otra-libreria-javascript/" rel="external" class="url">EstadoBeta » Archivo » Mootools: otra librería Javascript</a></cite></li> 
      <li>Posted: <time datetime="2006-09-11T21:22:10+00:00">2006/09/11 9:22 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment7820" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>116</p> 
    <p>[…] mootools implements a class inheritance scheme that is inspired by Dean Edwards’ wonderful Base class. Creating a class is similar to Prototype, but now you don’t ever have to think about the prototype object when you define the class: […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://www.coryhudson.com/blog/2006/09/12/extending-objects-and-classes-with-mootools/" rel="external" class="url">Extending Objects and Classes with mootools | CoryHudson.com</a></cite></li> 
      <li>Posted: <time datetime="2006-09-13T00:28:38+00:00">2006/09/13 12:28 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment8302"> 
    <p class="permalink"> <a href="#comment8302" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>117</a> </p> 
    <p>Hi Dean,</p> 
    <p>Nice work. In your example above, I see you have:</p> 
    <pre class="javascript">
Event.add(window, "unload", this.closeAll, this);
</pre> 
    <p>where is Event.add defined? I can’t seem to find it in prototype.js or base.</p> 
    <p>thanks Nick </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>nickfox</cite></li> 
      <li>Posted: <time datetime="2006-09-26T09:54:39+00:00">2006/09/26 9:54 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment8314"> 
    <p class="permalink"> <a href="#comment8314" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>118</a> </p> 
    <p>@nickfox – it is only an example. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-09-26T18:51:43+00:00">2006/09/26 6:51 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment8327"> 
    <p class="permalink"> <a href="#comment8327" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>119</a> </p> 
    <p>I am using your base class and I create it like this and have an event where I capture clicks on a table and process them:</p> 
    <pre class="javascript">
    var eip = new EditInPlace('tasktable');
    Event.observe($('tasktable'), 'click', eip.taskCatchIt);
</pre> 
    <p>In my class definition, I have a variable called editing and the method definition:</p> 
    <pre class="javascript">
var EditInPlace = Base.extend({
    constructor: function(id) {
        this.id = id;
    },

    id: null,
    editing: false,

    taskCatchIt: function(e) {
	if (this.editing) return;
    }
</pre> 
    <p>This does not work, but if I do this:</p> 
    <pre class="javascript">
    taskCatchIt: function(e) {
	if (eip.editing) return;
    }
</pre> 
    <p>it does work, but I cannot hardcode the object name into my code, is there a proper way of doing it?</p> 
    <p>thanks Nick </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>nickfox</cite></li> 
      <li>Posted: <time datetime="2006-09-27T02:28:52+00:00">2006/09/27 2:28 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment8330"> 
    <p class="permalink"> <a href="#comment8330" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>120</a> </p> 
    <p>Ok, I figured it out, I put the Event.observe into the constructor:</p> 
    <pre class="javascript">
        Event.observe($(this.id), 'click', this.taskCatchIt.bind(this));
</pre> 
    <p>and it worked. </p> 
    <p>Dean, what blog software do you use, I really like the way this works.</p> 
    <p>thanks Nick </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>nickfox</cite></li> 
      <li>Posted: <time datetime="2006-09-27T06:47:38+00:00">2006/09/27 6:47 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment8338"> 
    <p class="permalink"> <a href="#comment8338" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>121</a> </p> 
    <p>@nickfox – I use a hacked version of WordPress with a comment preview/validation plugin (also hacked). The <a href="/my/behaviors/#star-light.htc">syntax highlighting module</a> I wrote myself. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-09-27T11:57:14+00:00">2006/09/27 11:57 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment8374"> 
    <p class="permalink"> <a href="#comment8374" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>122</a> </p> 
    <p>Hello,</p> 
    <p>This is my case for adding two lines to your already excellent Base.js. In re-reading this I see it has got rather long, but hopefully not tedious.</p> 
    <p>I’ve spent a while reading through Base.js and it certainly accomplishes the 6 points you set out in the introductory article. I however, would have added another requirement – that every constructor in the inheritance chain is called when instantiating an object. The constructor of a class generally does setting-up work that is essential for the other methods in that class to work. The constructor is particularly important in JavaScript since there is no formal language equivalent of member variables and initializer blocks, so the constructor is the only chance we have to ensure that member variables are created and appropriately initialized.</p> 
    <p>Take the following example:</p> 
    <pre class="javascript">var Animal = Base.extend({
	constructor: function(name) {
		this.name = name;
	},
	getName: function() {
		return this.name;
	}
});

var Mouse = Animal.extend({
	constructor: function(name, holeLocation) {
		alert("the mouse called '" + this.getName() + "' lives " + holeLocation);
	}
});

var m = new Mouse("squeek", "under the stairs");
// alerts: "the mouse called 'undefined' lives under the stairs"</pre> 
    <p>In Base.js as it stands, ‘m’ is not a proper Animal, because Mouse.constructor forgets to call Animal.constructor, and therefore m.getName() is broken. The designers of Java realised this and enforced that the superclass constructor is called at the start of any constructor, so that the constructor can rely on properties of the superclass being correctly initialized. We are currently working on a very large JavaScript system in which this is a frequent problem.</p> 
    <p>Here is a slight modification to Base.js that accomplishes the same. Were it my library (and it isn’t :-)) it would be the default behaviour with no way to remove it. People can always take behaviour out of the constructor and put it into a static factory function if they don’t want it to be inherited by subclasses:</p> 
    <pre class="javascript">	// from Base.extend:
	// create the wrapper for the constructor function
	var _super = this;
	var klass = function() {
		_super.apply(this, arguments);
		if (!Base._prototyping) constructor.apply(this, arguments);
		this.constructor = klass;
	};
</pre> 
    <p>There are of course disadvantages to this – in particular, Mouse.constructor cannot alter the parameters being passed onto Animal.constructor. Since there is no simple way to discover if Mouse.constructor calles this.base(), if it does then Animal.constructor will be called twice:</p> 
    <pre class="javascript">var Mouse = Animal.extend({
	constructor: function(name, holeLocation) {
		this.base(name + 'mousie!'); // this calls Animal.constructor for the second time 
		alert("the mouse called '" + this.getName() + "' lives " + holeLocation);
	}
});</pre> 
    <p>A small price to pay I would say. What are your thoughts?</p> 
    <p>Have a nice day…</p> 
    <p>Bernie</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Bernard Sumption</cite></li> 
      <li>Posted: <time datetime="2006-09-28T14:56:25+00:00">2006/09/28 2:56 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment8377"> 
    <p class="permalink"> <a href="#comment8377" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>123</a> </p> 
    <p>@Bernie – Thanks for the suggestion but I think I prefer Base the way it is. You can already inherit the previous constructor function by calling <code>this.base()</code>. This is more flexible in that:</p> 
    <ul> 
     <li>You can choose to ignore the previous constructor</li> 
     <li>You can add/alter the arguments passed to the previous constructor</li> 
     <li>You can call the previous constructor before or after additional initialisation</li> 
    </ul> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2006-09-28T15:27:01+00:00">2006/09/28 3:27 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment8418" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>124</p> 
    <p>[…] Inanzitutto volevo qualcosa che mi rendesse facile la programmazione Object Oriented in Javascript visto che non è proprio così immediata (un po’ nello stile Perl). Avendo sentito parlare bene di Base.js ho deciso di provarla e devo dire che mi ha risparmiato un bel po’ di lavoro rendendo il codice molto più pulito. […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://www.pixzone.com/blog/51/jquery-vs-yui/" rel="external" class="url">JQuery vs YUI | the pix zone</a></cite></li> 
      <li>Posted: <time datetime="2006-09-29T23:00:01+00:00">2006/09/29 11:00 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment8672" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>125</p> 
    <p><strong>Die MOOTOOLS haben jetzt ein Wiki</strong> Wie der MOOTOOLS-Entwickler Valerio Proietti in seinem Blog mad4milk schreibt, hat er zur Dokumentation seines JavaScript-Frameworks ein Wiki aufgesetzt. Mit der Befüllung desselbigen hat er ebenfalls schon begonnen.Herausgekommen sind hierbei bereits:G</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Trackback by: <cite><a href="http://blog.ginader.de/archives/2006/10/05/Die-MOOTOOLS-haben-jetzt-ein-Wiki.php" rel="external" class="url">web output</a></cite></li> 
      <li>Posted: <time datetime="2006-10-05T09:13:02+00:00">2006/10/05 9:13 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment9344" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>126</p> 
    <p>[…] First off, of the half dozen or so requirements that Dean Edwards puts on his Base.js implementation I admittedly only agree with two of them – and you should see why at the end of this post. Those two are: I want to avoid calling a class’ constructor function during the prototyping phase I want to achieve the above without affecting Object.prototype […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://blogs.nitobi.com/dave/?p=166" rel="external" class="url">Dave Johnson » Blog Archive » On Classical JavaScript Inheritance</a></cite></li> 
      <li>Posted: <time datetime="2006-10-22T18:40:46+00:00">2006/10/22 6:40 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment9697" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>127</p> 
    <p><strong>Pragmatic OOP in JavaScript Part 2 : To prototype or not to prototype</strong> My recent post on object orientation in JavaScript has resulted in some quite interesting comments. Good</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Trackback by: <cite><a href="http://codebetter.com/blogs/peter.van.ooijen/archive/2006/10/31/Pragmatic-OOP-in-JavaScript-Part-2-_3A00_-To-prototype-or-not-to-prototype.aspx" rel="external" class="url">Peter's Gekko</a></cite></li> 
      <li>Posted: <time datetime="2006-10-31T14:42:46+00:00">2006/10/31 2:42 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment9702" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>128</p> 
    <p>[…] A Base Class for JavaScript Inheritance (tags: Javascript prototype oop) […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://www.willkoca.com/2006/10/03/links-for-2006-10-03/" rel="external" class="url">links for 2006-10-03 at willkoca</a></cite></li> 
      <li>Posted: <time datetime="2006-10-31T23:34:18+00:00">2006/10/31 11:34 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment38093" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>129</p> 
    <p>[…] Inheritance has long been a pain in the side of Object-Oriented Javascript developers. Prototype tried hard with it’s initial offering of Object.prototype.extend, but ultimately fell back to the ugly Object.extend that’s created a bit of madness. However, MooTools uses a spinoff of Dean Edward’s Base.js. This fixes access to overridden methods and supports a nice clean syntax: […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://warpspire.com/journal/interface-scripting/mootools-review/" rel="external" class="url">MooTools: review - Warpspire</a></cite></li> 
      <li>Posted: <time datetime="2007-01-05T22:00:54+00:00">2007/01/05 10:00 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment47676" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>130</p> 
    <p>[…] ??? ?? ????? ????????? (OOP) ???? ??? (?? ???? ?-JS ?????), ????? ??????, ????? ??????, ????? ??????? ???, ????? ??? ?? ??? ??? ???. ?? ??JS ??? ????? ????? ????? ?? ??? (??????? Prototype ?????? ?? ??? ??? ??? ?????). ??? ????? ???? ??????? ?????? ?-Base ???. […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://webdev.blogli.co.il/archives/4" rel="external" class="url">TayebDev » mootools - ???? ? ???? ????? ????.</a></cite></li> 
      <li>Posted: <time datetime="2007-01-12T13:21:27+00:00">2007/01/12 1:21 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment62366" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>131</p> 
    <p>[…] ????? ?OOP – ????? ???? ??? ??????? ????? ????? ????? ????? Dean Edwards ??? ?????? ?-Base ??? ??? ??? ????? ?? ??? ??? ?-Ruby’s way ????? ?-Prototype. […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://webdev.blogli.co.il/archives/10" rel="external" class="url">TayebDev » Prototype: ???? ???? + ?????.</a></cite></li> 
      <li>Posted: <time datetime="2007-01-19T21:21:17+00:00">2007/01/19 9:21 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment76643"> 
    <p class="permalink"> <a href="#comment76643" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>132</a> </p> 
    <p>Looks pretty interesting! Would be great if I get it to work on <a href="http://firecat.nihonsoft.org">firecat</a>. And I think LGPL is ok!;) </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://blog.netbeans.jp/roller/page/fchoong" rel="external" class="url">David Fu</a></cite></li> 
      <li>Posted: <time datetime="2007-02-26T07:34:30+00:00">2007/02/26 7:34 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment78060" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>133</p> 
    <p>[…] Of course it uses Prototype, it uses Scriptaculous effects.js and builder.js as well but I will try to make this dependancy optional later, and finally it uses Base.js to easily and nicely create OOP due to lake of simple tool in Prototype yet (they plan to integrate Base approach on v2 of Prototype). Actually scriptaculous effects.js is now optional. […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://gestadieu.free.fr/blog/?p=90" rel="external" class="url">Thoughts and Code » gWidgets: light widgets all around</a></cite></li> 
      <li>Posted: <time datetime="2007-03-05T04:38:10+00:00">2007/03/05 4:38 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment79461"> 
    <p class="permalink"> <a href="#comment79461" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>134</a> </p> 
    <p>I am trying to extend the Array object using Base. for example:</p> 
    <p>Base(Array); testA = Array.extend( { _message: null,</p> 
    <p> initialize: function(message) { this.base(message); this._message = message; },</p> 
    <p> showMessage: function() { alert(this._message); }</p> 
    <p>});</p> 
    <p>When I instantiate the object the showMessage() function is not a method of the object? Am I making a mistake, or can I not extend built-in objects? </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Shannon</cite></li> 
      <li>Posted: <time datetime="2007-03-13T00:35:22+00:00">2007/03/13 12:35 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment80327" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>135</p> 
    <p>[…] Base++.js.zip — includes my custom Base++.js, diagram.html, and an example inheritance diagram and Javascript. Dean Edwards’ original Base.js page GraphViz […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://teejayvanslyke.com/?p=114" rel="external" class="url">teejayvanslyke! » Javascript Inheritance Diagrams with GraphViz and Base.js</a></cite></li> 
      <li>Posted: <time datetime="2007-03-17T17:18:22+00:00">2007/03/17 5:18 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment81218" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>136</p> 
    <p>[…] The base2 core library is also quite useful in its own way. It includes things like my Base class and enumeration methods. I’ll document this library sometime in the future (it’s only little). For the time being I am only supporting the base2.DOM module and even then only if you are using the bind() method that I’ve demonstrated here. […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://dean.edwards.name/weblog/2007/03/yet-another/" rel="external" class="url">Dean Edwards: Yet Another JavaScript Library Without Documentation</a></cite></li> 
      <li>Posted: <time datetime="2007-03-21T20:33:11+00:00">2007/03/21 8:33 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment82450" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>137</p> 
    <p>[…] A Base Class for JavaScript Inheritance (tags: javascript inheritance) […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://dailies.chadlindstrom.ca/2007/03/links-for-2007-03-25/" rel="external" class="url">Chad’s dailies » Blog Archive » links for 2007-03-25</a></cite></li> 
      <li>Posted: <time datetime="2007-03-26T00:33:30+00:00">2007/03/26 12:33 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment84431"> 
    <p class="permalink"> <a href="#comment84431" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>138</a> </p> 
    <p>I love Base.js – its great. Thanks so much for creating it. I’m using it with Mochikit and its a really good complimentary script.</p> 
    <p>Cheers</p> 
    <p>Guy </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://www.myspace.com/vidacartel" rel="external" class="url">Guy Thomas</a></cite></li> 
      <li>Posted: <time datetime="2007-04-02T15:29:50+00:00">2007/04/02 3:29 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment85254"> 
    <p class="permalink"> <a href="#comment85254" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>139</a> </p> 
    <p>Works of FF but I cannot get it working with IE 7 , any advise? </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>NikD</cite></li> 
      <li>Posted: <time datetime="2007-04-05T09:03:26+00:00">2007/04/05 9:03 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment85260"> 
    <p class="permalink"> <a href="#comment85260" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>140</a> </p> 
    <p>Sorry ! i got it working … just changed the “language” to “Javascript1.3” </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>NikD</cite></li> 
      <li>Posted: <time datetime="2007-04-05T09:20:16+00:00">2007/04/05 9:20 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment90661" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>141</p> 
    <p>[…] A Base Class for JavaScript Inheritance […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://trevorpowell.com/2007/05/04/literal-notation-and-object-constructors-in-javascript/" rel="external" class="url">\ pacific side: the glocalized web \</a></cite></li> 
      <li>Posted: <time datetime="2007-05-05T00:08:44+00:00">2007/05/05 12:08 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment90806"> 
    <p class="permalink"> <a href="#comment90806" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>142</a> </p> 
    <p>This looks interesting – and nicely explained. Has anyone benchmarked it? Do you know how it compares to using regular js prototyping (initial script loading that is).</p> 
    <p>I have a lot of code with inheritance etc, and trying to optimize so page load times shorten. I stumbled across this site looking for a way to stop constructors being called during the prototyping phase. They really add up when you have a large base of classes that leverage each other. But I suspect the overhead of this “Base class” approach, in passing objects and looping through them, will outweigh any benefits wrt load times. Anyone ?</p> 
    <p>P.S. Firebug’s console.time() and console.timeEnd() are super-handy at measuring script loading times. Maybe I’ll try measuring it when I find time.</p> 
    <p>Thanks for posting this. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Glen</cite></li> 
      <li>Posted: <time datetime="2007-05-06T00:09:11+00:00">2007/05/06 12:09 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment90807"> 
    <p class="permalink"> <a href="#comment90807" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>143</a> </p> 
    <p>Base is optimised for fast instantiation not for fast class building. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2007-05-06T00:16:34+00:00">2007/05/06 12:16 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment93621" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>144</p> 
    <p>[…] Justin Palmer and Dean Edwards have already talked a lot about this, but I thought I’d take a stab at it. What we need is an easy way to create classes, create subclasses, and add properties and methods to classes. And, as Sam Stephenson mentions on his blog, we need it to be simple and backwards compatible. The current Prototype implementation of class creation follows: var Class = { &nbsp; create: function(){ return function(){ return this.initialize.apply(this, arguments); } } &nbsp; } […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://ajaxon.com/michael2/2007/01/23/easy-inheritance-in-prototype" rel="external" class="url">ajaxon.com/michael :: Simple Inheritance using Prototype.js</a></cite></li> 
      <li>Posted: <time datetime="2007-05-17T21:40:07+00:00">2007/05/17 9:40 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment94599" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>145</p> 
    <p>[…] Dags för mig och skriva en liten rad eller två. Eller fler. Allt kanske inte är helt relevant, men jag tänkte att det kunde vara kul med lite onödigt vetande också. Det bibliotek jag valt för Wobis heter alltså MooTools och har inspirerats av bland annat Prototype och Dean Edwards’ Base. MooTools var från grunden bara moo.fx, ett grymt litet effektbibliotek som krävde[1] just Prototype för att fungera. […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://www.78d.se/wobis/2007/05/22/mootools-och-lite-allmant-om-javascript/" rel="external" class="url">MooTools och lite allmänt om JavaScript at Wobis</a></cite></li> 
      <li>Posted: <time datetime="2007-05-22T22:10:56+00:00">2007/05/22 10:10 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment95122" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>146</p> 
    <p>[…] I had a hard time understanding basic classes in JavaScript and the tutorials I found all got way to bogged down in useless fluff, so I thought I’d put up this no-nonsense example of a JavaScript class. Expect a version using Base.js once I learn that way. […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://www.velvetcache.org/2007/05/24/javascript-class-definitions/" rel="external" class="url">VelvetCache.org » John Hobbs Blog » Blog Archive » JavaScript Class Definitions</a></cite></li> 
      <li>Posted: <time datetime="2007-05-24T19:36:30+00:00">2007/05/24 7:36 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment99117" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>147</p> 
    <p>[…] <a href="http://dean.edwards.name/weblog/2006/03/base/" rel="nofollow">http://dean.edwards.name/weblog/2006/03/base/</a> “I’ve created a JavaScript class (Base.js) that I hope eases the pain of JavaScript OO. It’s a simple class and extends the Object object by adding two instance methods and one class method.”Tags:&nbsp;javascript, oop, programming, inheritance, library, oo, api, class(del.icio.us history) if (typeof window.Delicious == “undefined”) window.Delicious = {}; Delicious.BLOGBADGE_MANUAL_MODE = true; […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://inelegant.org/dean-edwards-name-weblog-2006-03-base/" rel="external" class="url">Dean Edwards: A Base Class for JavaScript Inheritance (Inelegant Blog)</a></cite></li> 
      <li>Posted: <time datetime="2007-06-10T17:15:00+00:00">2007/06/10 5:15 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment112529"> 
    <p class="permalink"> <a href="#comment112529" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>148</a> </p> 
    <p>hi dean, i love your base.js. i got it working in mozilla very fine. but in ie6 i always get error-message: “my_object is undefined”. </p> 
    <p>the ie really doesn’t like this simple example. the mozilla doesn’t make any problem (even with “real”-code). is that known? although i don’t assume the fantastic base.js wasn’t written just only for mozilla?</p> 
    <p>greetings chris </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Chris</cite></li> 
      <li>Posted: <time datetime="2007-08-06T18:44:15+00:00">2007/08/06 6:44 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment112532"> 
    <p class="permalink"> <a href="#comment112532" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>149</a> </p> 
    <p>@Chris – if you show me the code that is giving you trouble I’d be glad to help. You can mail me it to me using my <a href="/contact/">contact form</a>. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2007-08-06T18:53:31+00:00">2007/08/06 6:53 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment112533"> 
    <p class="permalink"> <a href="#comment112533" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>150</a> </p> 
    <p>i tried to append some example-code, but i’m not allowed to paste it (although i wrap it into pre and the validator like it). so i pasted the code here: <a href="http://pastie.caboo.se/85313">http://pastie.caboo.se/85313</a></p> 
    <p>greetings chris </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Chris</cite></li> 
      <li>Posted: <time datetime="2007-08-06T18:56:59+00:00">2007/08/06 6:56 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment112534"> 
    <p class="permalink"> <a href="#comment112534" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>151</a> </p> 
    <p>@Chris – you are calling <code>new foo()</code> before you have defined <code>foo</code>. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2007-08-06T19:15:56+00:00">2007/08/06 7:15 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment112543"> 
    <p class="permalink"> <a href="#comment112543" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>152</a> </p> 
    <p>maybe my pasting was misleading. i included the application.js in the header. so the class-declaration is available. so the first part of the example is located in the application.js (included js-file) and the part with “on the page” is following. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Chris</cite></li> 
      <li>Posted: <time datetime="2007-08-06T19:56:39+00:00">2007/08/06 7:56 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment112757"> 
    <p class="permalink"> <a href="#comment112757" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>153</a> </p> 
    <p>hi dean,</p> 
    <p>unfortunately still don’t get it running on ie. i really have no idea why. i assume base.js should work with ie? you also can write my email. i think you have it. i would be very thankful helping me (i made some effort with a class, when i realised this problem).</p> 
    <p>greetings chris </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Chris</cite></li> 
      <li>Posted: <time datetime="2007-08-07T19:02:32+00:00">2007/08/07 7:02 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment116768" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>154</p> 
    <p>[…] Pretty nice. No VB and some decent OOP happening in ASP. It is however limited to this page but if I were to write a small framework or use something like Dean Edwards base and include it on each page of the project it is a, to me anyways, an exceptable compromise. […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://www.geekdaily.net/2007/08/20/does-classic-asp-still-have-a-place-in-a-net-world/" rel="external" class="url">Geek Daily » Blog Archive » Does Classic ASP Still Have A Place In A .Net World?</a></cite></li> 
      <li>Posted: <time datetime="2007-08-20T17:51:10+00:00">2007/08/20 5:51 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment119299" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>155</p> 
    <p>[…] Lisans MIT-style license. MooTools Telif Hakk? copyright © 2007 Valerio Proietti, <a href="http://mad4milk.net" rel="nofollow">http://mad4milk.net</a> MooTools Hakk?nda -Class çok az bir k?sm? Base.js’yi temel al?r.<a href="http://dean.edwards.name/weblog/2006/03/base/" rel="nofollow">http://dean.edwards.name/weblog/2006/03/base/</a> © 2006 Dean Edwards, Lisans <a href="http://creativecommons.org/licenses/LGPL/2.1/" rel="nofollow">http://creativecommons.org/licenses/LGPL/2.1/</a> -Birçok fonksiyon prototype.js den esinlenerek olu?turulmu?tur. <a href="http://prototype.conio.net/" rel="nofollow">http://prototype.conio.net/</a> © 2005 Sam Stephenson <a href="mailto:sam@conio.net">sam@conio.net</a>, MIT-style license -Belgelendirme Aaron Newton(aaron.newton@cnet.com) and Valerio Proietti taraf?ndan yap?lm??t?r. […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://www.webdersi.net/?p=5" rel="external" class="url">Web Dersi » Blog Archive » MooTools JavaScript Kütüphanesi</a></cite></li> 
      <li>Posted: <time datetime="2007-08-29T18:56:39+00:00">2007/08/29 6:56 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment122759" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>156</p> 
    <p>[…] Dean Edwards’ Base ??????? ?????? ? ???????????? ? JavaScript. […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://designformasters.info/posts/objectifying-javascript/" rel="external" class="url">Design For Masters » ????????-??????????????? JavaScript</a></cite></li> 
      <li>Posted: <time datetime="2007-09-15T08:12:33+00:00">2007/09/15 8:12 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment123971"> 
    <p class="permalink"> <a href="#comment123971" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>157</a> </p> 
    <p>Nice work Dean</p> 
    <p>I miss some functionallities though.</p> 
    <p>It would be nice to be able to get the base’s base function. <br>Something equivalent to: <b>this.base.base()</b></p> 
    <p>Implement() is a good solution but you might want to be able to know if an object implements something. obj.implements(Bird) true/false </p> 
    <p> Animal –&gt; Fish –&gt; FlyingFish[implement(Bird)] <br>myFish instanceof Animal -&gt; true <br>myFlyingFish instanceof Animal -&gt; true <br>myFlyingFish instanceof Bird -&gt; false <br>myFlyingFish.<b>implements</b>(Bird) -&gt; <b>true</b> </p> 
    <p>And maybe there could be a solution for <b>overloading</b> ( not overriding ). You probably need to add som sort of test expression for the arguments when you overload a method. If the exression does not return true, use the original method as default.</p> 
    <p>Cat.overload(/methodname/, /testexpression/, /method/) <br>Cat.<b>overload</b>(eat, arguments.length&gt;0, function(food){alert(…)}) <br><b>Cat.eat()</b> would not be the same as <b>Cat.eat(mouse)</b></p> 
    <p>I’ll test it some more and see if I can come up with anything else that’s missing<img src="http://dean.edwards.name/weblog/wp-includes/images/smilies/icon_biggrin.gif" alt=":-D" class="wp-smiley" style="height: 1em; max-height: 1em;"></p> 
    <p>/Johan </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://www.addsystems.com" rel="external" class="url">Johan Trenkle</a></cite></li> 
      <li>Posted: <time datetime="2007-09-21T08:48:30+00:00">2007/09/21 8:48 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment124052"> 
    <p class="permalink"> <a href="#comment124052" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>158</a> </p> 
    <blockquote cite="#comment123971">
     <p>I’ll test it some more and see if I can come up with anything else that’s missing</p>
    </blockquote> 
    <p>There is nothing “missing”. Base is a simple class to add inheritance to JavaScript. Nothing more. I’m not trying to turn JavaScript into a full OO language. There really is no need. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://dean.edwards.name/" rel="external" class="url">-dean</a></cite></li> 
      <li>Posted: <time datetime="2007-09-21T16:32:33+00:00">2007/09/21 4:32 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment124168" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>159</p> 
    <p>[…] Mootools mad4milk taraf?ndan geli?tirile dursun kökeninde farkl? kullan?c?lar?n scriptleri yatmaktad?r ve bunlar optimize edilerek ortaya ç?km??t?r.Örne?in core.js yani çekirdek scripti base.js ad?nda ve Dean Edwards’a ait bir scriptten az da olsa yaralanm??t?r bunun d???nda prototype.js‘den çok esinlenlenmi?tir.?imdi ise daha da geni?leyen bir kütüphane olmas? nedeniyle daha fazla optimize edilmi? scriptten yaralanmaktad?r. […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://www.hakanersu.com/?p=96" rel="external" class="url">Mootools ve Ajax</a></cite></li> 
      <li>Posted: <time datetime="2007-09-22T05:13:13+00:00">2007/09/22 5:13 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment130531" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>160</p> 
    <p>[…] Dean Edwards ist ein weiterer Name, den man sich merken sollte. Mit Base hat er eine wunderbare Vererbungsgrundklasse geschrieben, die schöne OO Vererbung ermöglicht und voraussichtlich auch in Prototype 2.0 enthalten sein wird. Ebenfalls einen Blick wert ist cssQuery, welches auch Abfragen im jQuery-Stil ermöglicht. […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://blog.nothing.ch/2006/11/js-libraries/" rel="external" class="url">nothing blog from outer space : JS Libraries</a></cite></li> 
      <li>Posted: <time datetime="2007-10-18T14:23:24+00:00">2007/10/18 2:23 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment132467"> 
    <p class="permalink"> <a href="#comment132467" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>161</a> </p> 
    <p>hi dean,</p> 
    <p>i used your base.js and i’m very happy, that you created it. i use it in rails (that means i also include prototype.js). in IE and gecko-browser all is fine. the only issue i have is in opera. not a bad one, but ugly. everytime a page is rendered the base.js calls an undefined rails-controller-action. nothing happens (so it’s not bad), but my logfiles are full of that ugly message (action not found etc…). when i exclude the base.js the opera does not this kind of unexplainable behaviour. but i really like the base.js…. so maybe you can explain me, how to prevent this opera-behaviour? </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Chris</cite></li> 
      <li>Posted: <time datetime="2007-10-22T07:55:08+00:00">2007/10/22 7:55 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment137898" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>162</p> 
    <p>[…] In this post I will be discussing how one can achieve Class Hierarchy and Data Encapsulation in JScript. […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://outatime.wordpress.com/2007/10/31/classes-in-jscript-e28093-part-iii-class-hierarchy-and-data-encapsulation/" rel="external" class="url">Classes in JScript – Part III: Class Hierarchy and Data Encapsulation « outaTiME</a></cite></li> 
      <li>Posted: <time datetime="2007-10-31T14:12:39+00:00">2007/10/31 2:12 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment146067" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>163</p> 
    <p>[…] First off, it improves performance substantially over the initial release by inspecting method definitions to find out if they use this._super. If they don’t, they can be inserted straight into the class’ prototype without being wrapped in a _super-generating function. I believe Prototype and Base do something similar, though Inheritance seems not to. […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://blog.jcoglan.com/2007/11/13/jsclass-updates/" rel="external" class="url">The If Works · JS.Class updates</a></cite></li> 
      <li>Posted: <time datetime="2007-11-13T14:47:23+00:00">2007/11/13 2:47 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment146347" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>164</p> 
    <p>[…] There is one design decision in JS.Class that sets it aside from all the other inheritance libraries I looked at (Prototype, Base and Inheritance). With all those libraries, super means “the previous version of this method in this class”, rather than “the current version of this method in the parent class”. Now, if you’ve just built a class by inheriting from a parent class and then overwriting some of its methods, those two definitions amount to the same thing. […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://blog.jcoglan.com/2007/11/14/wheres-my-inheritance/" rel="external" class="url">The If Works · Where’s my inheritance?</a></cite></li> 
      <li>Posted: <time datetime="2007-11-14T01:02:14+00:00">2007/11/14 1:02 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment149676" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>165</p> 
    <p>[…] November 20, 2007 In early 2006 Dean Edwards began a little project called Base. This was he first attempt to ease the pain of developing Object Oriented JavaScript. I want a nice base class for JavaScript OO: […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://deskreference.wordpress.com/2007/11/20/base2-a-standards-based-javascript-library/" rel="external" class="url">Base2: A Standards Based JavaScript Library « Web Development</a></cite></li> 
      <li>Posted: <time datetime="2007-11-20T18:04:58+00:00">2007/11/20 6:04 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment150879" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>166</p> 
    <p>[…] In early 2006 Dean Edwards began a little project called Base. This was he first attempt to ease the pain of developing Object Oriented JavaScript. I want a nice base class for JavaScript OO: […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://www.sitesmart.info/development/base2-a-standards-based-javascript-library/" rel="external" class="url">Base2: A Standards Based JavaScript Library : Site Smart</a></cite></li> 
      <li>Posted: <time datetime="2007-11-22T21:57:27+00:00">2007/11/22 9:57 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment162509" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>167</p> 
    <p>[…] A mechanism for inheritance […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://dean.edwards.name/weblog/2007/12/base2-intro/" rel="external" class="url">Dean Edwards: base2: An Introduction</a></cite></li> 
      <li>Posted: <time datetime="2007-12-20T23:20:05+00:00">2007/12/20 11:20 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment162932" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>168</p> 
    <p>[…] A mechanism for inheritance […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://www.ajaxbestiary.com/2007/12/21/meet-base2-a-javascript-reset-from-dean-edwards/" rel="external" class="url">Meet Base2, A Javascript Reset from Dean Edwards » By Don Albrecht » article » Ajax Bestiary</a></cite></li> 
      <li>Posted: <time datetime="2007-12-21T15:04:22+00:00">2007/12/21 3:04 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment170992" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>169</p> 
    <p>[…] A while back I published my Base class for JavaScript inheritance. There have been a few more solutions to inheritance since then and most of the major JavaScript libraries contain an implementation of some kind. […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://dean.edwards.name/weblog/2008/01/improvements/" rel="external" class="url">Dean Edwards: Improvements to the Base Class in base2</a></cite></li> 
      <li>Posted: <time datetime="2008-01-02T14:35:47+00:00">2008/01/02 2:35 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment171032"> 
    <p class="permalink"> <a href="#comment171032" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>170</a> </p> 
    <p>Don’t feel unloved, Dean. |base| is an excellent choice for the name given that no name is going to be perfect for this situation. I’ve been using |getSuper| in Chiron, but there’s no question that it’s ugly. The only problem with |base| is that it implies that you’re actually getting *the* base instance (the eldest ancestor, nominally |Object|). Whatever; |base| is succinct, brief, and certainly good enough. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://cixar.com/tracs/javascript" rel="external" class="url">Kris Kowal</a></cite></li> 
      <li>Posted: <time datetime="2008-01-02T20:56:30+00:00">2008/01/02 8:56 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment172624" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>171</p> 
    <p>[…] Since we use Dean Edwards’ Base library for our inheritance the JSDoc out of the box wouldn’t work without commenting explicit method name and memberOf attribute – which, in my view, defeats the point. […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://remysharp.com/2008/01/08/jsdocs-for-base/" rel="external" class="url">JSDocs for Base</a></cite></li> 
      <li>Posted: <time datetime="2008-01-08T01:08:07+00:00">2008/01/08 1:08 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment180788"> 
    <p class="permalink"> <a href="#comment180788" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>172</a> </p> 
    <p>Hello Dean. Sorry, I don’t speak English very well. JavaScript "like Java"</p> 
    <pre class="html|css|javascript|html-multi">
var ClassA = Class.create("ClassA",function(){
	var value = "value:A";
	this.getValue = function(){
		return value;
	};
	this.$$constructor = function(){
	};
});

var ClassB = Class.extend("ClassB",ClassA,function(){
   	var value = "value:B";
	this.getValue = function(){
		return value + this.$$super[0].getValue(); 
	};
	this.$$constructor = function(){
	};
});

var instB = new ClassB ( ); 
alert (instB.getValue ( )) ; // value:B value:A 
</pre> 
    <p>You can see more examples in <a href="http://www.jsimpleclass.net/" title="">JSimpleClass</a> </p> 
    <p>Bye. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://www.jsimpleclass.net/" rel="external" class="url">Pedro Andujar</a></cite></li> 
      <li>Posted: <time datetime="2008-01-25T16:45:23+00:00">2008/01/25 4:45 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment192290" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>173</p> 
    <p>[…] Az osztályok hiánya javascriptben nem kifejezetten érzékelhet?, mivel minden objektum használható class-ként. B?vebben err?l Dean Edwards blogjáról tudhattok meg, én itt, ebben a sorozatban nem térek erre ki külön. Az Ext OOP éppen ezt a javascript tulajdonságot használja ki. […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://theba.hu/2008/02/17/extjs-sorozat-alapok/" rel="external" class="url">theba.hu » Blog Archive » ExtJS sorozat - Alapok</a></cite></li> 
      <li>Posted: <time datetime="2008-02-17T15:09:32+00:00">2008/02/17 3:09 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment193091" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>174</p> 
    <p>[…] Az osztályok hiánya javascriptben nem kifejezetten érzékelhet?, mivel minden objektum használható class-ként. B?vebben err?l Dean Edwards blogjáról tudhattok meg, én itt, ebben a sorozatban nem térek erre ki külön. Az Ext OOP éppen ezt a javascript tulajdonságot használja ki. […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://theba.hu/2008/02/19/extjs-sorozat-alapok-1-lecke/" rel="external" class="url">theba.hu » Blog Archive » ExtJS sorozat - Alapok - 1. lecke</a></cite></li> 
      <li>Posted: <time datetime="2008-02-19T10:32:42+00:00">2008/02/19 10:32 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment193182" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>175</p> 
    <p>[…] Some recent experiments with Dean Edward’s excellent Base javascript library has given me an insight into how we can speed up the development of the typical user interface components that we are asked to include in our projects; ones such as tooltips , popups and draggable windows. […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://www.crossedbrowser.co.uk/?p=50" rel="external" class="url">Crossed Browser » Blog Archive » Rapid Client Side Development of UI Components with Base</a></cite></li> 
      <li>Posted: <time datetime="2008-02-19T20:14:35+00:00">2008/02/19 8:14 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment194819"> 
    <p class="permalink"> <a href="#comment194819" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>176</a> </p> 
    <p>Dean, Outstanding result! Especially the base function. Without this to provide proper inheritance javascript objects would be pointless. Congrats </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Peter McGill</cite></li> 
      <li>Posted: <time datetime="2008-02-25T21:13:04+00:00">2008/02/25 9:13 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment197828" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>177</p> 
    <p>[…] <a href="http://dean.edwards.name/weblog/2006/03/base/" rel="nofollow">http://dean.edwards.name/weblog/2006/03/base/</a> “I’ve created a JavaScript class (Base.js) that I hope eases the pain of JavaScript OO. It’s a simple class and extends the Object object by adding two instance methods and one class method.” […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://www.michaelramses.com/?p=25" rel="external" class="url">Michael ramses » A Base Class for JavaScript Inheritance</a></cite></li> 
      <li>Posted: <time datetime="2008-03-02T12:41:38+00:00">2008/03/02 12:41 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment206862" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>178</p> 
    <p>[…] ?????Douglas Crockford?????&nbsp;Dean?Base? […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://www.33lab.cn/?p=24" rel="external" class="url">????? » ???Javascript?????????</a></cite></li> 
      <li>Posted: <time datetime="2008-03-23T03:41:31+00:00">2008/03/23 3:41 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment208217" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>179</p> 
    <p>[…] * Class is slightly based on Base.js <a href="http://dean.edwards.name/weblog/2006/03/base/" rel="nofollow">http://dean.edwards.name/weblog/2006/03/base/</a> © 2006 Dean Edwards, License <a href="http://creativecommons.org/licenses/LGPL/2.1/" rel="nofollow">http://creativecommons.org/licenses/LGPL/2.1/</a> * Some functions are inspired by those found in prototype.js <a href="http://prototype.conio.net/" rel="nofollow">http://prototype.conio.net/</a> © 2005 Sam Stephenson sam [at] conio [dot] net, MIT-style license * Documentation by Aaron Newton (aaron.newton [at] cnet [dot] com) and Valerio Proietti. […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://docs.esmootools.net/?p=3" rel="external" class="url">docs esMooTools » Blog Archive » Core.js</a></cite></li> 
      <li>Posted: <time datetime="2008-03-26T13:25:18+00:00">2008/03/26 1:25 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment208225" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>180</p> 
    <p>[…] * Class is slightly based on Base.js <a href="http://dean.edwards.name/weblog/2006/03/base/" rel="nofollow">http://dean.edwards.name/weblog/2006/03/base/</a> © 2006 Dean Edwards, License <a href="http://creativecommons.org/licenses/LGPL/2.1/" rel="nofollow">http://creativecommons.org/licenses/LGPL/2.1/</a> * Some functions are inspired by those found in prototype.js <a href="http://prototype.conio.net/" rel="nofollow">http://prototype.conio.net/</a> © 2005 Sam Stephenson sam [at] conio [dot] net, MIT-style license * Documentation by Aaron Newton (aaron.newton [at] cnet [dot] com) and Valerio Proietti. […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://docs.esmootools.net/?p=5" rel="external" class="url">docs esMooTools » Blog Archive » Co</a></cite></li> 
      <li>Posted: <time datetime="2008-03-26T13:45:58+00:00">2008/03/26 1:45 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment208635" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>181</p> 
    <p>[…] In early 2006 Dean Edwards began a little project called Base. This was he first attempt to ease the pain of developing Object Oriented JavaScript. I want a nice base class for JavaScript OO: […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://www.geekdaily.net/2008/03/27/base2-a-standards-based-javascript-library/" rel="external" class="url">Geek Daily » Blog Archive » Base2: A Standards Based JavaScript Library</a></cite></li> 
      <li>Posted: <time datetime="2008-03-27T16:00:36+00:00">2008/03/27 4:00 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment257548"> 
    <p class="permalink"> <a href="#comment257548" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>182</a> </p> 
    <p>Hi, I have tried an different techniques related to JavaScript inheritance subject. The code and the explanation are to long to post them here so if anyone is interested to take a look over it you can find it at <a>http://www.dotnetcaffe.net</a> under JavaScript category. Fell free to criticize the code in any way you want…just don’t flame :). </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>M</cite></li> 
      <li>Posted: <time datetime="2008-05-12T10:12:55+00:00">2008/05/12 10:12 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment281720" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>183</p> 
    <p>[…] Class ini tergantung dengan script saya terdahulu, yaitu Class FError dan Clone Array. Oh ya, hampir lupa tergantung pula dengan Base.js buah karya Dean Edward […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://rindudendam.wordpress.com/2008/06/19/javascript-oop-fdatabase/" rel="external" class="url">Javascript [OOP]: FDatabase « Rindudendam’s Weblog</a></cite></li> 
      <li>Posted: <time datetime="2008-06-19T11:44:24+00:00">2008/06/19 11:44 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment309043" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>184</p> 
    <p>[…] inheritance pattern to simplify subclassing (you could use a fancier one like Dean Edward’s Base, or manipulate prototypes […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://youngisrael-stl.org/wordpress/2008/08/13/extending-jquery-ui-widgets-revisited/" rel="external" class="url">Hacking at 0300 » Extending jQuery UI Widgets Revisited</a></cite></li> 
      <li>Posted: <time datetime="2008-08-14T04:23:24+00:00">2008/08/14 4:23 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment309593" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>185</p> 
    <p>[…] ??????????? ????? ????? =): ??? ?????????? ? Prototype.js ? ? Base2. ? ????? ???????? ?????? ??????? “??????” ????? […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://vingrad.ru/blogs/covex/2008/08/15/klassyi-v-js-vyizov-metodov-roditelskogo-klassa/" rel="external" class="url">?????? ????????? » Blog Archive » “??????” ? JS: ????? ??????? ????????????? ??????</a></cite></li> 
      <li>Posted: <time datetime="2008-08-15T22:38:39+00:00">2008/08/15 10:38 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment320865" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>186</p> 
    <p>[…] A Base Class for JavaScript Inheritance – Dean Edwards […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://www.robertnyman.com/2008/10/06/javascript-inheritance-how-and-why/" rel="external" class="url">JavaScript inheritance - how and why - Robert’s talk - Web development and Internet trends</a></cite></li> 
      <li>Posted: <time datetime="2008-10-05T23:07:42+00:00">2008/10/05 11:07 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment321896"> 
    <p class="permalink"> <a href="#comment321896" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>187</a> </p> 
    <p>Interestingly I notice orders of magnitude difference in speed between your current version (1.1 and an older version 1.0.1) if you do not use the <b>new</b> keyword when creating objects.</p> 
    <p>I ran some speed differences between the two testing object creation:</p> 
    <pre>
for (var i=0; i&lt;10000; i++)
{
	var cir = Circle(50,50,5);
}
</pre> 
    <p>Results:</p> 
    <pre>Base version	1.0.1		1.1
Timings per browser (in ms)
Firefox 3.0.3		280		910
IE 7			640		844
Opera 9.52		60		250
Safai	3.1.2		125		313
Chrome			265		509</pre> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>ChrisB</cite></li> 
      <li>Posted: <time datetime="2008-10-09T17:34:35+00:00">2008/10/09 5:34 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment329169"> 
    <p class="permalink"> <a href="#comment329169" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>188</a> </p> 
    <p>Brilliant resource you have on this site! Simply magnificent! I have now bookmarked this page and also subscribed to your RSS.</p> 
    <p>You are a great ‘teacher’</p> 
    <p>Evans <a href="http://www.jroller.com/evans">http://www.jroller.com/evans</a> </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://www.jroller.com/evans" rel="external" class="url">Evans</a></cite></li> 
      <li>Posted: <time datetime="2008-11-05T15:21:50+00:00">2008/11/05 3:21 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment343713"> 
    <p class="permalink"> <a href="#comment343713" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>189</a> </p> 
    <p>Dean, You enlightened me. Great thank you! </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Semion</cite></li> 
      <li>Posted: <time datetime="2009-01-08T05:35:57+00:00">2009/01/08 5:35 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment346159"> 
    <p class="permalink"> <a href="#comment346159" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>190</a> </p> 
    <p>Dean,</p> 
    <p>I was trying to create a single instance class by copying your example (although I changed Math to Math2 since Math already exists) and I receive the following error:</p> 
    <p>constructor is null.</p> 
    <p>Has anyone else had this problem?</p> 
    <p>I tried creating my own object as well and had the same problem. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Bryan Deemer</cite></li> 
      <li>Posted: <time datetime="2009-01-21T14:48:38+00:00">2009/01/21 2:48 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment347007"> 
    <p class="permalink"> <a href="#comment347007" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>191</a> </p> 
    <p>Dean, the link to the Base.js file is pointing to your old .name domain. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Scott McMillin</cite></li> 
      <li>Posted: <time datetime="2009-03-31T16:28:31+00:00">2009/03/31 4:28 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment355776" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>192</p> 
    <p>[…] A Base Class for JavaScript Inheritance – Dean Edwards […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://www.serkankonakci.com/2009/07/07/javascript-inheritance/" rel="external" class="url">Ipuclarim » Blog Archive » JavaScript inheritance</a></cite></li> 
      <li>Posted: <time datetime="2009-07-07T21:31:14+00:00">2009/07/07 9:31 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment363475"> 
    <p class="permalink"> <a href="#comment363475" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>193</a> </p> 
    <p>i am no expert in javascript…</p> 
    <p>i am doing a video gallery with flowplayer flash file… it comes with a javascript. My mark-up shows these line:</p> 
    <p> $(function() {</p> 
    <p> // setup player $f(“player”, “swf/flowplayer-3.1.4.swf”, {</p> 
    <p> clip: {baseUrl: ‘http://blip.tv/file/get’}</p> 
    <p> // playlist plugin }).playlist(“#playlist”);</p> 
    <p>}); </p> 
    <p>my problem is, i have my flv files and it doesn’t show in the player container since it has a base URL for the flv clips… i won’t use that URL… how can I override that? </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Roberto Mar</cite></li> 
      <li>Posted: <time datetime="2009-10-20T21:09:56+00:00">2009/10/20 9:09 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment363969" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>194</p> 
    <p>[…] Base-Klasse von Dean Edwards kümmerte sich um […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://blog.nothing.ch/2008/03/javascript-libraries-revisited/" rel="external" class="url">nothing blog from outer space : JavaScript libraries revisited</a></cite></li> 
      <li>Posted: <time datetime="2009-10-29T11:35:26+00:00">2009/10/29 11:35 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment369761" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>195</p> 
    <p>[…] Base […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://js4design.com/ie7-js-ce-n%e2%80%99est-pas-de-la-magie-c%e2%80%99est-de-la-technologie-682" rel="external" class="url">IE7.js : ce n’est pas de la magie, c’est de la technologie !</a></cite></li> 
      <li>Posted: <time datetime="2010-03-26T16:42:21+00:00">2010/03/26 4:42 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment369926"> 
    <p class="permalink"> <a href="#comment369926" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>196</a> </p> 
    <p>Hi Dean,</p> 
    <p>I did not find any mentions of the changes concerning “Single Instance” functionality in follow-ups to this post (I believe there were two of them since this original post). But it seems this special handling of the constructor: null which is described above was removed at some point along the way. And it did not make it into base2 variant either. At least currently the code does not produce “static class” as it is mentioned in some comment above, just ordinary class with instance members which cannot be instantiated because it throws an exception on attempt to create an instance. </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Alexei</cite></li> 
      <li>Posted: <time datetime="2010-04-09T13:45:12+00:00">2010/04/09 1:45 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment374977" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>197</p> 
    <p>[…] proof of concept. A big change was needed and while I had considered using a small library like Dean Edward’s Base or John Resig’s Simple JavaScript Inheritance pattern to add class-based inheritance to […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://www.yuiblog.com/blog/2010/10/27/jquery-and-yui-3-a-tale-of-two-javascript-libraries/" rel="external" class="url">jQuery and YUI 3: A Tale of Two JavaScript Libraries » Yahoo! User Interface Blog (YUIBlog)</a></cite></li> 
      <li>Posted: <time datetime="2010-10-27T23:12:22+00:00">2010/10/27 11:12 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment375722" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>198</p> 
    <p>[…] that Base.js also supports class methods and Resig's code is a tiny bit shorter.Base.js: <a href="http://dean.edwards.name/weblog/" rel="nofollow">http://dean.edwards.name/weblog/</a>…Simple JS Inheritance: <a href="http://ejohn.org/blog/simple-jav" rel="nofollow">http://ejohn.org/blog/simple-jav</a>…Your code in either case ends up looking […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://www.quora.com/How-do-you-implement-object-orientation-in-JavaScript#ans179672" rel="external" class="url">How do you implement object orientation in JavaScript? - Quora</a></cite></li> 
      <li>Posted: <time datetime="2010-12-14T08:56:00+00:00">2010/12/14 8:56 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment375730" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>199</p> 
    <p>[…] Don’t search any more: Dean Edwards: A Base Class for JavaScript Inheritance […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://savetimeon.com/blog/how-to-shorten-javascript-oop-syntax/" rel="external" class="url">How to shorten javascript OOP syntax | Savetime On</a></cite></li> 
      <li>Posted: <time datetime="2010-12-14T22:11:21+00:00">2010/12/14 10:11 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment376654" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>200</p> 
    <p>[…] of the biggest advantages we’ve gained is by incorporating base.js. It’s been a major part of all of our mobile […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://e2eapps.com/2011/01/24/simple-table-using-base-js-with-titanium/" rel="external" class="url">End to End Apps (previously Zuercher Technologies) – we build awesome iPhone, Android and iPad applications – Simple table using base.js with Titanium</a></cite></li> 
      <li>Posted: <time datetime="2011-01-24T21:33:29+00:00">2011/01/24 9:33 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment376981" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>201</p> 
    <p>[…] was invented. From Crock’s explanation on prototypal inheritance to Dean’s Base one and two, from Prototype’s Class to Mootool’s Class, and from debunking objects to […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://www.dustindiaz.com/klass/" rel="external" class="url">Klass</a></cite></li> 
      <li>Posted: <time datetime="2011-03-09T08:58:20+00:00">2011/03/09 8:58 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment377193"> 
    <p class="permalink"> <a href="#comment377193" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>202</a> </p> 
    <p>I’m playing around with using this in the module pattern. Are there any drawbacks to doing the following?</p> 
    <pre class="javascript">
Namespace.Class1 = (function() {
	var test = "test";

	function getTest() {
		console.log(test);
	}

	// reveal public/inheritable methods
	return Base.extend({
		getTest: getTest
	});
}());

Namespace.Class2 = (function() {
	var anotherTest = "anotherTest";

	function getAnotherTest() {
		console.log(anotherTest);
	}

        // inherit, override, reveal
	return Namespace.Class1.extend({
		getAnotherTest: getAnotherTest,

		// OVERRIDES
		getTest: function() {
			this.base();
			console.log("This is getTest override");
		}
	});
}());
</pre> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Brett</cite></li> 
      <li>Posted: <time datetime="2011-04-03T16:08:20+00:00">2011/04/03 4:08 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment377218" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>203</p> 
    <p>[…] Base Class for JavaScript Inheritance (&nbsp;http://dean.edwards.name/weblog/2006/03/base/ […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://blog.patricktresp.de/2011/04/ffk11-beyondtellerrand-review/" rel="external" class="url">FFK11 / beyondtellerrand review | Actionscript Programmierer . Patrick Tresp</a></cite></li> 
      <li>Posted: <time datetime="2011-04-08T11:56:52+00:00">2011/04/08 11:56 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment377273" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>204</p> 
    <p>[…] as small scripts (say less than 5kb of code) for handling very specific tasks from templating to inheritance to animation. With the common JavaScript frameworks increasing in size with every release people […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://asyncjs.com/23-micro-frameworks/" rel="external" class="url">#23: Micro Frameworks | Async</a></cite></li> 
      <li>Posted: <time datetime="2011-04-23T10:39:42+00:00">2011/04/23 10:39 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment377455" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>205</p> 
    <p>[…] while I am well aware that the web is filled with various implementations of classical (i.e. class-based) object orientation in JavaScript, I can not help […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://valeriu.palos.ro/1076/a-simpler-approach-for-class-based-oop-in-javascript/" rel="external" class="url">valeriu.palos.ro » Blog Archive » A simple(r) approach for class-based OOP in JavaScript</a></cite></li> 
      <li>Posted: <time datetime="2011-06-18T18:29:27+00:00">2011/06/18 6:29 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment377821"> 
    <p class="permalink"> <a href="#comment377821" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>206</a> </p> 
    <p>I’ve just finished writing yet another class inheritance library called <a href="http://www.thomasfrank.se/klass">klass.js</a>.</p> 
    <p>It supports public, protected and private methods, auto-creation of getters and setters, abstract classes and methods, final methods, static members, multiple inheritance and calls to super…</p> 
    <p>Curious to know what you think about it…</p> 
    <p>Some example syntax: </p> 
    <pre class="javascript">
// Class definitions
var Animal = klass (function Animal(){
  _public (move, bite);
  var name;
  var _constructor = function(n){
    name = n
  };
  var move = function(meters){
    alert (name + ' moved ' + meters + 'm.')
  };
  var bite = function(){
    alert (name + ' bites!');
  };
});

var Snake = klass (function Snake(){
  _extends (Animal);
  var move = function(){
    alert ('Slithering');
    _super (5);
  };
  var bite = function(){
    alert(name + ' attacks with a venomous bite!');
   };
});

var Horse = klass (function Horse(){
  _extends (Animal);
  var move = function(){
    alert ('Galloping');
    _super (45);
  };
});

// Create some instances and call their methods
var sam = new Snake ('Sammy the Python');
var tom = new Horse ('Tommy the Palomino');
sam.move();
sam.bite();
tom.move();
tom.bite();
</pre> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://www.thomasfrank.se" rel="external" class="url">Thomas Frank</a></cite></li> 
      <li>Posted: <time datetime="2011-08-21T12:32:10+00:00">2011/08/21 12:32 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment378014"> 
    <p class="permalink"> <a href="#comment378014" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>207</a> </p> 
    <p>I’m trying to make private functions with Base.js, but they doesn’t work as expected (it’s obviously my fault!) ’cause I wrote something like:</p> 
    <pre class="javascript">
var MyChild = MyParent.extend({
    /**
     * @constructor
     * @param params
     */
    constructor:function(params){
        this.base(params);
        function myPrivateFunction(name){
            return "Hello ".concat(name);
        }
    },
    myPublicFunction:function(name){
    	return myPrivateFunction(name);
    }
}</pre> 
    <p>can you give an advice, please?</p> 
    <p>@Thomas I read your post it’s very interesting! I’ll try to use it asap and I’ll give you a feedback, thanks! </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Matteo Traina</cite></li> 
      <li>Posted: <time datetime="2011-09-22T11:52:52+00:00">2011/09/22 11:52 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment378077" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>208</p> 
    <p>[…] to forcing JavaScript inheritance to behave like other, more natively-OOP languages, from Dean Edwards Base.js, to John Resig's take on it, to the approaches used by Prototype.js and MooTools (my personal […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://upshots.org/javascript/really-simple-javascript-inheritance" rel="external" class="url">(Really) Simple JavaScript Inheritance | upshots.org</a></cite></li> 
      <li>Posted: <time datetime="2011-10-06T13:48:53+00:00">2011/10/06 1:48 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment378628" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>209</p> 
    <p>[…] base by dean edwards […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://mlwmlw.no-ip.org/2011/12/javascript-prototype/" rel="external" class="url">javascript prototype | ?????</a></cite></li> 
      <li>Posted: <time datetime="2011-12-25T16:08:32+00:00">2011/12/25 4:08 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment378725" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>210</p> 
    <p>[…] […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://www.examplejs.com/?p=45" rel="external" class="url">Use Prototypes… and I Don’t Mean the Framework | JavaScript Examples</a></cite></li> 
      <li>Posted: <time datetime="2012-02-13T04:31:15+00:00">2012/02/13 4:31 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment378737" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>211</p> 
    <p>[…] to develop a rather complex JavaScript tool. Although I need functionality like AJAX and preferably OOP-like inheritance, I do not want to decide on a library like jQuery or Prototype in favor of the user (here: website […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://fatal-errors.com/javascript-tool-without-3rd-party-library/91335" rel="external" class="url">JavaScript tool without 3rd party library</a></cite></li> 
      <li>Posted: <time datetime="2012-02-21T10:49:17+00:00">2012/02/21 10:49 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment378773" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>212</p> 
    <p>[…] <a href="http://dean.edwards.name/weblog/2006/03/base/" rel="nofollow">http://dean.edwards.name/weblog/2006/03/base/</a> […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://blog.njoubert.com/2012/03/a-partial-review-of-object-oriented-javascript.html" rel="external" class="url">EECS from the Trenches » Blog Archive » A Partial Review of Object Oriented Javascript</a></cite></li> 
      <li>Posted: <time datetime="2012-03-07T08:21:17+00:00">2012/03/07 8:21 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment378777" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>213</p> 
    <p>[…] because two properties can’t have the same name (color in the above example) under strict mode. While this seems like a glaring error, in some cases such as a mistake is not necessary easy to spot if the object literal is huge. This is a typical situation when you use various frameworks to implement an object using class-like construct. […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://ariya.ofilabs.com/2012/03/strict-mode-checks-with-esprima.html" rel="external" class="url">Strict mode checks with Esprima | don't code today</a></cite></li> 
      <li>Posted: <time datetime="2012-03-07T15:43:22+00:00">2012/03/07 3:43 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment378961" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>214</p> 
    <p>[…] <a href="http://dean.edwards.name/weblog/2006/03/base/" rel="nofollow">http://dean.edwards.name/weblog/2006/03/base/</a> […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://www.dkphp.com/questions-2/javascript-inheritance-of-arguments-and-functions.html" rel="external" class="url">Javascript Inheritance of arguments and functions | PHP Developer Resource</a></cite></li> 
      <li>Posted: <time datetime="2012-05-24T05:15:41+00:00">2012/05/24 5:15 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment379235"> 
    <p class="permalink"> <a href="#comment379235" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>215</a> </p> 
    <p>Great work you have here.<img src="http://dean.edwards.name/weblog/wp-includes/images/smilies/icon_biggrin.gif" alt=":D" class="wp-smiley" style="height: 1em; max-height: 1em;"> Is there a way to make factory methods on the class? </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Vann</cite></li> 
      <li>Posted: <time datetime="2012-09-19T08:24:51+00:00">2012/09/19 8:24 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment379246"> 
    <p class="permalink"> <a href="#comment379246" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>216</a> </p> 
    <p>Good work Dean. </p> 
    <p>Is there any way to define private variables? And can you explain a little about how to use implement method.</p> 
    <p>Thanks in advance<img src="http://dean.edwards.name/weblog/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;"> </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>young</cite></li> 
      <li>Posted: <time datetime="2012-09-28T18:35:43+00:00">2012/09/28 6:35 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment379385"> 
    <p class="permalink"> <a href="#comment379385" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>217</a> </p> 
    <p>I tryed to make protected datas with Base.js. But it was necessary to modify Base.js slightly.</p> 
    <p>Base.js line 30, and after line 31.</p> 
    <pre class="javascript">
// create the wrapper for the constructor function
//var constructor = proto.constructor.valueOf(); //-dean
var constructor = proto.constructor;
var klass = proto.constructor = function() {
	if (!Base._prototyping) {
		if (this._constructing || this.constructor == klass) { // instantiation
			this._constructing = true;
			var ret = constructor.apply(this, arguments);	// Catch the result.
			delete this._constructing;
			return ret;				// Return the result
		} else if (arguments[0] != null) { // casting
			return (arguments[0].extend || extend).call(arguments[0], proto);
		}
	}
};
</pre> 
    <p>Example: use protected datas.</p> 
    <pre class="javascript">

function createValueAccessor(initial_value) {
	var currentValue = initial_value;
	return function(newValue) {
		if (arguments.length == 0) return currentValue;
		else return currentValue = newValue;
	};
}

var Foo = Base.extend({
	constructor: function() {

		// Define protected datas
		var protected_a = createValueAccessor(100);
		var protected_b = createValueAccessor(200);

		this.extend({
			printA: function() {
				alert(protected_a());
			},
			printB: function() {
				alert(protected_b());
			}
		});

		return {
			protected_a: protected_a,
			protected_b: protected_b
		};
	}
});

var Bar = Foo.extend({
	constructor: function() {
		var base = this.base();

		this.extend({
			print: function() {
				// Use protected datas
				alert(base.protected_a() + base.protected_b());
			}
		});
	}
});

var bar = new Bar();
bar.print();	// -&gt; "300"
</pre> 
    <p>How about this? </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite><a href="http://sukobuto.com" rel="external" class="url">Kenta</a></cite></li> 
      <li>Posted: <time datetime="2012-11-17T15:25:26+00:00">2012/11/17 3:25 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment381286"> 
    <p class="permalink"> <a href="#comment381286" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>218</a> </p> 
    <p>Hi Dean,</p> 
    <p>I have bookmarked this page as it is a bit of history. The modern JS framework MooTools is partly inspired by this post of yours from 2006.</p> 
    <p>Cheers, Thatch </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Thatch</cite></li> 
      <li>Posted: <time datetime="2013-10-20T15:01:11+00:00">2013/10/20 3:01 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment381716" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>219</p> 
    <p>[…] as full documentation. I should also give a shout out to Dean Edwards for his JavaScript library Base, which is very awesome and I have used as the base for the […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://www.selotori.co.uk/2013/12/iplib-js-an-ip-address-library-for-javascript/" rel="external" class="url">iplib.js – An IP Address library for JavaScript | Programming Considered Harmful</a></cite></li> 
      <li>Posted: <time datetime="2013-12-08T21:45:40+00:00">2013/12/08 9:45 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment381737" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>220</p> 
    <p>[…] part of it here (after, if you’re interested in finding out more, check out out his site for a&nbsp;few posts&nbsp;about […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://ajwebdesigner.in/blog/oop-in-javascript-part3/" rel="external" class="url">OOP in JavaScript PART3 | AJ Web Designer</a></cite></li> 
      <li>Posted: <time datetime="2013-12-10T14:15:34+00:00">2013/12/10 2:15 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment381746"> 
    <p class="permalink"> <a href="#comment381746" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>221</a> </p> 
    <p>So is there no way to define a singleton using the Base code? </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Mike</cite></li> 
      <li>Posted: <time datetime="2013-12-12T16:21:06+00:00">2013/12/12 4:21 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment381781" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>222</p> 
    <p>[…] A Base Class for JavaScript Inheritance?JS ?? Dean Edwards ??? Base.js? […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://www.360us.net/archives/125" rel="external" class="url">????????? JavaScript - 360</a></cite></li> 
      <li>Posted: <time datetime="2013-12-19T14:45:11+00:00">2013/12/19 2:45 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment385340" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>223</p> 
    <p>[…] I would take a look at YUI, and at Dean Edward’s Base library: <a href="http://dean.edwards.name/weblog/2006/03/base/" rel="nofollow">http://dean.edwards.name/weblog/2006/03/base/</a> […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://dexpage.com/good-example-of-javascripts-prototype-based-inheritance/" rel="external" class="url">Good Example of JavaScript's Prototype-Based Inheritance - DexPage</a></cite></li> 
      <li>Posted: <time datetime="2015-07-06T06:35:40+00:00">2015/07/06 6:35 am</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment385579"> 
    <p class="permalink"> <a href="#comment385579" rel="bookmark" title="Permanent link to this comment"> <span>Comment: #</span>224</a> </p> 
    <p>I have inherited code that uses your code. I have the job of unit testing the code. Everything works fine. What I am having trouble with is spying on the call this.base, as I have already tested the base code and don’t want to have to test it again for each method that calls this.base. Do you have any suggestions? </p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Comment by: <cite>Chris</cite></li> 
      <li>Posted: <time datetime="2015-11-17T14:30:53+00:00">2015/11/17 2:30 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <article id="comment385819" class="trackback"> 
    <p class="permalink"> <span>Comment: #</span>225</p> 
    <p>[…] Dean Edwards – A Base Class for JavaScript Inheritance <a href="http://dean.edwards.name/weblog/2006/03/base/" rel="nofollow">http://dean.edwards.name/weblog/2006/03/base/</a> Prototype <a href="http://www.prototypejs.org/learn/class-inheritance" rel="nofollow">http://www.prototypejs.org/learn/class-inheritance</a> Mootools […]</p> 
    <footer> 
     <ul class="meta"> 
      <li class="author">Pingback by: <cite><a href="http://www.mekau.com/index.php/uncategory/pandy_1436.html" rel="external" class="url">JavaScript???? - ????</a></cite></li> 
      <li>Posted: <time datetime="2016-07-16T13:11:10+00:00">2016/07/16 1:11 pm</time></li> 
     </ul> 
    </footer> 
   </article> 
   <p>Comments are closed.</p> 
  </section> 
  <footer> 
   <p>Copyright © 2004-2017 Dean Edwards. All rights reserved.</p> 
  </footer>   
 </body>
</html>