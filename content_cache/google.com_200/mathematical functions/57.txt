<!doctype html>
<html xmlns:cc="http://creativecommons.org/ns#">
 <head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# medium-com: http://ogp.me/ns/fb/medium-com#">
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Parsing math expressions with JavaScript – freeCodeCamp</title>
  <link rel="canonical" href="https://medium.freecodecamp.org/parsing-math-expressions-with-javascript-7e8f5572276e">
  <meta name="title" content="Parsing math expressions with JavaScript – freeCodeCamp">
  <meta name="referrer" content="unsafe-url">
  <meta name="description" content="A while ago, I wrote about tokenizing a math expression, with Javascript as the language of choice. The tokenizer I built in that article was the first component of my quest to render and solve math…">
  <meta name="theme-color" content="#000000">
  <meta property="og:title" content="Parsing math expressions with JavaScript – freeCodeCamp">
  <meta property="og:url" content="https://medium.freecodecamp.org/parsing-math-expressions-with-javascript-7e8f5572276e">
  <meta property="og:image" content="https://cdn-images-1.medium.com/max/1200/1*zs_bmXKVXHJQuz0pnsDdqQ.jpeg">
  <meta property="fb:app_id" content="542599432471018">
  <meta property="og:description" content="A while ago, I wrote about tokenizing a math expression, with Javascript as the language of choice. The tokenizer I built in that article…">
  <meta name="twitter:description" content="A while ago, I wrote about tokenizing a math expression, with Javascript as the language of choice. The tokenizer I built in that article…">
  <meta name="twitter:image:src" content="https://cdn-images-1.medium.com/max/1200/1*zs_bmXKVXHJQuz0pnsDdqQ.jpeg">
  <link rel="publisher" href="https://plus.google.com/103654360130207659246">
  <link rel="author" href="https://medium.freecodecamp.org/@shalvah">
  <meta property="author" content="Shalvah A.">
  <meta property="og:type" content="article">
  <meta name="twitter:card" content="summary_large_image">
  <meta property="article:publisher" content="https://www.facebook.com/freecodecamp">
  <meta property="article:author" content="1768257200092722">
  <meta name="robots" content="index, follow">
  <meta property="article:published_time" content="2017-05-22T19:30:07.903Z">
  <meta name="twitter:creator" content="@theshalvah">
  <meta name="twitter:site" content="@freecodecamp">
  <meta property="og:site_name" content="freeCodeCamp">
  <meta name="twitter:label1" value="Reading time">
  <meta name="twitter:data1" value="11 min read">
  <meta name="twitter:app:name:iphone" content="Medium">
  <meta name="twitter:app:id:iphone" content="828256236">
  <meta name="twitter:app:url:iphone" content="medium://p/7e8f5572276e">
  <meta property="al:ios:app_name" content="Medium">
  <meta property="al:ios:app_store_id" content="828256236">
  <meta property="al:android:package" content="com.medium.reader">
  <meta property="al:android:app_name" content="Medium">
  <meta property="al:ios:url" content="medium://p/7e8f5572276e">
  <meta property="al:android:url" content="medium://p/7e8f5572276e">
  <meta property="al:web:url" content="https://medium.freecodecamp.org/parsing-math-expressions-with-javascript-7e8f5572276e">
  <link rel="search" type="application/opensearchdescription+xml" title="Medium" href="/osd.xml">
  <link rel="alternate" href="android-app://com.medium.reader/https/medium.com/p/7e8f5572276e">
  <script type="application/ld+json">{"@context":"http://schema.org","@type":"NewsArticle","image":{"@type":"ImageObject","width":1920,"height":1280,"url":"https://cdn-images-1.medium.com/max/2000/1*zs_bmXKVXHJQuz0pnsDdqQ.jpeg"},"datePublished":"2017-05-22T19:30:07.903Z","dateModified":"2017-10-07T02:07:31.956Z","headline":"Parsing math expressions with JavaScript","name":"Parsing math expressions with JavaScript","keywords":["JavaScript","Tech","Life Lessons","Software Development","Algorithms"],"author":{"@type":"Person","name":"Shalvah A.","url":"https://medium.freecodecamp.org/@shalvah"},"creator":["Shalvah A."],"publisher":{"@type":"Organization","name":"freeCodeCamp","url":"https://medium.freecodecamp.org","logo":{"@type":"ImageObject","width":500,"height":60,"url":"https://cdn-images-1.medium.com/max/1000/1*wViBNJ1o9rM5p6b-gf3vxg.png"}},"mainEntityOfPage":"https://medium.freecodecamp.org/parsing-math-expressions-with-javascript-7e8f5572276e"}</script>
  <link rel="stylesheet" type="text/css" href="https://glyph.medium.com/css/e/sr/latin/e/ssr/latin/e/ssb/latin/m.css">
  <link rel="stylesheet" href="https://cdn-static-1.medium.com/_/fp/css/main-base.qu5Ysm5LyYB5mVHSYnpQ3w.css">
  <script>if (window.top !== window.self) window.top.location = window.self.location.href;var OB_startTime = new Date().getTime(); var OB_loadErrors = []; function _onerror(e) { OB_loadErrors.push(e) }; if (document.addEventListener) document.addEventListener("error", _onerror, true); else if (document.attachEvent) document.attachEvent("onerror", _onerror); function _asyncScript(u) {var d = document, f = d.getElementsByTagName("script")[0], s = d.createElement("script"); s.type = "text/javascript"; s.async = true; s.src = u; f.parentNode.insertBefore(s, f);}function _asyncStyles(u) {var d = document, f = d.getElementsByTagName("script")[0], s = d.createElement("link"); s.rel = "stylesheet"; s.href = u; f.parentNode.insertBefore(s, f); return s}(new Image()).src = "/_/stat?event=pixel.load&origin=" + encodeURIComponent(location.origin);</script>
  <script>window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date; ga("create", "UA-24232453-2", "auto", {"allowLinker": true, "legacyCookieDomain": window.location.hostname}); ga("send", "pageview");ga("create", "UA-55446531-3", "auto", 'tracker0'); ga("tracker0.send", "pageview");</script>
  <script async src="https://www.google-analytics.com/analytics.js"></script>
  <!--[if lt IE 9]><script charset="UTF-8" src="https://cdn-static-1.medium.com/_/fp/js/shiv.RI2ePTZ5gFmMgLzG5bEVAA.js"></script><![endif]-->
  <link rel="icon" href="https://cdn-static-1.medium.com/_/fp/icons/favicon-rebrand-medium.3Y6xpZ-0FSdWDnPM3hSBIA.ico" class="js-favicon">
  <link rel="apple-touch-icon" sizes="152x152" href="https://cdn-images-1.medium.com/fit/c/304/304/1*MotlWcSa2n6FrOx3ul89kw.png">
  <link rel="apple-touch-icon" sizes="120x120" href="https://cdn-images-1.medium.com/fit/c/240/240/1*MotlWcSa2n6FrOx3ul89kw.png">
  <link rel="apple-touch-icon" sizes="76x76" href="https://cdn-images-1.medium.com/fit/c/152/152/1*MotlWcSa2n6FrOx3ul89kw.png">
  <link rel="apple-touch-icon" sizes="60x60" href="https://cdn-images-1.medium.com/fit/c/120/120/1*MotlWcSa2n6FrOx3ul89kw.png">
  <link rel="mask-icon" href="https://cdn-static-1.medium.com/_/fp/icons/monogram-mask.KPLCSFEZviQN0jQ7veN2RQ.svg" color="#171717">
 </head>
 <body itemscope class=" postShowScreen browser-chrome os-windows is-withMagicUnderlines v-glyph v-glyph--m is-noJs">
  <script>document.body.className = document.body.className.replace(/(^|\s)is-noJs(\s|$)/, "$1is-js$2")</script>
  <div class="site-main" id="container">
   <div class="butterBar butterBar--error"></div>
   <div class="surface">
    <div id="prerendered" class="screenContent">
     <canvas class="canvas-renderer"></canvas>
     <div class="container u-maxWidth740 u-xs-margin0 notesPositionContainer js-notesPositionContainer"></div>
     <div class="metabar u-clearfix js-metabar u-boxShadowBottomThinLighter u-textColorTransparentWhiteDarker u-fixed u-backgroundTransparentWhiteDarkest u-xs-sizeFullViewportWidth u-tintBgColor u-tintSpectrum">
      <div class="metabar-inner u-marginAuto u-maxWidth1000 u-flexCenter u-justifyContentSpaceBetween u-paddingLeft20 u-paddingRight20 u-height65 u-xs-height56 js-metabarMiddle">
       <div class="metabar-block u-flex1 u-flexCenter">
        <div class="js-metabarLogoLeft">
         <a href="https://medium.com/" data-log-event="home" class="siteNav-logo u-flexCenter u-paddingTop0"><span class="svgIcon svgIcon--logoMonogram svgIcon--45px is-flushLeft u-textColorDarker">
           <svg class="svgIcon-use" width="45" height="45" viewbox="0 0 45 45">
            <path d="M5 40V5h35v35H5zm8.56-12.627c0 .555-.027.687-.318 1.03l-2.457 2.985v.396h6.974v-.396l-2.456-2.985c-.291-.343-.344-.502-.344-1.03V18.42l6.127 13.364h.714l5.256-13.364v10.644c0 .29 0 .342-.185.528l-1.848 1.796v.396h9.19v-.396l-1.822-1.796c-.184-.186-.21-.238-.21-.528V15.937c0-.291.026-.344.21-.528l1.823-1.797v-.396h-6.471l-4.622 11.542-5.203-11.542h-6.79v.396l2.14 2.64c.239.292.291.37.291.768v10.353z" />
           </svg></span><span class="u-textScreenReader">Homepage</span></a>
        </div>
        <div class="u-alignMiddle u-inlineBlock u-verticalAlignTop u-height65 u-xs-height56 u-marginRight18">
         <div class="u-alignBlock">
          <a class="js-collectionLogoOrName" href="https://medium.freecodecamp.org?source=logo-lo_1a3b00d1e818---336d898217ee"><img height="36" width="300" class="u-paddingTop5" src="https://cdn-images-1.medium.com/letterbox/600/72/50/50/1*wViBNJ1o9rM5p6b-gf3vxg.png?source=logoAvatar-lo_1a3b00d1e818---336d898217ee" alt="freeCodeCamp"></a>
         </div>
        </div>
        <div class="u-alignMiddle u-inlineBlock u-verticalAlignTop u-height65 u-xs-height56 u-xs-hide">
         <div class="u-alignBlock">
          <div class="buttonSet u-lineHeightInherit u-marginLeft0">
           <div class="buttonSet-inner">
            <button class="button button--primary button--smallest button--small u-noUserSelect button--withChrome u-accentColor--buttonNormal js-relationshipButton is-smallPill" data-action="sign-up-prompt" data-sign-in-action="toggle-follow-collection" data-requires-token="true" data-redirect="https://medium.com/_/subscribe/collection/free-code-camp" data-action-source="----336d898217ee----------------------follow_header" data-collection-id="336d898217ee"><span class="button-label  js-buttonLabel">Follow</span></button>
           </div>
           <a class="button button--light button--chromeless is-touchIconBlackPulse u-baseColor--buttonLight button--withIcon button--withSvgIcon" href="https://twitter.com/freecodecamp" title="Visit “freeCodeCamp” on Twitter" aria-label="Visit “freeCodeCamp” on Twitter" rel="me" target="_blank"><span class="button-defaultState"><span class="svgIcon svgIcon--twitterFilled svgIcon--25px">
              <svg class="svgIcon-use" width="25" height="25" viewbox="0 0 25 25">
               <path d="M21.725 5.338c-.744.47-1.605.804-2.513 1.006a3.978 3.978 0 0 0-2.942-1.293c-2.22 0-4.02 1.81-4.02 4.02 0 .32.034.63.07.94-3.31-.18-6.27-1.78-8.255-4.23a4.544 4.544 0 0 0-.574 2.01c.04 1.43.74 2.66 1.8 3.38-.63-.01-1.25-.19-1.79-.5v.08c0 1.93 1.38 3.56 3.23 3.95-.34.07-.7.12-1.07.14-.25-.02-.5-.04-.72-.07.49 1.58 1.97 2.74 3.74 2.8a8.49 8.49 0 0 1-5.02 1.72c-.3-.03-.62-.04-.93-.07A11.447 11.447 0 0 0 8.88 21c7.386 0 11.43-6.13 11.414-11.414.015-.21.01-.38 0-.578a7.604 7.604 0 0 0 2.01-2.08 7.27 7.27 0 0 1-2.297.645 3.856 3.856 0 0 0 1.72-2.23" />
              </svg></span></span></a>
           <a class="button button--light button--chromeless is-touchIconBlackPulse u-baseColor--buttonLight button--withIcon button--withSvgIcon u-paddingLeft0" href="//facebook.com/freecodecamp" title="Visit “freeCodeCamp” on Facebook" aria-label="Visit “freeCodeCamp” on Facebook" rel="me" target="_blank"><span class="button-defaultState"><span class="svgIcon svgIcon--facebookFilled svgIcon--25px">
              <svg class="svgIcon-use" width="25" height="25" viewbox="0 0 25 25">
               <path d="M21 12.646C21 7.65 16.97 3.6 12 3.6s-9 4.05-9 9.046a9.026 9.026 0 0 0 7.59 8.924v-6.376H8.395V12.64h2.193v-1.88c0-2.186 1.328-3.375 3.267-3.375.93 0 1.728.07 1.96.1V9.77H14.47c-1.055 0-1.26.503-1.26 1.242v1.63h2.517l-.33 2.554H13.21V21.6c4.398-.597 7.79-4.373 7.79-8.954" />
              </svg></span></span></a>
          </div>
         </div>
        </div>
       </div>
       <div class="metabar-block u-flex0 u-flexCenter">
        <div class="u-alignMiddle u-inlineBlock u-verticalAlignTop u-height65 u-xs-height56">
         <div class="u-alignBlock">
          <div class="buttonSet u-lineHeightInherit u-block u-margin0 u-flexCenter">
           <a class="button button--primary button--light button--chromeless u-accentColor--buttonNormal is-inSiteNavBar js-signUpButton" href="https://medium.com/m/signin?redirect=https%3A%2F%2Fmedium.freecodecamp.org%2Fparsing-math-expressions-with-javascript-7e8f5572276e&amp;source=--------------------------nav_reg">Sign in / Sign up</a>
          </div>
         </div>
        </div>
       </div>
       <div class="u-absolute u-sizeFullWidth u-top0 u-right0 u-textAlignCenter js-metabarLogoCentered u-hide">
        <a href="https://medium.com/" data-log-event="home" class="siteNav-logo u-flexCenter u-paddingTop0"><span class="svgIcon svgIcon--logoMonogram svgIcon--45px is-flushLeft u-textColorDarker">
          <svg class="svgIcon-use" width="45" height="45" viewbox="0 0 45 45">
           <path d="M5 40V5h35v35H5zm8.56-12.627c0 .555-.027.687-.318 1.03l-2.457 2.985v.396h6.974v-.396l-2.456-2.985c-.291-.343-.344-.502-.344-1.03V18.42l6.127 13.364h.714l5.256-13.364v10.644c0 .29 0 .342-.185.528l-1.848 1.796v.396h9.19v-.396l-1.822-1.796c-.184-.186-.21-.238-.21-.528V15.937c0-.291.026-.344.21-.528l1.823-1.797v-.396h-6.471l-4.622 11.542-5.203-11.542h-6.79v.396l2.14 2.64c.239.292.291.37.291.768v10.353z" />
          </svg></span><span class="u-textScreenReader">Homepage</span></a>
       </div>
      </div>
      <div class="metabar-inner u-marginAuto u-maxWidth1000 js-metabarBottom">
       <nav role="navigation" class="metabar-block metabar-block--below u-overflowHiddenY u-height40">
        <ul class="u-textAlignLeft u-noWrap u-overflowX js-collectionNavItems u-sm-paddingLeft20 u-sm-paddingRight20">
         <li class="metabar-navItem js-collectionNavItem u-uiTextMedium u-fontSize14 u-inlineBlock u-textUppercase u-letterSpacing003 u-textColorNormal u-xs-paddingRight12 u-xs-marginRight0 u-paddingTop5 u-xs-paddingTop10"><a class="link link--darken u-accentColor--textDarken js-homeNav u-baseColor--link" href="https://medium.freecodecamp.org">Home</a></li>
         <li class="metabar-navItem js-collectionNavItem  u-uiTextMedium u-fontSize14 u-inlineBlock u-textUppercase u-letterSpacing003 u-textColorNormal u-xs-paddingRight12 u-xs-marginRight0 u-paddingTop5 u-xs-paddingTop10"><a class="link link--darken u-accentColor--textDarken link--noUnderline js-navItemLink u-baseColor--link" href="https://medium.freecodecamp.org/tagged/web-development">Dev</a></li>
         <li class="metabar-navItem js-collectionNavItem  u-uiTextMedium u-fontSize14 u-inlineBlock u-textUppercase u-letterSpacing003 u-textColorNormal u-xs-paddingRight12 u-xs-marginRight0 u-paddingTop5 u-xs-paddingTop10"><a class="link link--darken u-accentColor--textDarken link--noUnderline js-navItemLink u-baseColor--link" href="https://medium.freecodecamp.org/tagged/design">Design</a></li>
         <li class="metabar-navItem js-collectionNavItem  u-uiTextMedium u-fontSize14 u-inlineBlock u-textUppercase u-letterSpacing003 u-textColorNormal u-xs-paddingRight12 u-xs-marginRight0 u-paddingTop5 u-xs-paddingTop10"><a class="link link--darken u-accentColor--textDarken link--noUnderline js-navItemLink u-baseColor--link" href="https://medium.freecodecamp.org/tagged/data-science">Data</a></li>
         <span class="u-borderLeft1 u-paddingLeft22 u-xs-paddingLeft12 u-baseColor--borderLight"></span>
         <li class="metabar-navItem js-collectionNavItem  is-external u-uiTextMedium u-fontSize14 u-inlineBlock u-textUppercase u-letterSpacing003 u-textColorNormal u-xs-paddingRight12 u-xs-marginRight0 u-paddingTop5 u-xs-paddingTop10"><a class="link link--darkenOnHover u-accentColor--textDarken link--noUnderline js-navItemLink u-baseColor--link" href="https://freecodecamp.com?ref=mn" rel="nofollow noopener" target="_blank">Learn to code for free</a></li>
         <li class="metabar-navItem js-collectionNavItem u-uiTextMedium u-fontSize14 u-inlineBlock u-textUppercase u-letterSpacing003 u-textColorNormal u-xs-paddingRight12 u-xs-marginRight0 u-paddingTop5 u-xs-paddingTop10"><a class="button button--chromeless u-baseColor--buttonNormal button--withIcon button--withSvgIcon u-top1" href="https://medium.freecodecamp.org/search" title="Search" aria-label="Search"><span class="button-defaultState"><span class="svgIcon svgIcon--search svgIcon--25px">
             <svg class="svgIcon-use" width="25" height="25" viewbox="0 0 25 25">
              <path d="M20.067 18.933l-4.157-4.157a6 6 0 1 0-.884.884l4.157 4.157a.624.624 0 1 0 .884-.884zM6.5 11c0-2.62 2.13-4.75 4.75-4.75S16 8.38 16 11s-2.13 4.75-4.75 4.75S6.5 13.62 6.5 11z" />
             </svg></span></span></a></li>
        </ul>
       </nav>
      </div>
     </div>
     <div class="metabar metabar--spacer js-metabarSpacer u-tintBgColor  u-height105 u-xs-height95"></div>
     <main role="main">
      <article class=" u-minHeight100vhOffset65 u-overflowHidden postArticle postArticle--full is-withAccentColors u-marginBottom40" lang="en">
       <header class="container u-maxWidth740">
        <div class="uiScale uiScale-ui--regular uiScale-caption--regular postMetaHeader u-paddingBottom10 row">
         <div class="col u-size12of12 js-postMetaLockup">
          <div class="uiScale uiScale-ui--regular uiScale-caption--regular postMetaLockup postMetaLockup--authorWithBio u-flex js-postMetaLockup">
           <div class="u-flex0">
            <a class="link avatar u-baseColor--link" href="https://medium.freecodecamp.org/@shalvah?source=post_header_lockup" data-action="show-user-card" data-action-source="post_header_lockup" data-action-value="6c2442a0e7f7" data-action-type="hover" data-user-id="6c2442a0e7f7" data-collection-slug="free-code-camp" dir="auto"><img src="https://cdn-images-1.medium.com/fit/c/120/120/1*FCiNhJYh7H9oDbPq7w5V6A.jpeg" class="avatar-image avatar-image--small" alt="Go to the profile of Shalvah A."></a>
           </div>
           <div class="u-flex1 u-paddingLeft15 u-overflowHidden">
            <a class="link ui-captionStrong link link--darken link--darker u-baseColor--link" href="https://medium.freecodecamp.org/@shalvah?source=post_header_lockup" data-action="show-user-card" data-action-source="post_header_lockup" data-action-value="6c2442a0e7f7" data-action-type="hover" data-user-id="6c2442a0e7f7" data-collection-slug="free-code-camp" dir="auto">Shalvah A.</a>
            <span class="followState js-followState" data-user-id="6c2442a0e7f7"><button class="button button--smallest u-noUserSelect button--withChrome u-baseColor--buttonNormal button--withHover button--unblock js-unblockButton u-marginLeft10 u-marginTopNegative2 u-xs-hide" data-action="sign-up-prompt" data-sign-in-action="toggle-block-user" data-requires-token="true" data-redirect="https://medium.freecodecamp.org/parsing-math-expressions-with-javascript-7e8f5572276e" data-action-source="post_header_lockup"><span class="button-label  button-defaultState">Blocked</span><span class="button-label button-hoverState">Unblock</span></button><button class="button button--primary button--smallest u-noUserSelect button--withChrome u-accentColor--buttonNormal button--follow js-followButton u-marginLeft10 u-marginTopNegative2 u-xs-hide" data-action="sign-up-prompt" data-sign-in-action="toggle-subscribe-user" data-requires-token="true" data-redirect="https://medium.com/_/subscribe/user/6c2442a0e7f7" data-action-source="post_header_lockup-6c2442a0e7f7-------------------------follow_byline"><span class="button-label  button-defaultState js-buttonLabel">Follow</span><span class="button-label button-activeState">Following</span></button></span>
            <div class="ui-caption postMetaInline u-noWrapWithEllipsis u-xs-normalWrap u-xs-lineClamp2 u-xs-maxHeight2LineHeightBase">
             Learning. Building. Believing. Software Engineer. UX Enthusiast. Introspective. A branch trying to abide.
            </div>
            <div class="ui-caption postMetaInline js-testPostMetaInlineSupplemental">
             <time datetime="2017-05-22T19:30:07.903Z">May 22</time>
             <span class="middotDivider u-fontSize12"></span>
             <span class="readingTime" title="11 min read"></span>
            </div>
           </div>
          </div>
         </div>
        </div>
       </header>
       <div class="postArticle-content js-postField js-notesSource js-trackedPost" data-post-id="7e8f5572276e" data-source="post_page" data-collection-id="336d898217ee" data-tracking-context="postPage">
        <section name="2f1d" class="section section--body section--first section--last">
         <div class="section-divider">
          <hr class="section-divider">
         </div>
         <div class="section-content">
          <div class="section-inner sectionLayout--insetColumn">
           <h1 name="59de" id="59de" class="graf graf--h3 graf--leading graf--title">Parsing math expressions with JavaScript</h1>
          </div>
          <div class="section-inner sectionLayout--fullWidth">
           <figure name="3674" id="3674" class="graf graf--figure graf--layoutFillWidth graf-after--h3">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 66.7%;"></div>
             <div class="progressiveMedia js-progressiveMedia graf-image" data-image-id="1*zs_bmXKVXHJQuz0pnsDdqQ.jpeg" data-width="4272" data-height="2848">
              <img src="https://cdn-images-1.medium.com/freeze/max/60/1*zs_bmXKVXHJQuz0pnsDdqQ.jpeg?q=20" crossorigin="anonymous" class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail">
              <canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas>
              <img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/2000/1*zs_bmXKVXHJQuz0pnsDdqQ.jpeg">
              <noscript class="js-progressiveMedia-inner">
               <img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/2000/1*zs_bmXKVXHJQuz0pnsDdqQ.jpeg">
              </noscript>
             </div>
            </div>
           </figure>
          </div>
          <div class="section-inner sectionLayout--insetColumn">
           <p name="996d" id="996d" class="graf graf--p graf-after--figure">A while ago, I wrote about <a href="https://medium.freecodecamp.com/how-to-build-a-math-expression-tokenizer-using-javascript-3638d4e5fbe9" data-href="https://medium.freecodecamp.com/how-to-build-a-math-expression-tokenizer-using-javascript-3638d4e5fbe9" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">tokenizing a math expression,</a> with Javascript as the language of choice. The tokenizer I built in that article was the first component of my quest to render and solve math expressions using Javascript, or any other language. In this article, I’ll walk through how to build the next component: the parser.</p>
           <p name="322e" id="322e" class="graf graf--p graf-after--p">What is the job of the parser? Quite simple. It parses the expression. (Duh.) Okay, actually, <a href="https://en.wikipedia.org/wiki/Parsing#Parser" data-href="https://en.wikipedia.org/wiki/Parsing#Parser" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">Wikipedia </a>has a good answer:</p>
           <blockquote name="1ea2" id="1ea2" class="graf graf--pullquote graf-after--p">
            A parser is a software component that takes input data (frequently text) and builds a data structure?—?often some kind of parse tree, abstract syntax tree or other hierarchical structure?—?giving a structural representation of the input, checking for correct syntax in the process. The parsing may be preceded or followed by other steps, or these may be combined into a single step. The parser is often preceded by a separate lexical analyser, which creates tokens from the sequence of input characters
           </blockquote>
           <p name="5978" id="5978" class="graf graf--p graf-after--pullquote">So, in essence, this is what we’re trying to achieve:</p>
           <pre name="a21a" id="a21a" class="graf graf--pre graf-after--p">math expression =&gt; [parser] =&gt; some data structure (we'll get to this in a bit)</pre>
           <figure name="1f24" id="1f24" class="graf graf--figure graf-after--pre">
            <div class="aspectRatioPlaceholder is-locked" style="max-width: 147px; max-height: 409px;">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 278.2%;"></div>
             <div class="progressiveMedia js-progressiveMedia graf-image" data-image-id="1*jFWR28LjzW4rec1egUDwWg.gif" data-width="147" data-height="409">
              <img src="https://cdn-images-1.medium.com/freeze/max/60/1*jFWR28LjzW4rec1egUDwWg.gif?q=20" crossorigin="anonymous" class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail">
              <canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas>
              <img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/1600/1*jFWR28LjzW4rec1egUDwWg.gif">
              <noscript class="js-progressiveMedia-inner">
               <img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/1600/1*jFWR28LjzW4rec1egUDwWg.gif">
              </noscript>
             </div>
            </div>
            <figcaption class="imageCaption">
             Something like this (source: 
             <a href="https://www.codeproject.com/Articles/50377/Create-Your-Own-Programming-Language" data-href="https://www.codeproject.com/Articles/50377/Create-Your-Own-Programming-Language" class="markup--anchor markup--figure-anchor" rel="noopener" target="_blank">codeproject.com)</a>
            </figcaption>
           </figure>
           <p name="61b4" id="61b4" class="graf graf--p graf-after--figure">Let’s skip ahead a bit: “… The parser is often preceded by a separate lexical analyzer, which creates tokens from the sequence of input characters”. This is talking about the tokenizer we built earlier. So, our parser won’t be receiving the raw math expression, but rather an array of tokens. So now, we have:</p>
           <pre name="ea1e" id="ea1e" class="graf graf--pre graf-after--p">math expression =&gt; [tokenizer] =&gt; list of tokens =&gt; [parser] =&gt; some data structure</pre>
           <p name="de91" id="de91" class="graf graf--p graf-after--pre">For the tokenizer, we had to come up with the algorithm manually. For the parser, we’ll be implementing an already existing algorithm, <a href="https://en.wikipedia.org/wiki/Shunting-yard_algorithm" data-href="https://en.wikipedia.org/wiki/Shunting-yard_algorithm" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">the Shunting-yard algorithm.</a> Remember the “some data structure” above? With this algorithm, our parser can give us a data structure called an Abstract Syntax Tree (AST) or an alternative representation of the expression, known as Reverse Polish Notation (RPN).</p>
           <h3 name="43f3" id="43f3" class="graf graf--h3 graf-after--p">Reverse Polish&nbsp;Notation</h3>
           <p name="977c" id="977c" class="graf graf--p graf-after--h3">I’ll start with RPN. Again from <a href="https://en.wikipedia.org/wiki/Reverse_Polish_notation" data-href="https://en.wikipedia.org/wiki/Reverse_Polish_notation" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">Wikipedia</a>, RPN is “a mathematical notation in which<strong class="markup--strong markup--p-strong"> every operator follows all of its operands</strong>”. Instead of having, say, 3+4, RPN would be 3 4 +. Weird, I know. But the rule is that the operator has to come <strong class="markup--strong markup--p-strong">after</strong> all its operands.</p>
           <p name="5787" id="5787" class="graf graf--p graf-after--p">Keep that rule in mind as we take a look at some more complex examples. Also remember that an operand for one operation can be the result of an earlier operation).</p>
           <pre name="5084" id="5084" class="graf graf--pre graf-after--p">Algebraic: 3 - 4                        RPN: 3 4 -<br><br></pre>
           <pre name="733b" id="733b" class="graf graf--pre graf-after--pre">Algebraic: 3 - 4 + 5                    RPN: 3 4 - 5 +<br><br></pre>
           <pre name="dcae" id="dcae" class="graf graf--pre graf-after--pre">Algebraic: 2^3                          RPN: 2 3 ^<br><br></pre>
           <pre name="f569" id="f569" class="graf graf--pre graf-after--pre">Algebraic: 5 + ((1 + 2) × 4) ? 3        RPN: 5 1 2 + 4 * + 3 -<br><br></pre>
           <pre name="d77d" id="d77d" class="graf graf--pre graf-after--pre">Algebraic: sin(45)                      RPN: 45 sin<br><br></pre>
           <pre name="b2ea" id="b2ea" class="graf graf--pre graf-after--pre">Algebraic: tan(x^2 + 2*x + 6)           RPN: x 2 ^ 2 x * + 6 + tan</pre>
           <p name="504f" id="504f" class="graf graf--p graf-after--pre">Because the operator has to come after its operands, RPN is also known as <em class="markup--em markup--p-em">postfix notation</em>, and our “regular” algebraic notation is called <em class="markup--em markup--p-em">infix</em>.</p>
           <p name="0b3a" id="0b3a" class="graf graf--p graf-after--p">How do you evaluate an expression in RPN? There’s a simple algorithm I use:</p>
           <blockquote name="6e6b" id="6e6b" class="graf graf--blockquote graf-after--p">
            <em class="markup--em markup--blockquote-em">Read all the tokens from left to right till you get to an Operator or Function. Knowing that the Operator/Function takes </em>n
            <em class="markup--em markup--blockquote-em"> arguments (for instance, for +, </em>n 
            <em class="markup--em markup--blockquote-em">= 2; for </em>cos()
            <em class="markup--em markup--blockquote-em">, </em>n
            <em class="markup--em markup--blockquote-em"> = 1), evaluate the last </em>n 
            <em class="markup--em markup--blockquote-em">preceding arguments with the Operator/Function, and replace all of them (Operator/Function + operands) with the result. Continue as before, until there are no more Operators/Functions left to read. The only (Literal or Variable) token left is your answer.</em>
           </blockquote>
           <p name="79fd" id="79fd" class="graf graf--p graf-after--blockquote">(This is a simplified algorithm, which assumes the expression is valid. A couple indicators that the expression isn’t valid are if you have more than one token left at the end, or if the last token left is an Operator/Function.)</p>
           <p name="f202" id="f202" class="graf graf--p graf-after--p">So, for something like 5 1 2 + 4 * + 3 ?:</p>
           <pre name="0bf6" id="0bf6" class="graf graf--pre graf-after--p">read 5<br>read 1<br>read 2<br>read +. + is an operator which takes 2 args, so calculate 1+2 and replace with the result (3). The expression is now <strong class="markup--strong markup--pre-strong">5 3 4 * + 3 -</strong><br>read 4<br>read *. * is an operator which takes two args, so calculate 3*4 and replace with the result, 12. The expression is reduced to <strong class="markup--strong markup--pre-strong">5 12 + 3 -<br></strong>read +. + is an operator which takes two args, so calculate 5+12, replace by the result, 17. Now, we have <strong class="markup--strong markup--pre-strong">17 3 -<br></strong>read 3<br>read -. - is an operator which takes two args, so calculate 17-3. The result is <strong class="markup--strong markup--pre-strong">14</strong>.</pre>
           <p name="2b9b" id="2b9b" class="graf graf--p graf-after--pre">Hope you made an A in my little crash course on RPN. You did? OK, let’s move on.</p>
           <h3 name="6ab4" id="6ab4" class="graf graf--h3 graf-after--p">Abstract Syntax&nbsp;Trees</h3>
           <p name="e38d" id="e38d" class="graf graf--p graf-after--h3">Wikipedia’s definition here might not be too helpful for many of us: “a tree representation of the abstract syntactic structure of source code written in a programming language.” For this use case, we can think of an AST as a data structure that represents the mathematical structure of the expression. This is better seen than said, so let’s draw a rough diagram. I’ll start with an AST for the simple expression 3+4:</p>
           <pre name="9b59" id="9b59" class="graf graf--pre graf-after--p">  [+]<br> /   \<br>[3] [4]</pre>
           <p name="9f95" id="9f95" class="graf graf--p graf-after--pre">Each <code class="markup--code markup--p-code">[]</code> represents a node in the tree. So you can see at a glance, that the two tokens are brought together by a the + operator.</p>
           <p name="a9bc" id="a9bc" class="graf graf--p graf-after--p">A more complex expression, 5 + ((1 + 2) * 4) ? 3:</p>
           <pre name="48c1" id="48c1" class="graf graf--pre graf-after--p">           [-]<br>          /   \<br>        [+]    \___[3]   <br>       /  \<br> [5]__/   [*]<br>         /   \<br>        [+]  [4]<br>       /   \  <br>     [1]  [2]</pre>
           <p name="0d6a" id="0d6a" class="graf graf--p graf-after--pre">Ah, a lovely little syntax tree. It links up all tokens and operators perfectly. You can see that evaluating this expression is much easier?—?just follow the tree.</p>
           <p name="7e4d" id="7e4d" class="graf graf--p graf-after--p">So,why is an AST useful? It helps you represent the logic and structure of the expression correctly, making it easier for the expression to be evaluated. For instance, to evaluate the above expression, on our backend we could do something like this:</p>
           <pre name="1078" id="1078" class="graf graf--pre graf-after--p">result = binaryoperation(+, 1, 2)<br>result = binaryoperation(*, result, 4)<br>result = binaryoperation(+, 5, result)<br>result = binaryoperation(-, result, 3)<br>return result</pre>
           <p name="1052" id="1052" class="graf graf--p graf-after--pre">In other words, for each operator (or function) node that the evaluator/compiler/interpreter encounters, it checks to see how many branches there are, and then evaluates the results of all those branches with the operator.</p>
           <p name="a0d2" id="a0d2" class="graf graf--p graf-after--p">Okay, the crash course is over, now back to our parser. Our parser will convert the (tokenized) expression to RPN, and later to an AST. So let’s begin implementing it.</p>
           <h3 name="6c7d" id="6c7d" class="graf graf--h3 graf-after--p">The Shunting-yard algorithm</h3>
           <p name="3387" id="3387" class="graf graf--p graf-after--h3">Here’s the RPN version of the full algorithm (<a href="https://en.wikipedia.org/wiki/Shunting-yard_algorithm" data-href="https://en.wikipedia.org/wiki/Shunting-yard_algorithm" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">from our friend Wikipedia</a>), and modified to fit with our tokenizer:</p>
           <blockquote name="c501" id="c501" class="graf graf--blockquote graf-after--p">
            <em class="markup--em markup--blockquote-em">While there are tokens to be read:</em>
           </blockquote>
           <blockquote name="0965" id="0965" class="graf graf--blockquote graf-after--blockquote">
            <em class="markup--em markup--blockquote-em">1. Read a token. Let’s call it </em>
            <code class="markup--code markup--blockquote-code"><em class="markup--em markup--blockquote-em">t</em></code>
           </blockquote>
           <blockquote name="8128" id="8128" class="graf graf--blockquote graf-after--blockquote">
            <em class="markup--em markup--blockquote-em">2. If </em>
            <code class="markup--code markup--blockquote-code"><em class="markup--em markup--blockquote-em">t</em></code>
            <em class="markup--em markup--blockquote-em"> is a Literal or Variable, push it to the output queue.</em>
           </blockquote>
           <blockquote name="50b5" id="50b5" class="graf graf--blockquote graf-after--blockquote">
            <em class="markup--em markup--blockquote-em">3. If </em>
            <code class="markup--code markup--blockquote-code"><em class="markup--em markup--blockquote-em">t</em></code>
            <em class="markup--em markup--blockquote-em"> is a Function,push it onto the stack.</em>
           </blockquote>
           <blockquote name="a900" id="a900" class="graf graf--blockquote graf-after--blockquote">
            <em class="markup--em markup--blockquote-em">4. If </em>
            <code class="markup--code markup--blockquote-code"><em class="markup--em markup--blockquote-em">t</em></code>
            <em class="markup--em markup--blockquote-em"> is a Function Argument Separator (a comma), pop operators off the stack onto the output queue until the token at the top of the stack is a Left Parenthesis.</em>
           </blockquote>
           <blockquote name="6100" id="6100" class="graf graf--blockquote graf-after--blockquote">
            <em class="markup--em markup--blockquote-em">5. If </em>
            <code class="markup--code markup--blockquote-code"><em class="markup--em markup--blockquote-em">t</em></code>
            <em class="markup--em markup--blockquote-em"> is an Operator:</em>
           </blockquote>
           <blockquote name="55d4" id="55d4" class="graf graf--blockquote graf-after--blockquote">
            <em class="markup--em markup--blockquote-em">a. while there is an Operator token </em>
            <code class="markup--code markup--blockquote-code"><em class="markup--em markup--blockquote-em">o</em></code>
            <em class="markup--em markup--blockquote-em"> at the top of the operator stack and either </em>
            <code class="markup--code markup--blockquote-code"><em class="markup--em markup--blockquote-em">t</em></code>
            <em class="markup--em markup--blockquote-em"> is left-associative and has precedence is less than or equal to that of </em>
            <code class="markup--code markup--blockquote-code"><em class="markup--em markup--blockquote-em">o</em></code>
            <em class="markup--em markup--blockquote-em">, or </em>
            <code class="markup--code markup--blockquote-code"><em class="markup--em markup--blockquote-em">t</em></code>
            <em class="markup--em markup--blockquote-em"> is right associative, and has precedence less than that of </em>
            <code class="markup--code markup--blockquote-code"><em class="markup--em markup--blockquote-em">o</em></code>
            <em class="markup--em markup--blockquote-em">, pop </em>
            <code class="markup--code markup--blockquote-code"><em class="markup--em markup--blockquote-em">o</em></code>
            <em class="markup--em markup--blockquote-em"> off the operator stack, onto the output queue;</em>
           </blockquote>
           <blockquote name="3cf7" id="3cf7" class="graf graf--blockquote graf-after--blockquote">
            <em class="markup--em markup--blockquote-em">b. at the end of iteration push </em>
            <code class="markup--code markup--blockquote-code"><em class="markup--em markup--blockquote-em">t</em></code>
            <em class="markup--em markup--blockquote-em"> onto the operator stack.</em>
           </blockquote>
           <blockquote name="96a7" id="96a7" class="graf graf--blockquote graf-after--blockquote">
            <em class="markup--em markup--blockquote-em">6. If the token is a Left Parenthesis, push it onto the stack.</em>
           </blockquote>
           <blockquote name="a5ce" id="a5ce" class="graf graf--blockquote graf-after--blockquote">
            <em class="markup--em markup--blockquote-em">7. If the token is a Right Parenthesis, pop operators off the stack onto the output queue until the token at the top of the stack is a left parenthesis. Then pop the left parenthesis from the stack, but not onto the output queue.</em>
           </blockquote>
           <blockquote name="6348" id="6348" class="graf graf--blockquote graf-after--blockquote">
            <em class="markup--em markup--blockquote-em">8. If the token at the top of the stack is a Function, pop it onto the output queue.</em>
           </blockquote>
           <blockquote name="f9d8" id="f9d8" class="graf graf--blockquote graf-after--blockquote">
            <em class="markup--em markup--blockquote-em">When there are no more tokens to read, pop any Operator tokens on the stack onto the output queue.</em>
           </blockquote>
           <blockquote name="dc64" id="dc64" class="graf graf--blockquote graf-after--blockquote">
            <em class="markup--em markup--blockquote-em">Exit.</em>
           </blockquote>
           <p name="5408" id="5408" class="graf graf--p graf-after--blockquote">(Side note: in case you read the earlier article, I<em class="markup--em markup--p-em">’</em>ve updated the list of recognized tokens to include the Function Argument Separator, aka comma).</p>
           <p name="c9cf" id="c9cf" class="graf graf--p graf-after--p">The algorithm above assumes the expression is valid. I made it this way so it’s easily understandable in the context of an article. You can view the full algorithm <a href="https://en.wikipedia.org/wiki/Shunting-yard_algorithm" data-href="https://en.wikipedia.org/wiki/Shunting-yard_algorithm" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">on Wikipedia</a>.</p>
           <p name="c626" id="c626" class="graf graf--p graf-after--p">You’ll observe a couple of things:</p>
           <ul class="postList">
            <li name="22f1" id="22f1" class="graf graf--li graf-after--p">We need two data structures: a <strong class="markup--strong markup--li-strong">stack </strong>to hold the functions and operators, and a <strong class="markup--strong markup--li-strong">queue </strong>for the output. If you aren’t familiar with these two data structures, here’s a primer for you: if you want to retrieve a value from a stack, you start with the last one you put in, whereas for a queue, you start with the first you put in.</li>
           </ul>
           <pre name="5737" id="5737" class="graf graf--pre graf-after--li">// we'll use arrays to represent both of them<br>var outQueue=[];<br>var opStack=[];</pre>
           <ul class="postList">
            <li name="6429" id="6429" class="graf graf--li graf-after--pre">We need to know the <strong class="markup--strong markup--li-strong">associativity </strong>of the operators. <a href="https://en.wikipedia.org/wiki/Operator_associativity" data-href="https://en.wikipedia.org/wiki/Operator_associativity" class="markup--anchor markup--li-anchor" rel="noopener" target="_blank">Associativity</a> simply means in what order an expression containing several operations of the same kind are grouped in the absence of parentheses. For instance, 2 + 3 + 4 is canonically evaluated from left to right (2+ 3 =5, then 5 + 4 =9), so + has a left associativity. Compare that to 2 ^ 3 ^ 4, which is evaluated as 2 ^81, not 8 ^4. Thus ^ has a right associativity. We’ll package the associativities of the operators well encounter in a Javascriptobject:</li>
           </ul>
           <pre name="d283" id="d283" class="graf graf--pre graf-after--li">var assoc = {<br>  "^" : "right",<br>  "*" : "left",<br>  "/" : "left",<br>  "+" : "left",<br>  "-" : "left"<br> };</pre>
           <ul class="postList">
            <li name="18a4" id="18a4" class="graf graf--li graf-after--pre">We also need to know the <strong class="markup--strong markup--li-strong">precedence </strong>of the operators. The <a href="https://en.wikipedia.org/wiki/Order_of_operations" data-href="https://en.wikipedia.org/wiki/Order_of_operations" class="markup--anchor markup--li-anchor" rel="noopener" target="_blank">precedence </a>is a sort of ranking assigned to operators, so we can know in what order they should be evaluated if they appear in the same expression. Operators with higher precedence get evaluated first. For instance, * has a higher precedence than +, so 2 + 3 * 4 gets evaluated as 2 + 12, and not 5 * 4, unless parentheses are used. + and – have the same precedence, so 3 + 5 – 2 can be evaluated as either 8–2 or 3+3. Again, we’ll package the operator precedences in an object:</li>
           </ul>
           <pre name="f568" id="f568" class="graf graf--pre graf-after--li">var prec = {<br>  "^" : 4,<br>  "*" : 3,<br>  "/" : 3,<br>  "+" : 2,<br>  "-" : 2<br> };</pre>
           <p name="0053" id="0053" class="graf graf--p graf-after--pre">Now, lets update our <code class="markup--code markup--p-code">Token</code> class so that we can easily access the precedence and associativity via methods:</p>
           <pre name="9547" id="9547" class="graf graf--pre graf-after--p">Token.prototype.precedence = function() {<br>  return prec[this.value];<br> };<br> <br> Token.prototype.associativity = function() {<br>  return assoc[this.value];<br> };</pre>
           <ul class="postList">
            <li name="23c4" id="23c4" class="graf graf--li graf-after--pre">We need a method that allows us to <strong class="markup--strong markup--li-strong">peek </strong>at the stack (to check the element at the top without removing it), and one that allows us to <strong class="markup--strong markup--li-strong">pop </strong>from the stack (retrieve and remove the item at the top). Fortunately, Javascript arrays already have a <code class="markup--code markup--li-code">pop()</code> method, so all we need to do is implement a <code class="markup--code markup--li-code">peek()</code> method. (Remember, for stacks, the element at the top is the one we added last.)</li>
           </ul>
           <pre name="abf2" id="abf2" class="graf graf--pre graf-after--li">Array.prototype.peek = function() {<br>  return this.slice(-1)[0]; //retrieve the last element of the array<br> };</pre>
           <p name="6f08" id="6f08" class="graf graf--p graf-after--pre">So here’s what we have:</p>
           <pre name="e988" id="e988" class="graf graf--pre graf-after--p">function tokenize(expr) {<br>  ...   // just paste the tokenizer code here<br>}</pre>
           <pre name="d5ad" id="d5ad" class="graf graf--pre graf-after--pre">function parse(inp){<br> var outQueue=[];<br> var opStack=[];</pre>
           <pre name="acc8" id="acc8" class="graf graf--pre graf-after--pre">Array.prototype.peek = function() {<br>  return this.slice(-1)[0];<br> };</pre>
           <pre name="3be4" id="3be4" class="graf graf--pre graf-after--pre">var assoc = {<br>  "^" : "right",<br>  "*" : "left",<br>  "/" : "left",<br>  "+" : "left",<br>  "-" : "left"<br> };</pre>
           <pre name="42ae" id="42ae" class="graf graf--pre graf-after--pre">var prec = {<br>  "^" : 4,<br>  "*" : 3,<br>  "/" : 3,<br>  "+" : 2,<br>  "-" : 2<br> };</pre>
           <pre name="1174" id="1174" class="graf graf--pre graf-after--pre">Token.prototype.precedence = function() {<br>  return prec[this.value];<br> };<br> <br> Token.prototype.associativity = function() {<br>  return assoc[this.value];<br> };</pre>
           <pre name="c345" id="c345" class="graf graf--pre graf-after--pre"> //tokenize<br> var tokens=tokenize(inp);</pre>
           <pre name="4b73" id="4b73" class="graf graf--pre graf-after--pre"> tokens.forEach(function(v) {<br>   ...   //apply the algorithm here<br> });</pre>
           <pre name="7ef9" id="7ef9" class="graf graf--pre graf-after--pre"> return outQueue.concat(opStack.reverse());  // list of tokens in RPN<br>}</pre>
           <p name="113a" id="113a" class="graf graf--p graf-after--pre">I won’t delve into the algorithm’s implementation so I don’t bore you. It’s a pretty straightforward task, practically a word-for-word translation of the algorithm to code, so at the end of the day, here’s what we have:</p>
           <figure name="4e1c" id="4e1c" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="progressiveMedia js-progressiveMedia">
              <img src="https://i.embed.ly/1/display/resize?url=https%3A%2F%2Favatars2.githubusercontent.com%2Fu%2F14361073%3Fv%3D3%26s%3D400&amp;key=4fce0568f2ce49e8b54624ef71a8a5bd&amp;width=40" crossorigin="anonymous" class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail">
              <canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas>
              <div class="iframeContainer">
               <iframe width="700" height="250" data-src="/media/0e844f3f882786bcca0b71e7200f64b9?postId=7e8f5572276e" data-media-id="0e844f3f882786bcca0b71e7200f64b9" data-thumbnail="https://i.embed.ly/1/image?url=https%3A%2F%2Favatars2.githubusercontent.com%2Fu%2F14361073%3Fv%3D3%26s%3D400&amp;key=4fce0568f2ce49e8b54624ef71a8a5bd" class="progressiveMedia-iframe js-progressiveMedia-iframe" allowfullscreen frameborder="0"></iframe>
              </div>
              <noscript class="js-progressiveMedia-inner">
               <div class="iframeContainer">
                <iframe width="700" height="250" src="/media/0e844f3f882786bcca0b71e7200f64b9?postId=7e8f5572276e" data-media-id="0e844f3f882786bcca0b71e7200f64b9" data-thumbnail="https://i.embed.ly/1/image?url=https%3A%2F%2Favatars2.githubusercontent.com%2Fu%2F14361073%3Fv%3D3%26s%3D400&amp;key=4fce0568f2ce49e8b54624ef71a8a5bd" allowfullscreen frameborder="0"></iframe>
               </div>
              </noscript>
             </div>
            </div>
           </figure>
           <p name="adfd" id="adfd" class="graf graf--p graf-after--figure">The <code class="markup--code markup--p-code">toString</code> function simply formats our RPN list of tokens in a readable format.</p>
           <p name="b1fe" id="b1fe" class="graf graf--p graf-after--p">And we can test out our infix-to-postfix parser:</p>
           <pre name="a436" id="a436" class="graf graf--pre graf-after--p">var rpn = parse("3 + 4 * 2 / ( 1 - 5 ) ^ 2 ^ 3");<br>console.log(toString(rpn));</pre>
           <p name="da12" id="da12" class="graf graf--p graf-after--pre">Output:</p>
           <pre name="73ac" id="73ac" class="graf graf--pre graf-after--p">3 4 2 * 1 5 - 2 3 ^ ^ / +</pre>
           <p name="464c" id="464c" class="graf graf--p graf-after--pre">RPN!!</p>
           <h3 name="a51e" id="a51e" class="graf graf--h3 graf-after--p">Time to plant a&nbsp;tree</h3>
           <p name="0d71" id="0d71" class="graf graf--p graf-after--h3">Now, let’s modify our parser so it returns an AST.</p>
           <p name="fff4" id="fff4" class="graf graf--p graf-after--p">To generate an AST instead of RPN, we’ll need to make a few modifications:</p>
           <ul class="postList">
            <li name="7f81" id="7f81" class="graf graf--li graf-after--p">We’ll create an object to represent a node in our AST. Each node has a value and two branches (which may be <code class="markup--code markup--li-code">null</code>):</li>
           </ul>
           <pre name="fe29" id="fe29" class="graf graf--pre graf-after--li">function ASTNode(token, leftChildNode, rightChildNode) {<br>   this.token = token.value;<br>   this.leftChildNode = leftChildNode;<br>   this.rightChildNode = rightChildNode;<br>}</pre>
           <ul class="postList">
            <li name="bbab" id="bbab" class="graf graf--li graf-after--pre">The second thing we’ll be doing is changing our output data structure to a stack. While the actual code for this is just to change the line <code class="markup--code markup--li-code">var outQueue = []</code> to <code class="markup--code markup--li-code">var outStack = []</code> (because it remains an array), the key change is in our understanding and treatment of this array.</li>
           </ul>
           <p name="844d" id="844d" class="graf graf--p graf-after--li">Now, how is our infix-to-AST algorithm going to run? Basically, the same algorithm, with a few modifications:</p>
           <ol class="postList">
            <li name="f7d1" id="f7d1" class="graf graf--li graf-after--p">Instead of pushing a Literal or Variable token onto our <code class="markup--code markup--li-code">outQueue</code>, we push a new node whose value is the token, and whose branches are <code class="markup--code markup--li-code">null</code> onto our <code class="markup--code markup--li-code">outStack</code></li>
            <li name="1f59" id="1f59" class="graf graf--li graf-after--li">Instead of popping an Operator/Function token from the <code class="markup--code markup--li-code">opStack</code>&nbsp;, we replace the top two nodes on the <code class="markup--code markup--li-code">outStack</code> with a single node whose value is the token, and that has those two as its branches. Let’s create a function that does that:</li>
           </ol>
           <pre name="3f6d" id="3f6d" class="graf graf--pre graf-after--li">Array.prototype.addNode = function (operatorToken) {<br>  rightChildNode = this.pop();<br>  leftChildNode = this.pop();<br>  this.push(new ASTNode(operatorToken, leftChildNode, rightChildNode));<br> }</pre>
           <p name="0c51" id="0c51" class="graf graf--p graf-after--pre">3. Our parser should now return a single node, the node at the top of our AST. Its two branches will contain the two child nodes, whose branches will contain their children,and so on, in a recursive manner. For instance, for an expression like 3 + 4 * 2 / ( 1–5 ) ^ 2 ^ 3, we expect the structure of our output node to be like this (in a horizontal form):</p>
           <pre name="3700" id="3700" class="graf graf--pre graf-after--p">+ =&gt; 3 =&gt; null<br>       =&gt; null<br>  =&gt; / =&gt; * =&gt; 4 =&gt; null<br>                 =&gt; null<br>            =&gt; 2 =&gt; null<br>                 =&gt; null<br>       =&gt; ^ =&gt; - =&gt; 1 =&gt; null<br>                      =&gt; null<br>                 =&gt; 5 =&gt; null<br>                      =&gt; null<br>            =&gt; ^ =&gt; 2 =&gt; null<br>                      =&gt; null<br>                 =&gt; 3 =&gt; null<br>                      =&gt; null</pre>
           <p name="4366" id="4366" class="graf graf--p graf-after--pre">In the diagram above, the =&gt; represent the branches of the node (the top node is the left branch, the bottom one is the right branch). Each node has two branches, and the nodes at the end of the tree have theirs pointing to <code class="markup--code markup--p-code">null</code></p>
           <p name="23f9" id="23f9" class="graf graf--p graf-after--p">So, if we put all this together, here is the code we come up with:</p>
           <figure name="6fe2" id="6fe2" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="progressiveMedia js-progressiveMedia">
              <img src="https://i.embed.ly/1/display/resize?url=https%3A%2F%2Favatars2.githubusercontent.com%2Fu%2F14361073%3Fv%3D3%26s%3D400&amp;key=4fce0568f2ce49e8b54624ef71a8a5bd&amp;width=40" crossorigin="anonymous" class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail">
              <canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas>
              <div class="iframeContainer">
               <iframe width="700" height="250" data-src="/media/df102efc035c104716bc0d44ea368567?postId=7e8f5572276e" data-media-id="df102efc035c104716bc0d44ea368567" data-thumbnail="https://i.embed.ly/1/image?url=https%3A%2F%2Favatars2.githubusercontent.com%2Fu%2F14361073%3Fv%3D3%26s%3D400&amp;key=4fce0568f2ce49e8b54624ef71a8a5bd" class="progressiveMedia-iframe js-progressiveMedia-iframe" allowfullscreen frameborder="0"></iframe>
              </div>
              <noscript class="js-progressiveMedia-inner">
               <div class="iframeContainer">
                <iframe width="700" height="250" src="/media/df102efc035c104716bc0d44ea368567?postId=7e8f5572276e" data-media-id="df102efc035c104716bc0d44ea368567" data-thumbnail="https://i.embed.ly/1/image?url=https%3A%2F%2Favatars2.githubusercontent.com%2Fu%2F14361073%3Fv%3D3%26s%3D400&amp;key=4fce0568f2ce49e8b54624ef71a8a5bd" allowfullscreen frameborder="0"></iframe>
               </div>
              </noscript>
             </div>
            </div>
           </figure>
           <p name="f786" id="f786" class="graf graf--p graf-after--figure">And if we demo it:</p>
           <pre name="44be" id="44be" class="graf graf--pre graf-after--p">//a little hack I put together so it prints out in a readable form<br>ASTNode.prototype.toString = function(count) {<br>   if (!this.leftChildNode &amp;&amp;&nbsp;!this.rightChildNode)<br>     return this.token + "\t=&gt;null\n" + Array(count+1).join("\t") + "=&gt;null";<br>   var count = count || 1;<br>   count++;<br>   return this.token + "\t=&gt;" + this.leftChildNode.toString(count) + "\n" + Array(count).join("\t") + "=&gt;" + this.rightChildNode.toString(count);<br>};</pre>
           <pre name="8220" id="8220" class="graf graf--pre graf-after--pre">var ast = parse("3 + 4 * 2 / ( 1 - 5 ) ^ 2 ^ 3");<br>console.log("" + ast);</pre>
           <p name="65da" id="65da" class="graf graf--p graf-after--pre">And the result:</p>
           <figure name="fcda" id="fcda" class="graf graf--figure graf-after--p">
            <div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 392px;">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 55.900000000000006%;"></div>
             <div class="progressiveMedia js-progressiveMedia graf-image" data-image-id="1*3vdqt8rw-Lbkil3CrIBDNA.png" data-width="1189" data-height="665" data-action="zoom" data-action-value="1*3vdqt8rw-Lbkil3CrIBDNA.png">
              <img src="https://cdn-images-1.medium.com/freeze/max/60/1*3vdqt8rw-Lbkil3CrIBDNA.png?q=20" crossorigin="anonymous" class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail">
              <canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas>
              <img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/1600/1*3vdqt8rw-Lbkil3CrIBDNA.png">
              <noscript class="js-progressiveMedia-inner">
               <img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/1600/1*3vdqt8rw-Lbkil3CrIBDNA.png">
              </noscript>
             </div>
            </div>
            <figcaption class="imageCaption">
             <em class="markup--em markup--figure-em">Oh, beautiful tree!</em>
            </figcaption>
           </figure>
           <p name="affa" id="affa" class="graf graf--p graf-after--figure">Slowly, but surely, we’re getting closer to understanding what makes compilers and interpreters tick! Admittedly, the working of modern-day programming languages and their toolkits is a lot more complex than what we’ve looked at thus far, but I hope this proves to be an easy-to-understand introduction to them. As a number of people have pointed out, tools exist to automatically generate tokenizers and parsers, but its often nice to know how something actually works.</p>
           <p name="8f2f" id="8f2f" class="graf graf--p graf-after--p graf--trailing">The concepts we covered in this article and the previous are very interesting topics in the field of computer science and language theory. I still have a lot to learn about them, and I encourage you to go ahead and research them if they interest you. And <a href="http://m.me/shalvah.adebayo" data-href="http://m.me/shalvah.adebayo" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">drop me a line</a> to let me know about your progress. Peace!</p>
          </div>
         </div>
        </section>
       </div>
       <footer class="u-paddingTop10">
        <div class="container u-maxWidth740">
         <div class="row">
          <div class="col u-size12of12"></div>
         </div>
         <div class="row">
          <div class="col u-size12of12 js-postTags">
           <div class="u-paddingBottom10">
            <ul class="tags tags--postTags tags--borderless">
             <li><a class="link u-baseColor--link" href="https://medium.freecodecamp.org/tagged/javascript?source=post" data-action-source="post" data-collection-slug="free-code-camp">JavaScript</a></li>
             <li><a class="link u-baseColor--link" href="https://medium.freecodecamp.org/tagged/tech?source=post" data-action-source="post" data-collection-slug="free-code-camp">Tech</a></li>
             <li><a class="link u-baseColor--link" href="https://medium.freecodecamp.org/tagged/life-lessons?source=post" data-action-source="post" data-collection-slug="free-code-camp">Life Lessons</a></li>
             <li><a class="link u-baseColor--link" href="https://medium.freecodecamp.org/tagged/software-development?source=post" data-action-source="post" data-collection-slug="free-code-camp">Software Development</a></li>
             <li><a class="link u-baseColor--link" href="https://medium.freecodecamp.org/tagged/algorithms?source=post" data-action-source="post" data-collection-slug="free-code-camp">Algorithms</a></li>
            </ul>
           </div>
          </div>
         </div>
         <section class="uiScale uiScale-ui--small uiScale-caption--regular u-paddingTop20 u-borderTopLightest u-marginTop10">
          <div class="ui-heading u-textColorDarker u-fontSize22 u-marginBottom5">
           Show your support
          </div>
          <p class="ui-body u-marginBottom20 u-textColorDark u-fontSize16">Clapping shows how much you appreciated Shalvah A.’s story.</p>
         </section>
         <div class="postActions u-flexCenter js-postActionsFooter">
          <div class="u-flex1">
           <div class="multirecommend js-actionMultirecommend u-flexCenter u-width60" data-post-id="7e8f5572276e" data-is-icon-29px="true" data-is-circle="true" data-has-recommend-list="true" data-source="post_actions_footer-----7e8f5572276e---------------------clap_footer">
            <div class="u-relative u-foreground">
             <button class="button button--large button--circle button--withChrome u-baseColor--buttonNormal button--withIcon button--withSvgIcon clapButton js-actionMultirecommendButton clapButton--largePill u-relative u-foreground u-width60 u-height60 u-accentColor--textNormal u-accentColor--buttonNormal" data-action="sign-up-prompt" data-sign-in-action="multivote" data-requires-token="true" data-redirect="https://medium.com/_/vote/p/7e8f5572276e" data-action-source="post_actions_footer-----7e8f5572276e---------------------clap_footer" aria-label="Clap"><span class="button-defaultState"><span class="svgIcon svgIcon--clap svgIcon--33px u-relative u-topNegative2 u-xs-top0">
                <svg class="svgIcon-use" width="33" height="33" viewbox="0 0 33 33">
                 <path d="M28.86 17.342l-3.64-6.402c-.292-.433-.712-.729-1.163-.8a1.124 1.124 0 0 0-.889.213c-.63.488-.742 1.181-.33 2.061l1.222 2.587 1.4 2.46c2.234 4.085 1.511 8.007-2.145 11.663-.26.26-.526.49-.797.707 1.42-.084 2.881-.683 4.292-2.094 3.822-3.823 3.565-7.876 2.05-10.395zm-6.252 11.075c3.352-3.35 3.998-6.775 1.978-10.469l-3.378-5.945c-.292-.432-.712-.728-1.163-.8a1.122 1.122 0 0 0-.89.213c-.63.49-.742 1.182-.33 2.061l1.72 3.638a.502.502 0 0 1-.806.568l-8.91-8.91a1.335 1.335 0 0 0-1.887 1.886l5.292 5.292a.5.5 0 0 1-.707.707l-5.292-5.292-1.492-1.492c-.503-.503-1.382-.505-1.887 0a1.337 1.337 0 0 0 0 1.886l1.493 1.492 5.292 5.292a.499.499 0 0 1-.353.854.5.5 0 0 1-.354-.147L5.642 13.96a1.338 1.338 0 0 0-1.887 0 1.338 1.338 0 0 0 0 1.887l2.23 2.228 3.322 3.324a.499.499 0 0 1-.353.853.502.502 0 0 1-.354-.146l-3.323-3.324a1.333 1.333 0 0 0-1.886 0 1.325 1.325 0 0 0-.39.943c0 .356.138.691.39.943l6.396 6.397c3.528 3.53 8.86 5.313 12.821 1.353zM12.73 9.26l5.68 5.68-.49-1.037c-.518-1.107-.426-2.13.224-2.89l-3.303-3.304a1.337 1.337 0 0 0-1.886 0 1.326 1.326 0 0 0-.39.944c0 .217.067.42.165.607zm14.787 19.184c-1.599 1.6-3.417 2.392-5.353 2.392-.349 0-.7-.03-1.058-.082a7.922 7.922 0 0 1-3.667.887c-3.049 0-6.115-1.626-8.359-3.87l-6.396-6.397A2.315 2.315 0 0 1 2 19.724a2.327 2.327 0 0 1 1.923-2.296l-.875-.875a2.339 2.339 0 0 1 0-3.3 2.33 2.33 0 0 1 1.24-.647l-.139-.139c-.91-.91-.91-2.39 0-3.3.884-.884 2.421-.882 3.301 0l.138.14a2.335 2.335 0 0 1 3.948-1.24l.093.092c.091-.423.291-.828.62-1.157a2.336 2.336 0 0 1 3.3 0l3.384 3.386a2.167 2.167 0 0 1 1.271-.173c.534.086 1.03.354 1.441.765.11-.549.415-1.034.911-1.418a2.12 2.12 0 0 1 1.661-.41c.727.117 1.385.565 1.853 1.262l3.652 6.423c1.704 2.832 2.025 7.377-2.205 11.607zM13.217.484l-1.917.882 2.37 2.837-.454-3.719zm8.487.877l-1.928-.86-.44 3.697 2.368-2.837zM16.5 3.293L15.478-.005h2.044L16.5 3.293z" fill-rule="evenodd" />
                </svg></span></span><span class="button-activeState"><span class="svgIcon svgIcon--clapFilled svgIcon--33px u-relative u-topNegative2 u-xs-top0">
                <svg class="svgIcon-use" width="33" height="33" viewbox="0 0 33 33">
                 <g fill-rule="evenodd">
                  <path d="M29.58 17.1l-3.854-6.78c-.365-.543-.876-.899-1.431-.989a1.491 1.491 0 0 0-1.16.281c-.42.327-.65.736-.7 1.207v.001l3.623 6.367c2.46 4.498 1.67 8.802-2.333 12.807-.265.265-.536.505-.81.728 1.973-.222 3.474-1.286 4.45-2.263 4.166-4.165 3.875-8.6 2.215-11.36zm-4.831.82l-3.581-6.3c-.296-.439-.725-.742-1.183-.815a1.105 1.105 0 0 0-.89.213c-.647.502-.755 1.188-.33 2.098l1.825 3.858a.601.601 0 0 1-.197.747.596.596 0 0 1-.77-.067L10.178 8.21c-.508-.506-1.393-.506-1.901 0a1.335 1.335 0 0 0-.393.95c0 .36.139.698.393.95v.001l5.61 5.61a.599.599 0 1 1-.848.847l-5.606-5.606c-.001 0-.002 0-.003-.002L5.848 9.375a1.349 1.349 0 0 0-1.902 0 1.348 1.348 0 0 0 0 1.901l1.582 1.582 5.61 5.61a.6.6 0 0 1-.848.848l-5.61-5.61c-.51-.508-1.393-.508-1.9 0a1.332 1.332 0 0 0-.394.95c0 .36.139.697.393.952l2.363 2.362c.002.001.002.002.002.003l3.52 3.52a.6.6 0 0 1-.848.847l-3.522-3.523h-.001a1.336 1.336 0 0 0-.95-.393 1.345 1.345 0 0 0-.949 2.295l6.779 6.78c3.715 3.713 9.327 5.598 13.49 1.434 3.527-3.528 4.21-7.13 2.086-11.015zM11.817 7.727c.06-.328.213-.64.466-.893.64-.64 1.755-.64 2.396 0l3.232 3.232c-.82.783-1.09 1.833-.764 2.992l-5.33-5.33z" />
                  <path d="M13.285.48l-1.916.881 2.37 2.837z" />
                  <path d="M21.719 1.361L19.79.501l-.44 3.697z" />
                  <path d="M16.502 3.298L15.481 0h2.043z" />
                 </g>
                </svg></span></span></button>
             <div class="clapUndo u-width60 u-round u-height32 u-absolute u-borderBox u-paddingRight5 u-transition--transform200Spring u-background--brandSageLighter js-clapUndo" style="top: 14px; padding: 2px;">
              <button class="button button--chromeless u-baseColor--buttonNormal button--withIcon button--withSvgIcon u-floatRight" data-action="multivote-undo" data-action-value="7e8f5572276e"><span class="svgIcon svgIcon--removeThin svgIcon--29px">
                <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
                 <path d="M20.13 8.11l-5.61 5.61-5.609-5.61-.801.801 5.61 5.61-5.61 5.61.801.8 5.61-5.609 5.61 5.61.8-.801-5.609-5.61 5.61-5.61" fill-rule="evenodd" />
                </svg></span></button>
             </div>
            </div>
            <span class="u-textAlignCenter u-relative u-background js-actionMultirecommendCount u-marginLeft10"><button class="button button--chromeless u-baseColor--buttonNormal js-multirecommendCountButton" data-action="show-recommends" data-action-value="7e8f5572276e">201</button></span>
           </div>
          </div>
          <div class="u-flex0 buttonSet buttonSet--narrow">
           <div class="buttonSet-inner">
            <button class="button button--large button--dark button--chromeless is-touchIconBlackPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon" data-action="scroll-to-responses" data-action-source="post_actions_footer"><span class="svgIcon svgIcon--response svgIcon--29px">
              <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
               <path d="M21.27 20.058c1.89-1.826 2.754-4.17 2.754-6.674C24.024 8.21 19.67 4 14.1 4 8.53 4 4 8.21 4 13.384c0 5.175 4.53 9.385 10.1 9.385 1.007 0 2-.14 2.95-.41.285.25.592.49.918.7 1.306.87 2.716 1.31 4.19 1.31.276-.01.494-.14.6-.36a.625.625 0 0 0-.052-.65c-.61-.84-1.042-1.71-1.282-2.58a5.417 5.417 0 0 1-.154-.75zm-3.85 1.324l-.083-.28-.388.12a9.72 9.72 0 0 1-2.85.424c-4.96 0-8.99-3.706-8.99-8.262 0-4.556 4.03-8.263 8.99-8.263 4.95 0 8.77 3.71 8.77 8.27 0 2.25-.75 4.35-2.5 5.92l-.24.21v.32c0 .07 0 .19.02.37.03.29.1.6.19.92.19.7.49 1.4.89 2.08-.93-.14-1.83-.49-2.67-1.06-.34-.22-.88-.48-1.16-.74z" />
              </svg></span></button>
            <button class="button button--chromeless u-baseColor--buttonNormal" data-action="scroll-to-responses">4</button>
           </div>
           <div class="buttonSet-inner u-xs-hide">
            <button class="button button--large button--dark button--chromeless is-touchIconBlackPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon" title="Share on Twitter" aria-label="Share on Twitter" data-action="share-on-twitter" data-action-source="post_actions_footer"><span class="svgIcon svgIcon--twitter svgIcon--29px">
              <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
               <path d="M21.967 11.8c.018 5.93-4.607 11.18-11.177 11.18-2.172 0-4.25-.62-6.047-1.76l-.268.422-.038.5.186.013.168.012c.3.02.44.032.6.046 2.06-.026 3.95-.686 5.49-1.86l1.12-.85-1.4-.048c-1.57-.055-2.92-1.08-3.36-2.51l-.48.146-.05.5c.22.03.48.05.75.08.48-.02.87-.07 1.25-.15l2.33-.49-2.32-.49c-1.68-.35-2.91-1.83-2.91-3.55 0-.05 0-.01-.01.03l-.49-.1-.25.44c.63.36 1.35.57 2.07.58l1.7.04L7.4 13c-.978-.662-1.59-1.79-1.618-3.047a4.08 4.08 0 0 1 .524-1.8l-.825.07a12.188 12.188 0 0 0 8.81 4.515l.59.033-.06-.59v-.02c-.05-.43-.06-.63-.06-.87a3.617 3.617 0 0 1 6.27-2.45l.2.21.28-.06c1.01-.22 1.94-.59 2.73-1.09l-.75-.56c-.1.36-.04.89.12 1.36.23.68.58 1.13 1.17.85l-.21-.45-.42-.27c-.52.8-1.17 1.48-1.92 2L22 11l.016.28c.013.2.014.35 0 .52v.04zm.998.038c.018-.22.017-.417 0-.66l-.498.034.284.41a8.183 8.183 0 0 0 2.2-2.267l.97-1.48-1.6.755c.17-.08.3-.02.34.03a.914.914 0 0 1-.13-.292c-.1-.297-.13-.64-.1-.766l.36-1.254-1.1.695c-.69.438-1.51.764-2.41.963l.48.15a4.574 4.574 0 0 0-3.38-1.484 4.616 4.616 0 0 0-4.61 4.613c0 .29.02.51.08.984l.01.02.5-.06.03-.5c-3.17-.18-6.1-1.7-8.08-4.15l-.48-.56-.36.64c-.39.69-.62 1.48-.65 2.28.04 1.61.81 3.04 2.06 3.88l.3-.92c-.55-.02-1.11-.17-1.6-.45l-.59-.34-.14.67c-.02.08-.02.16 0 .24-.01 2.12 1.55 4.01 3.69 4.46l.1-.49-.1-.49c-.33.07-.67.12-1.03.14-.18-.02-.43-.05-.64-.07l-.76-.09.23.73c.57 1.84 2.29 3.14 4.28 3.21l-.28-.89a8.252 8.252 0 0 1-4.85 1.66c-.12-.01-.26-.02-.56-.05l-.17-.01-.18-.01L2.53 21l1.694 1.07a12.233 12.233 0 0 0 6.58 1.917c7.156 0 12.2-5.73 12.18-12.18l-.002.04z" />
              </svg></span></button>
           </div>
           <div class="buttonSet-inner u-xs-hide">
            <button class="button button--large button--dark button--chromeless is-touchIconBlackPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon" title="Share on Facebook" aria-label="Share on Facebook" data-action="share-on-facebook" data-action-source="post_actions_footer"><span class="svgIcon svgIcon--facebook svgIcon--29px">
              <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
               <path d="M16.39 23.61v-5.808h1.846a.55.55 0 0 0 .546-.48l.36-2.797a.551.551 0 0 0-.547-.62H16.39V12.67c0-.67.12-.813.828-.813h1.474a.55.55 0 0 0 .55-.55V8.803a.55.55 0 0 0-.477-.545c-.436-.06-1.36-.116-2.22-.116-2.5 0-4.13 1.62-4.13 4.248v1.513H10.56a.551.551 0 0 0-.55.55v2.797c0 .304.248.55.55.55h1.855v5.76c-4.172-.96-7.215-4.7-7.215-9.1 0-5.17 4.17-9.36 9.31-9.36 5.14 0 9.31 4.19 9.31 9.36 0 4.48-3.155 8.27-7.43 9.15M14.51 4C8.76 4 4.1 8.684 4.1 14.46c0 5.162 3.75 9.523 8.778 10.32a.55.55 0 0 0 .637-.543v-6.985a.551.551 0 0 0-.55-.55H11.11v-1.697h1.855a.55.55 0 0 0 .55-.55v-2.063c0-2.02 1.136-3.148 3.03-3.148.567 0 1.156.027 1.597.06v1.453h-.924c-1.363 0-1.93.675-1.93 1.912v1.78c0 .3.247.55.55.55h2.132l-.218 1.69H15.84c-.305 0-.55.24-.55.55v7.02c0 .33.293.59.623.54 5.135-.7 9.007-5.11 9.007-10.36C24.92 8.68 20.26 4 14.51 4" />
              </svg></span></button>
           </div>
           <div class="buttonSet-inner u-xs-show">
            <button class="button button--large button--dark button--chromeless u-baseColor--buttonDark button--withIcon button--withSvgIcon js-shareStoryButton" title="Share this story on Twitter or Facebook" aria-label="Share this story on Twitter or Facebook" data-action="show-share-popover" data-action-source="post_actions_footer"><span class="svgIcon svgIcon--share svgIcon--29px">
              <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
               <path d="M20.385 8H19a.5.5 0 1 0 .011 1h1.39c.43 0 .84.168 1.14.473.31.305.48.71.48 1.142v10.77c0 .43-.17.837-.47 1.142-.3.305-.71.473-1.14.473H8.62c-.43 0-.84-.168-1.144-.473a1.603 1.603 0 0 1-.473-1.142v-10.77c0-.43.17-.837.48-1.142A1.599 1.599 0 0 1 8.62 9H10a.502.502 0 0 0 0-1H8.615c-.67 0-1.338.255-1.85.766-.51.51-.765 1.18-.765 1.85v10.77c0 .668.255 1.337.766 1.848.51.51 1.18.766 1.85.766h11.77c.668 0 1.337-.255 1.848-.766.51-.51.766-1.18.766-1.85v-10.77c0-.668-.255-1.337-.766-1.848A2.61 2.61 0 0 0 20.384 8zm-8.67-2.508L14 3.207v8.362c0 .27.224.5.5.5s.5-.23.5-.5V3.2l2.285 2.285a.49.49 0 0 0 .704-.001.511.511 0 0 0 0-.708l-3.14-3.14a.504.504 0 0 0-.71 0L11 4.776a.501.501 0 0 0 .71.706" fill-rule="evenodd" />
              </svg></span></button>
           </div>
          </div>
         </div>
        </div>
        <div class="u-maxWidth740 u-paddingTop20 u-marginTop20 u-borderTopLightest container u-paddingBottom20 u-xs-paddingBottom10 js-postAttributionFooterContainer">
         <div class="row js-postFooterInfo">
          <div class="col u-size6of12 u-xs-size12of12">
           <li class="uiScale uiScale-ui--small uiScale-caption--regular u-block u-paddingBottom18 js-cardUser">
            <div class="u-marginLeft20 u-floatRight">
             <span class="followState js-followState" data-user-id="6c2442a0e7f7"><button class="button button--small u-noUserSelect button--withChrome u-baseColor--buttonNormal button--withHover button--unblock js-unblockButton" data-action="sign-up-prompt" data-sign-in-action="toggle-block-user" data-requires-token="true" data-redirect="https://medium.freecodecamp.org/parsing-math-expressions-with-javascript-7e8f5572276e" data-action-source="footer_card"><span class="button-label  button-defaultState">Blocked</span><span class="button-label button-hoverState">Unblock</span></button><button class="button button--primary button--small u-noUserSelect button--withChrome u-accentColor--buttonNormal button--follow js-followButton" data-action="sign-up-prompt" data-sign-in-action="toggle-subscribe-user" data-requires-token="true" data-redirect="https://medium.com/_/subscribe/user/6c2442a0e7f7" data-action-source="footer_card-6c2442a0e7f7-------------------------follow_footer"><span class="button-label  button-defaultState js-buttonLabel">Follow</span><span class="button-label button-activeState">Following</span></button></span>
            </div>
            <div class="u-tableCell">
             <a class="link avatar u-baseColor--link" href="https://medium.freecodecamp.org/@shalvah?source=footer_card" title="Go to the profile of Shalvah A." aria-label="Go to the profile of Shalvah A." data-action-source="footer_card" data-user-id="6c2442a0e7f7" data-collection-slug="free-code-camp" dir="auto"><img src="https://cdn-images-1.medium.com/fit/c/120/120/1*FCiNhJYh7H9oDbPq7w5V6A.jpeg" class="avatar-image avatar-image--small" alt="Go to the profile of Shalvah A."></a>
            </div>
            <div class="u-tableCell u-verticalAlignMiddle u-breakWord u-paddingLeft15">
             <h3 class="ui-header u-fontSize18 u-lineHeightTighter u-marginBottom4"><a class="link link--primary u-accentColor--hoverTextNormal" href="https://medium.freecodecamp.org/@shalvah" property="cc:attributionName" title="Go to the profile of Shalvah A." aria-label="Go to the profile of Shalvah A." rel="author cc:attributionUrl" data-user-id="6c2442a0e7f7" data-collection-slug="free-code-camp" dir="auto">Shalvah A.</a></h3>
             <p class="ui-body u-fontSize14 u-lineHeightBaseSans u-textColorDark u-marginBottom4">Learning. Building. Believing. Software Engineer. UX Enthusiast. Introspective. A branch trying to abide.</p>
            </div></li>
          </div>
          <div class="col u-size6of12 u-xs-size12of12 u-xs-marginTop30">
           <li class="uiScale uiScale-ui--small uiScale-caption--regular u-block u-paddingBottom18 js-cardCollection">
            <div class="u-marginLeft20 u-floatRight">
             <button class="button button--primary button--small u-noUserSelect button--withChrome u-accentColor--buttonNormal js-relationshipButton" data-action="sign-up-prompt" data-sign-in-action="toggle-follow-collection" data-requires-token="true" data-redirect="https://medium.com/_/subscribe/collection/free-code-camp" data-action-source="----336d898217ee----------------------follow_footer" data-collection-id="336d898217ee"><span class="button-label  js-buttonLabel">Follow</span></button>
            </div>
            <div class="u-tableCell ">
             <a class="link avatar avatar--roundedRectangle u-baseColor--link" href="https://medium.freecodecamp.org?source=footer_card" title="Go to freeCodeCamp" aria-label="Go to freeCodeCamp" data-action-source="footer_card" data-collection-slug="free-code-camp"><img src="https://cdn-images-1.medium.com/fit/c/120/120/1*MotlWcSa2n6FrOx3ul89kw.png" class="avatar-image u-size60x60" alt="freeCodeCamp"></a>
            </div>
            <div class="u-tableCell u-verticalAlignMiddle u-breakWord u-paddingLeft15">
             <h3 class="ui-heading u-fontSize18 u-lineHeightTighter u-marginBottom4"><a class="link link--primary u-accentColor--hoverTextNormal" href="https://medium.freecodecamp.org?source=footer_card" rel="collection" data-action-source="footer_card" data-collection-slug="free-code-camp">freeCodeCamp</a></h3>
             <p class="ui-body u-fontSize14 u-lineHeightBaseSans u-textColorDark u-marginBottom4">Our community publishes stories worth reading on development, design, and data science.</p>
             <div class="buttonSet"></div>
            </div></li>
          </div>
         </div>
        </div>
        <div class="js-postFooterPlacements"></div>
        <div class="u-padding0 u-clearfix u-backgroundGrayLightest u-print-hide supplementalPostContent js-responsesWrapper"></div>
        <div class="supplementalPostContent js-heroPromo"></div>
       </footer>
      </article>
     </main>
     <div class="u-marginAuto u-maxWidth1000">
      <div class="js-postShareWidget u-foreground u-sm-hide u-transition--fadeOut300 u-fixed">
       <ul>
        <li class="u-textAlignCenter u-marginVertical10">
         <div class="multirecommend js-actionMultirecommend u-flexColumn u-marginBottom10 u-width60" data-post-id="7e8f5572276e" data-is-icon-29px="true" data-is-vertical="true" data-is-circle="true" data-is-compressed="true" data-has-recommend-list="true" data-source="post_share_widget-----7e8f5572276e---------------------clap_sidebar">
          <div class="u-relative u-foreground">
           <button class="button button--large button--circle button--withChrome u-baseColor--buttonNormal button--withIcon button--withSvgIcon clapButton js-actionMultirecommendButton clapButton--largePill u-relative u-foreground u-width60 u-height60 u-accentColor--textNormal u-accentColor--buttonNormal" data-action="sign-up-prompt" data-sign-in-action="multivote" data-requires-token="true" data-redirect="https://medium.com/_/vote/p/7e8f5572276e" data-action-source="post_share_widget-----7e8f5572276e---------------------clap_sidebar" aria-label="Clap"><span class="button-defaultState"><span class="svgIcon svgIcon--clap svgIcon--33px u-relative u-topNegative2 u-xs-top0">
              <svg class="svgIcon-use" width="33" height="33" viewbox="0 0 33 33">
               <path d="M28.86 17.342l-3.64-6.402c-.292-.433-.712-.729-1.163-.8a1.124 1.124 0 0 0-.889.213c-.63.488-.742 1.181-.33 2.061l1.222 2.587 1.4 2.46c2.234 4.085 1.511 8.007-2.145 11.663-.26.26-.526.49-.797.707 1.42-.084 2.881-.683 4.292-2.094 3.822-3.823 3.565-7.876 2.05-10.395zm-6.252 11.075c3.352-3.35 3.998-6.775 1.978-10.469l-3.378-5.945c-.292-.432-.712-.728-1.163-.8a1.122 1.122 0 0 0-.89.213c-.63.49-.742 1.182-.33 2.061l1.72 3.638a.502.502 0 0 1-.806.568l-8.91-8.91a1.335 1.335 0 0 0-1.887 1.886l5.292 5.292a.5.5 0 0 1-.707.707l-5.292-5.292-1.492-1.492c-.503-.503-1.382-.505-1.887 0a1.337 1.337 0 0 0 0 1.886l1.493 1.492 5.292 5.292a.499.499 0 0 1-.353.854.5.5 0 0 1-.354-.147L5.642 13.96a1.338 1.338 0 0 0-1.887 0 1.338 1.338 0 0 0 0 1.887l2.23 2.228 3.322 3.324a.499.499 0 0 1-.353.853.502.502 0 0 1-.354-.146l-3.323-3.324a1.333 1.333 0 0 0-1.886 0 1.325 1.325 0 0 0-.39.943c0 .356.138.691.39.943l6.396 6.397c3.528 3.53 8.86 5.313 12.821 1.353zM12.73 9.26l5.68 5.68-.49-1.037c-.518-1.107-.426-2.13.224-2.89l-3.303-3.304a1.337 1.337 0 0 0-1.886 0 1.326 1.326 0 0 0-.39.944c0 .217.067.42.165.607zm14.787 19.184c-1.599 1.6-3.417 2.392-5.353 2.392-.349 0-.7-.03-1.058-.082a7.922 7.922 0 0 1-3.667.887c-3.049 0-6.115-1.626-8.359-3.87l-6.396-6.397A2.315 2.315 0 0 1 2 19.724a2.327 2.327 0 0 1 1.923-2.296l-.875-.875a2.339 2.339 0 0 1 0-3.3 2.33 2.33 0 0 1 1.24-.647l-.139-.139c-.91-.91-.91-2.39 0-3.3.884-.884 2.421-.882 3.301 0l.138.14a2.335 2.335 0 0 1 3.948-1.24l.093.092c.091-.423.291-.828.62-1.157a2.336 2.336 0 0 1 3.3 0l3.384 3.386a2.167 2.167 0 0 1 1.271-.173c.534.086 1.03.354 1.441.765.11-.549.415-1.034.911-1.418a2.12 2.12 0 0 1 1.661-.41c.727.117 1.385.565 1.853 1.262l3.652 6.423c1.704 2.832 2.025 7.377-2.205 11.607zM13.217.484l-1.917.882 2.37 2.837-.454-3.719zm8.487.877l-1.928-.86-.44 3.697 2.368-2.837zM16.5 3.293L15.478-.005h2.044L16.5 3.293z" fill-rule="evenodd" />
              </svg></span></span><span class="button-activeState"><span class="svgIcon svgIcon--clapFilled svgIcon--33px u-relative u-topNegative2 u-xs-top0">
              <svg class="svgIcon-use" width="33" height="33" viewbox="0 0 33 33">
               <g fill-rule="evenodd">
                <path d="M29.58 17.1l-3.854-6.78c-.365-.543-.876-.899-1.431-.989a1.491 1.491 0 0 0-1.16.281c-.42.327-.65.736-.7 1.207v.001l3.623 6.367c2.46 4.498 1.67 8.802-2.333 12.807-.265.265-.536.505-.81.728 1.973-.222 3.474-1.286 4.45-2.263 4.166-4.165 3.875-8.6 2.215-11.36zm-4.831.82l-3.581-6.3c-.296-.439-.725-.742-1.183-.815a1.105 1.105 0 0 0-.89.213c-.647.502-.755 1.188-.33 2.098l1.825 3.858a.601.601 0 0 1-.197.747.596.596 0 0 1-.77-.067L10.178 8.21c-.508-.506-1.393-.506-1.901 0a1.335 1.335 0 0 0-.393.95c0 .36.139.698.393.95v.001l5.61 5.61a.599.599 0 1 1-.848.847l-5.606-5.606c-.001 0-.002 0-.003-.002L5.848 9.375a1.349 1.349 0 0 0-1.902 0 1.348 1.348 0 0 0 0 1.901l1.582 1.582 5.61 5.61a.6.6 0 0 1-.848.848l-5.61-5.61c-.51-.508-1.393-.508-1.9 0a1.332 1.332 0 0 0-.394.95c0 .36.139.697.393.952l2.363 2.362c.002.001.002.002.002.003l3.52 3.52a.6.6 0 0 1-.848.847l-3.522-3.523h-.001a1.336 1.336 0 0 0-.95-.393 1.345 1.345 0 0 0-.949 2.295l6.779 6.78c3.715 3.713 9.327 5.598 13.49 1.434 3.527-3.528 4.21-7.13 2.086-11.015zM11.817 7.727c.06-.328.213-.64.466-.893.64-.64 1.755-.64 2.396 0l3.232 3.232c-.82.783-1.09 1.833-.764 2.992l-5.33-5.33z" />
                <path d="M13.285.48l-1.916.881 2.37 2.837z" />
                <path d="M21.719 1.361L19.79.501l-.44 3.697z" />
                <path d="M16.502 3.298L15.481 0h2.043z" />
               </g>
              </svg></span></span></button>
           <div class="clapUndo u-width60 u-round u-height32 u-absolute u-borderBox u-paddingRight5 u-transition--transform200Spring u-background--brandSageLighter js-clapUndo" style="top: 14px; padding: 2px;">
            <button class="button button--chromeless u-baseColor--buttonNormal button--withIcon button--withSvgIcon u-floatRight" data-action="multivote-undo" data-action-value="7e8f5572276e"><span class="svgIcon svgIcon--removeThin svgIcon--29px">
              <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
               <path d="M20.13 8.11l-5.61 5.61-5.609-5.61-.801.801 5.61 5.61-5.61 5.61.801.8 5.61-5.609 5.61 5.61.8-.801-5.609-5.61 5.61-5.61" fill-rule="evenodd" />
              </svg></span></button>
           </div>
          </div>
          <span class="u-textAlignCenter u-relative u-background js-actionMultirecommendCount u-flexOrderNegative1 u-height20 u-marginBottom7"><button class="button button--chromeless u-baseColor--buttonNormal js-multirecommendCountButton u-block u-marginAuto" data-action="show-recommends" data-action-value="7e8f5572276e">201</button></span>
         </div></li>
        <li class="u-textAlignCenter u-marginVertical10"><button class="button button--large button--dark button--chromeless is-touchIconBlackPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon" title="Share on Twitter" aria-label="Share on Twitter" data-action="share-on-twitter" data-action-source="post_share_widget"><span class="svgIcon svgIcon--twitter svgIcon--29px">
           <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
            <path d="M21.967 11.8c.018 5.93-4.607 11.18-11.177 11.18-2.172 0-4.25-.62-6.047-1.76l-.268.422-.038.5.186.013.168.012c.3.02.44.032.6.046 2.06-.026 3.95-.686 5.49-1.86l1.12-.85-1.4-.048c-1.57-.055-2.92-1.08-3.36-2.51l-.48.146-.05.5c.22.03.48.05.75.08.48-.02.87-.07 1.25-.15l2.33-.49-2.32-.49c-1.68-.35-2.91-1.83-2.91-3.55 0-.05 0-.01-.01.03l-.49-.1-.25.44c.63.36 1.35.57 2.07.58l1.7.04L7.4 13c-.978-.662-1.59-1.79-1.618-3.047a4.08 4.08 0 0 1 .524-1.8l-.825.07a12.188 12.188 0 0 0 8.81 4.515l.59.033-.06-.59v-.02c-.05-.43-.06-.63-.06-.87a3.617 3.617 0 0 1 6.27-2.45l.2.21.28-.06c1.01-.22 1.94-.59 2.73-1.09l-.75-.56c-.1.36-.04.89.12 1.36.23.68.58 1.13 1.17.85l-.21-.45-.42-.27c-.52.8-1.17 1.48-1.92 2L22 11l.016.28c.013.2.014.35 0 .52v.04zm.998.038c.018-.22.017-.417 0-.66l-.498.034.284.41a8.183 8.183 0 0 0 2.2-2.267l.97-1.48-1.6.755c.17-.08.3-.02.34.03a.914.914 0 0 1-.13-.292c-.1-.297-.13-.64-.1-.766l.36-1.254-1.1.695c-.69.438-1.51.764-2.41.963l.48.15a4.574 4.574 0 0 0-3.38-1.484 4.616 4.616 0 0 0-4.61 4.613c0 .29.02.51.08.984l.01.02.5-.06.03-.5c-3.17-.18-6.1-1.7-8.08-4.15l-.48-.56-.36.64c-.39.69-.62 1.48-.65 2.28.04 1.61.81 3.04 2.06 3.88l.3-.92c-.55-.02-1.11-.17-1.6-.45l-.59-.34-.14.67c-.02.08-.02.16 0 .24-.01 2.12 1.55 4.01 3.69 4.46l.1-.49-.1-.49c-.33.07-.67.12-1.03.14-.18-.02-.43-.05-.64-.07l-.76-.09.23.73c.57 1.84 2.29 3.14 4.28 3.21l-.28-.89a8.252 8.252 0 0 1-4.85 1.66c-.12-.01-.26-.02-.56-.05l-.17-.01-.18-.01L2.53 21l1.694 1.07a12.233 12.233 0 0 0 6.58 1.917c7.156 0 12.2-5.73 12.18-12.18l-.002.04z" />
           </svg></span></button></li>
        <li class="u-textAlignCenter u-marginVertical10"><button class="button button--large button--dark button--chromeless is-touchIconBlackPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon" title="Share on Facebook" aria-label="Share on Facebook" data-action="share-on-facebook" data-action-source="post_share_widget"><span class="svgIcon svgIcon--facebook svgIcon--29px">
           <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
            <path d="M16.39 23.61v-5.808h1.846a.55.55 0 0 0 .546-.48l.36-2.797a.551.551 0 0 0-.547-.62H16.39V12.67c0-.67.12-.813.828-.813h1.474a.55.55 0 0 0 .55-.55V8.803a.55.55 0 0 0-.477-.545c-.436-.06-1.36-.116-2.22-.116-2.5 0-4.13 1.62-4.13 4.248v1.513H10.56a.551.551 0 0 0-.55.55v2.797c0 .304.248.55.55.55h1.855v5.76c-4.172-.96-7.215-4.7-7.215-9.1 0-5.17 4.17-9.36 9.31-9.36 5.14 0 9.31 4.19 9.31 9.36 0 4.48-3.155 8.27-7.43 9.15M14.51 4C8.76 4 4.1 8.684 4.1 14.46c0 5.162 3.75 9.523 8.778 10.32a.55.55 0 0 0 .637-.543v-6.985a.551.551 0 0 0-.55-.55H11.11v-1.697h1.855a.55.55 0 0 0 .55-.55v-2.063c0-2.02 1.136-3.148 3.03-3.148.567 0 1.156.027 1.597.06v1.453h-.924c-1.363 0-1.93.675-1.93 1.912v1.78c0 .3.247.55.55.55h2.132l-.218 1.69H15.84c-.305 0-.55.24-.55.55v7.02c0 .33.293.59.623.54 5.135-.7 9.007-5.11 9.007-10.36C24.92 8.68 20.26 4 14.51 4" />
           </svg></span></button></li>
        <li class="u-textAlignCenter u-marginVertical10"><button class="button button--large button--dark button--chromeless is-touchIconFadeInPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon button--bookmark js-bookmarkButton" title="Bookmark this story to read later" aria-label="Bookmark this story to read later" data-action="sign-up-prompt" data-sign-in-action="add-to-bookmarks" data-requires-token="true" data-redirect="https://medium.com/_/bookmark/p/7e8f5572276e" data-action-source="post_share_widget-----7e8f5572276e---------------------bookmark_sidebar"><span class="button-defaultState"><span class="svgIcon svgIcon--bookmark svgIcon--29px">
            <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
             <path d="M19.385 4h-9.77A2.623 2.623 0 0 0 7 6.615V23.01a1.022 1.022 0 0 0 1.595.847l5.905-4.004 5.905 4.004A1.022 1.022 0 0 0 22 23.011V6.62A2.625 2.625 0 0 0 19.385 4zM21 23l-5.91-3.955-.148-.107a.751.751 0 0 0-.884 0l-.147.107L8 23V6.615C8 5.725 8.725 5 9.615 5h9.77C20.275 5 21 5.725 21 6.615V23z" fill-rule="evenodd" />
            </svg></span></span><span class="button-activeState"><span class="svgIcon svgIcon--bookmarkFilled svgIcon--29px">
            <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
             <path d="M19.385 4h-9.77A2.623 2.623 0 0 0 7 6.615V23.01a1.022 1.022 0 0 0 1.595.847l5.905-4.004 5.905 4.004A1.022 1.022 0 0 0 22 23.011V6.62A2.625 2.625 0 0 0 19.385 4z" fill-rule="evenodd" />
            </svg></span></span></button></li>
       </ul>
      </div>
     </div>
     <div class="u-fixed u-bottom0 u-sizeFullWidth u-backgroundWhite u-boxShadowTop u-borderBox u-paddingTop10 u-paddingBottom10 u-zIndexMetabar u-xs-paddingLeft10 u-xs-paddingRight10 js-stickyFooter">
      <div class="u-maxWidth700 u-marginAuto u-flexCenter">
       <div class="u-fontSize16 u-flex1 u-flexCenter">
        <div class="u-flex0 u-inlineBlock u-paddingRight20 u-xs-paddingRight10">
         <a class="link avatar avatar--roundedRectangle u-baseColor--link" href="https://medium.freecodecamp.org" title="Go to freeCodeCamp" aria-label="Go to freeCodeCamp" data-collection-slug="free-code-camp"><img src="https://cdn-images-1.medium.com/fit/c/80/80/1*MotlWcSa2n6FrOx3ul89kw.png" class="avatar-image avatar-image--smaller" alt="freeCodeCamp"></a>
        </div>
        <div class="u-flex1 u-inlineBlock">
         <div class="u-xs-hide">
          Never miss a story from
          <strong> freeCodeCamp</strong>, when you sign up for Medium. 
          <a class="link link--accent u-accentColor--textNormal u-accentColor--textDarken u-baseColor--link" href="https://medium.com/@Medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg" data-action-source="sticky_footer">Learn more</a>
         </div>
         <div class="u-xs-show">
          Never miss a story from
          <strong> freeCodeCamp</strong>
         </div>
        </div>
       </div>
       <div class="u-marginLeft50 u-xs-marginAuto">
        <button class="button button--primary button--dark is-active u-noUserSelect button--withChrome u-accentColor--buttonDark u-uiTextSemibold u-textUppercase u-fontSize12 button--followCollection js-followCollectionButton" data-action="sign-up-prompt" data-sign-in-action="toggle-subscribe-collection" data-requires-token="true" data-redirect="https://medium.com/_/subscribe/collection/free-code-camp" data-action-source="sticky_footer----336d898217ee----------------------follow_metabar"><span class="button-label  button-defaultState js-buttonLabel">Get updates</span><span class="button-label button-activeState">Get updates</span></button>
       </div>
      </div>
     </div>
     <style class="js-collectionStyle">
.u-accentColor--borderLight {border-color: #429A35 !important;}
.u-accentColor--borderNormal {border-color: #429A35 !important;}
.u-accentColor--borderDark {border-color: #3E8432 !important;}
.u-accentColor--iconLight .svgIcon,.u-accentColor--iconLight.svgIcon {fill: #429A35 !important;}
.u-accentColor--iconNormal .svgIcon,.u-accentColor--iconNormal.svgIcon {fill: #429A35 !important;}
.u-accentColor--iconDark .svgIcon,.u-accentColor--iconDark.svgIcon {fill: #3E8432 !important;}
.u-accentColor--textNormal {color: #3E8432 !important;}
.u-accentColor--hoverTextNormal:hover {color: #3E8432 !important;}
.u-accentColor--textNormal.u-accentColor--textDarken:hover {color: #3B7830 !important;}
.u-accentColor--textDark {color: #3B7830 !important;}
.u-accentColor--backgroundLight {background-color: #429A35 !important;}
.u-accentColor--backgroundNormal {background-color: #429A35 !important;}
.u-accentColor--backgroundDark {background-color: #3E8432 !important;}
.u-accentColor--buttonDark {border-color: #3E8432 !important; color: #3B7830 !important;}
.u-accentColor--buttonDark:hover {border-color: #3B7830 !important;}
.u-accentColor--buttonDark .icon:before,.u-accentColor--buttonDark .svgIcon{color: #3E8432 !important; fill: #3E8432 !important;}
.u-accentColor--buttonNormal:not(.clapButton--largePill) {border-color: #429A35 !important; color: #3E8432 !important;}
.u-accentColor--buttonNormal:hover {border-color: #3E8432 !important;}
.u-accentColor--buttonNormal .icon:before,.u-accentColor--buttonNormal .svgIcon{color: #429A35 !important; fill: #429A35 !important;}
.u-accentColor--buttonNormal.button--filled .icon:before,.u-accentColor--buttonNormal.button--filled .svgIcon{color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-accentColor--buttonDark.button--filled,.u-accentColor--buttonDark.button--withChrome.is-active,.u-accentColor--fillWhenActive.is-active {background-color: #3E8432 !important; border-color: #3E8432 !important; color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-accentColor--buttonNormal.button--filled:not(.clapButton--largePill),.u-accentColor--buttonNormal.button--withChrome.is-active:not(.clapButton--largePill) {background-color: #429A35 !important; border-color: #429A35 !important; color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.postArticle.is-withAccentColors .markup--user,.postArticle.is-withAccentColors .markup--query {color: #3E8432 !important;}.u-tintBgColor {background-color: rgba(0, 100, 0, 1) !important;}.u-tintBgColor .u-fadeLeft:before {background-image: linear-gradient(to right, rgba(0, 100, 0, 1) 0%, rgba(0, 100, 0, 0) 100%) !important;}.u-tintBgColor .u-fadeRight:after {background-image: linear-gradient(to right, rgba(0, 100, 0, 0) 0%, rgba(0, 100, 0, 1) 100%) !important;}
.u-tintSpectrum .u-baseColor--borderLight {border-color: #8ABF7C !important;}
.u-tintSpectrum .u-baseColor--borderNormal {border-color: #B5DDA8 !important;}
.u-tintSpectrum .u-baseColor--borderDark {border-color: #DFF8D4 !important;}
.u-tintSpectrum .u-baseColor--iconLight .svgIcon,.u-tintSpectrum .u-baseColor--iconLight.svgIcon {fill: #8ABF7C !important;}
.u-tintSpectrum .u-baseColor--iconNormal .svgIcon,.u-tintSpectrum .u-baseColor--iconNormal.svgIcon {fill: #B5DDA8 !important;}
.u-tintSpectrum .u-baseColor--iconDark .svgIcon,.u-tintSpectrum .u-baseColor--iconDark.svgIcon {fill: #DFF8D4 !important;}
.u-tintSpectrum .u-baseColor--textNormal {color: #B5DDA8 !important;}
.u-tintSpectrum .u-baseColor--textNormal.u-baseColor--textDarken:hover {color: #F3FFEA !important;}
.u-tintSpectrum .u-baseColor--textDark {color: #F3FFEA !important;}
.u-tintSpectrum .u-baseColor--textDarker {color: #F3FFEA !important;}
.u-tintSpectrum .u-baseColor--backgroundLight {background-color: #8ABF7C !important;}
.u-tintSpectrum .u-baseColor--backgroundNormal {background-color: #B5DDA8 !important;}
.u-tintSpectrum .u-baseColor--backgroundDark {background-color: #DFF8D4 !important;}
.u-tintSpectrum .u-baseColor--buttonLight {border-color: #8ABF7C !important; color: #8ABF7C !important;}
.u-tintSpectrum .u-baseColor--buttonLight:hover {border-color: #8ABF7C !important;}
.u-tintSpectrum .u-baseColor--buttonLight .icon:before,.u-tintSpectrum .u-baseColor--buttonLight .svgIcon {color: #8ABF7C !important; fill: #8ABF7C !important;}
.u-tintSpectrum .u-baseColor--buttonDark {border-color: #DFF8D4 !important; color: #F3FFEA !important;}
.u-tintSpectrum .u-baseColor--buttonDark:hover {border-color: #F3FFEA !important;}
.u-tintSpectrum .u-baseColor--buttonDark .icon:before,.u-tintSpectrum .u-baseColor--buttonDark .svgIcon {color: #DFF8D4 !important; fill: #DFF8D4 !important;}
.u-tintSpectrum .u-baseColor--buttonNormal {border-color: #B5DDA8 !important; color: #B5DDA8 !important;}
.u-tintSpectrum .u-baseColor--buttonNormal:hover {border-color: #DFF8D4 !important;}
.u-tintSpectrum .u-baseColor--buttonNormal .icon:before,.u-tintSpectrum .u-baseColor--buttonNormal .svgIcon {color: #B5DDA8 !important; fill: #B5DDA8 !important;}
.u-tintSpectrum .u-baseColor--buttonDark.button--filled,.u-tintSpectrum .u-baseColor--buttonDark.button--withChrome.is-active {background-color: #DFF8D4 !important; border-color: #DFF8D4 !important; color: rgba(0, 100, 0, 1) !important; fill: rgba(0, 100, 0, 1) !important;}
.u-tintSpectrum .u-baseColor--buttonNormal.button--filled,.u-tintSpectrum .u-baseColor--buttonNormal.button--withChrome.is-active {background-color: #B5DDA8 !important; border-color: #B5DDA8 !important; color: rgba(0, 100, 0, 1) !important; fill: rgba(0, 100, 0, 1) !important;}
.u-tintSpectrum .u-baseColor--link {color: #B5DDA8 !important;}
.u-tintSpectrum .u-baseColor--link.link--darkenOnHover:hover {color: #F3FFEA !important;}
.u-tintSpectrum .u-baseColor--link.link--darken:hover,.u-tintSpectrum .u-baseColor--link.link--darken:focus,.u-tintSpectrum .u-baseColor--link.link--darken:active {color: #F3FFEA !important;}
.u-tintSpectrum .u-baseColor--link.link--dark {color: #F3FFEA !important;}
.u-tintSpectrum .u-baseColor--link.link--dark.link--darken:hover,.u-tintSpectrum .u-baseColor--link.link--dark.link--darken:focus,.u-tintSpectrum .u-baseColor--link.link--dark.link--darken:active {color: #F3FFEA !important;}
.u-tintSpectrum .u-baseColor--link.link--darker {color: #F3FFEA !important;}
.u-tintSpectrum .u-baseColor--placeholderNormal ::-webkit-input-placeholder {color: #8ABF7C;}
.u-tintSpectrum .u-baseColor--placeholderNormal ::-moz-placeholder {color: #8ABF7C;}
.u-tintSpectrum .u-baseColor--placeholderNormal :-ms-input-placeholder {color: #8ABF7C;}
.u-tintSpectrum .svgIcon--logoNew path:nth-child(1) {stroke: none !important; fill: #458C39 !important;}
.u-tintSpectrum .svgIcon--logoNew path:nth-child(2) {stroke: none !important; fill: #5D9E50 !important;}
.u-tintSpectrum .svgIcon--logoNew path:nth-child(3) {stroke: none !important; fill: #8ABF7C !important;}
.u-tintSpectrum .svgIcon--logoNew path:nth-child(4) {stroke: none !important; fill: #B5DDA8 !important;}
.u-tintSpectrum .svgIcon--logoWordmark {stroke: none !important; fill: #F3FFEA !important;}
.u-tintSpectrum .svgIcon--logoMonogram {stroke: none !important; fill: #F3FFEA !important;}
.u-tintSpectrum .u-accentColor--borderLight {border-color: #8ABF7C !important;}
.u-tintSpectrum .u-accentColor--borderNormal {border-color: #B5DDA8 !important;}
.u-tintSpectrum .u-accentColor--borderDark {border-color: #DFF8D4 !important;}
.u-tintSpectrum .u-accentColor--iconLight .svgIcon,.u-tintSpectrum .u-accentColor--iconLight.svgIcon {fill: #8ABF7C !important;}
.u-tintSpectrum .u-accentColor--iconNormal .svgIcon,.u-tintSpectrum .u-accentColor--iconNormal.svgIcon {fill: #B5DDA8 !important;}
.u-tintSpectrum .u-accentColor--iconDark .svgIcon,.u-tintSpectrum .u-accentColor--iconDark.svgIcon {fill: #DFF8D4 !important;}
.u-tintSpectrum .u-accentColor--textNormal {color: #B5DDA8 !important;}
.u-tintSpectrum .u-accentColor--hoverTextNormal:hover {color: #B5DDA8 !important;}
.u-tintSpectrum .u-accentColor--textNormal.u-accentColor--textDarken:hover {color: #F3FFEA !important;}
.u-tintSpectrum .u-accentColor--textDark {color: #F3FFEA !important;}
.u-tintSpectrum .u-accentColor--backgroundLight {background-color: #8ABF7C !important;}
.u-tintSpectrum .u-accentColor--backgroundNormal {background-color: #B5DDA8 !important;}
.u-tintSpectrum .u-accentColor--backgroundDark {background-color: #DFF8D4 !important;}
.u-tintSpectrum .u-accentColor--buttonDark {border-color: #DFF8D4 !important; color: #F3FFEA !important;}
.u-tintSpectrum .u-accentColor--buttonDark:hover {border-color: #F3FFEA !important;}
.u-tintSpectrum .u-accentColor--buttonDark .icon:before,.u-tintSpectrum .u-accentColor--buttonDark .svgIcon{color: #DFF8D4 !important; fill: #DFF8D4 !important;}
.u-tintSpectrum .u-accentColor--buttonNormal:not(.clapButton--largePill) {border-color: #B5DDA8 !important; color: #B5DDA8 !important;}
.u-tintSpectrum .u-accentColor--buttonNormal:hover {border-color: #DFF8D4 !important;}
.u-tintSpectrum .u-accentColor--buttonNormal .icon:before,.u-tintSpectrum .u-accentColor--buttonNormal .svgIcon{color: #B5DDA8 !important; fill: #B5DDA8 !important;}
.u-tintSpectrum .u-accentColor--buttonNormal.button--filled .icon:before,.u-tintSpectrum .u-accentColor--buttonNormal.button--filled .svgIcon{color: rgba(0, 100, 0, 1) !important; fill: rgba(0, 100, 0, 1) !important;}
.u-tintSpectrum .u-accentColor--buttonDark.button--filled,.u-tintSpectrum .u-accentColor--buttonDark.button--withChrome.is-active,.u-tintSpectrum .u-accentColor--fillWhenActive.is-active {background-color: #DFF8D4 !important; border-color: #DFF8D4 !important; color: rgba(0, 100, 0, 1) !important; fill: rgba(0, 100, 0, 1) !important;}
.u-tintSpectrum .u-accentColor--buttonNormal.button--filled:not(.clapButton--largePill),.u-tintSpectrum .u-accentColor--buttonNormal.button--withChrome.is-active:not(.clapButton--largePill) {background-color: #B5DDA8 !important; border-color: #B5DDA8 !important; color: rgba(0, 100, 0, 1) !important; fill: rgba(0, 100, 0, 1) !important;}
.u-tintSpectrum .postArticle.is-withAccentColors .markup--user,.u-tintSpectrum .postArticle.is-withAccentColors .markup--query {color: #B5DDA8 !important;}
.u-accentColor--highlightFaint {background-color: rgba(222, 250, 211, 1) !important;}
.u-accentColor--highlightStrong.is-active .svgIcon {fill: rgba(172, 246, 153, 1) !important;}
.postArticle.is-withAccentColors .markup--quote.is-other {background-color: rgba(222, 250, 211, 1) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .markup--quote.is-other {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(222, 250, 211, 1), rgba(222, 250, 211, 1));}
.postArticle.is-withAccentColors .markup--quote.is-me {background-color: rgba(195, 248, 179, 1) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .markup--quote.is-me {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(195, 248, 179, 1), rgba(195, 248, 179, 1));}
.postArticle.is-withAccentColors .markup--quote.is-targeted {background-color: rgba(172, 246, 153, 1) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .markup--quote.is-targeted {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(172, 246, 153, 1), rgba(172, 246, 153, 1));}
.postArticle.is-withAccentColors .markup--quote.is-selected {background-color: rgba(172, 246, 153, 1) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .markup--quote.is-selected {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(172, 246, 153, 1), rgba(172, 246, 153, 1));}
.postArticle.is-withAccentColors .markup--highlight {background-color: rgba(172, 246, 153, 1) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .markup--highlight {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(172, 246, 153, 1), rgba(172, 246, 153, 1));}.u-baseColor--iconNormal.avatar-halo {fill: rgba(0, 0, 0, 0.4980392156862745) !important;}</style>
     <style class="js-collectionStyleConstant">.u-imageBgColor {background-color: rgba(0, 0, 0, 0.24705882352941178);}
.u-imageSpectrum .u-baseColor--borderLight {border-color: rgba(255, 255, 255, 0.6980392156862745) !important;}
.u-imageSpectrum .u-baseColor--borderNormal {border-color: rgba(255, 255, 255, 0.8980392156862745) !important;}
.u-imageSpectrum .u-baseColor--borderDark {border-color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--iconLight .svgIcon,.u-imageSpectrum .u-baseColor--iconLight.svgIcon {fill: rgba(255, 255, 255, 0.8) !important;}
.u-imageSpectrum .u-baseColor--iconNormal .svgIcon,.u-imageSpectrum .u-baseColor--iconNormal.svgIcon {fill: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--iconDark .svgIcon,.u-imageSpectrum .u-baseColor--iconDark.svgIcon {fill: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--textNormal {color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--textNormal.u-baseColor--textDarken:hover {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--textDark {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--textDarker {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--backgroundLight {background-color: rgba(255, 255, 255, 0.8980392156862745) !important;}
.u-imageSpectrum .u-baseColor--backgroundNormal {background-color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--backgroundDark {background-color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--buttonLight {border-color: rgba(255, 255, 255, 0.6980392156862745) !important; color: rgba(255, 255, 255, 0.8) !important;}
.u-imageSpectrum .u-baseColor--buttonLight:hover {border-color: rgba(255, 255, 255, 0.6980392156862745) !important;}
.u-imageSpectrum .u-baseColor--buttonLight .icon:before,.u-imageSpectrum .u-baseColor--buttonLight .svgIcon {color: rgba(255, 255, 255, 0.8) !important; fill: rgba(255, 255, 255, 0.8) !important;}
.u-imageSpectrum .u-baseColor--buttonDark {border-color: rgba(255, 255, 255, 0.9490196078431372) !important; color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--buttonDark:hover {border-color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--buttonDark .icon:before,.u-imageSpectrum .u-baseColor--buttonDark .svgIcon {color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--buttonNormal {border-color: rgba(255, 255, 255, 0.8980392156862745) !important; color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--buttonNormal:hover {border-color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--buttonNormal .icon:before,.u-imageSpectrum .u-baseColor--buttonNormal .svgIcon {color: rgba(255, 255, 255, 0.9490196078431372) !important; fill: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--buttonDark.button--filled,.u-imageSpectrum .u-baseColor--buttonDark.button--withChrome.is-active {background-color: rgba(255, 255, 255, 1) !important; border-color: rgba(255, 255, 255, 1) !important; color: rgba(0, 0, 0, 0.24705882352941178) !important; fill: rgba(0, 0, 0, 0.24705882352941178) !important;}
.u-imageSpectrum .u-baseColor--buttonNormal.button--filled,.u-imageSpectrum .u-baseColor--buttonNormal.button--withChrome.is-active {background-color: rgba(255, 255, 255, 0.9490196078431372) !important; border-color: rgba(255, 255, 255, 0.9490196078431372) !important; color: rgba(0, 0, 0, 0.24705882352941178) !important; fill: rgba(0, 0, 0, 0.24705882352941178) !important;}
.u-imageSpectrum .u-baseColor--link {color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--link.link--darkenOnHover:hover {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--link.link--darken:hover,.u-imageSpectrum .u-baseColor--link.link--darken:focus,.u-imageSpectrum .u-baseColor--link.link--darken:active {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--link.link--dark {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--link.link--dark.link--darken:hover,.u-imageSpectrum .u-baseColor--link.link--dark.link--darken:focus,.u-imageSpectrum .u-baseColor--link.link--dark.link--darken:active {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--link.link--darker {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--placeholderNormal ::-webkit-input-placeholder {color: rgba(255, 255, 255, 0.8);}
.u-imageSpectrum .u-baseColor--placeholderNormal ::-moz-placeholder {color: rgba(255, 255, 255, 0.8);}
.u-imageSpectrum .u-baseColor--placeholderNormal :-ms-input-placeholder {color: rgba(255, 255, 255, 0.8);}
.u-imageSpectrum .svgIcon--logoNew path:nth-child(1) {stroke: none !important; fill: rgba(255, 255, 255, 0.4) !important;}
.u-imageSpectrum .svgIcon--logoNew path:nth-child(2) {stroke: none !important; fill: rgba(255, 255, 255, 0.4980392156862745) !important;}
.u-imageSpectrum .svgIcon--logoNew path:nth-child(3) {stroke: none !important; fill: rgba(255, 255, 255, 0.6980392156862745) !important;}
.u-imageSpectrum .svgIcon--logoNew path:nth-child(4) {stroke: none !important; fill: rgba(255, 255, 255, 0.8980392156862745) !important;}
.u-imageSpectrum .svgIcon--logoWordmark {stroke: none !important; fill: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .svgIcon--logoMonogram {stroke: none !important; fill: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--borderLight {border-color: rgba(255, 255, 255, 0.6980392156862745) !important;}
.u-imageSpectrum .u-accentColor--borderNormal {border-color: rgba(255, 255, 255, 0.8980392156862745) !important;}
.u-imageSpectrum .u-accentColor--borderDark {border-color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--iconLight .svgIcon,.u-imageSpectrum .u-accentColor--iconLight.svgIcon {fill: rgba(255, 255, 255, 0.8) !important;}
.u-imageSpectrum .u-accentColor--iconNormal .svgIcon,.u-imageSpectrum .u-accentColor--iconNormal.svgIcon {fill: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--iconDark .svgIcon,.u-imageSpectrum .u-accentColor--iconDark.svgIcon {fill: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--textNormal {color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--hoverTextNormal:hover {color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--textNormal.u-accentColor--textDarken:hover {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--textDark {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--backgroundLight {background-color: rgba(255, 255, 255, 0.8980392156862745) !important;}
.u-imageSpectrum .u-accentColor--backgroundNormal {background-color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--backgroundDark {background-color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--buttonDark {border-color: rgba(255, 255, 255, 0.9490196078431372) !important; color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--buttonDark:hover {border-color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--buttonDark .icon:before,.u-imageSpectrum .u-accentColor--buttonDark .svgIcon{color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--buttonNormal:not(.clapButton--largePill) {border-color: rgba(255, 255, 255, 0.8980392156862745) !important; color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--buttonNormal:hover {border-color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--buttonNormal .icon:before,.u-imageSpectrum .u-accentColor--buttonNormal .svgIcon{color: rgba(255, 255, 255, 0.9490196078431372) !important; fill: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--buttonNormal.button--filled .icon:before,.u-imageSpectrum .u-accentColor--buttonNormal.button--filled .svgIcon{color: rgba(0, 0, 0, 0.24705882352941178) !important; fill: rgba(0, 0, 0, 0.24705882352941178) !important;}
.u-imageSpectrum .u-accentColor--buttonDark.button--filled,.u-imageSpectrum .u-accentColor--buttonDark.button--withChrome.is-active,.u-imageSpectrum .u-accentColor--fillWhenActive.is-active {background-color: rgba(255, 255, 255, 1) !important; border-color: rgba(255, 255, 255, 1) !important; color: rgba(0, 0, 0, 0.24705882352941178) !important; fill: rgba(0, 0, 0, 0.24705882352941178) !important;}
.u-imageSpectrum .u-accentColor--buttonNormal.button--filled:not(.clapButton--largePill),.u-imageSpectrum .u-accentColor--buttonNormal.button--withChrome.is-active:not(.clapButton--largePill) {background-color: rgba(255, 255, 255, 0.9490196078431372) !important; border-color: rgba(255, 255, 255, 0.9490196078431372) !important; color: rgba(0, 0, 0, 0.24705882352941178) !important; fill: rgba(0, 0, 0, 0.24705882352941178) !important;}
.u-imageSpectrum .postArticle.is-withAccentColors .markup--user,.u-imageSpectrum .postArticle.is-withAccentColors .markup--query {color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--highlightFaint {background-color: rgba(255, 255, 255, 0.2) !important;}
.u-imageSpectrum .u-accentColor--highlightStrong.is-active .svgIcon {fill: rgba(255, 255, 255, 0.6) !important;}
.postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-other {background-color: rgba(255, 255, 255, 0.2) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-other {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.2), rgba(255, 255, 255, 0.2));}
.postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-me {background-color: rgba(255, 255, 255, 0.4) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-me {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.4), rgba(255, 255, 255, 0.4));}
.postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-targeted {background-color: rgba(255, 255, 255, 0.6) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-targeted {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.6), rgba(255, 255, 255, 0.6));}
.postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-selected {background-color: rgba(255, 255, 255, 0.6) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-selected {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.6), rgba(255, 255, 255, 0.6));}
.postArticle.is-withAccentColors .u-imageSpectrum .markup--highlight {background-color: rgba(255, 255, 255, 0.6) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .u-imageSpectrum .markup--highlight {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.6), rgba(255, 255, 255, 0.6));}.u-resetSpectrum .u-tintBgColor {background-color: rgba(255, 255, 255, 1) !important;}.u-resetSpectrum .u-tintBgColor .u-fadeLeft:before {background-image: linear-gradient(to right, rgba(255, 255, 255, 1) 0%, rgba(255, 255, 255, 0) 100%) !important;}.u-resetSpectrum .u-tintBgColor .u-fadeRight:after {background-image: linear-gradient(to right, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 1) 100%) !important;}
.u-resetSpectrum .u-baseColor--borderLight {border-color: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .u-baseColor--borderNormal {border-color: rgba(0, 0, 0, 0.4980392156862745) !important;}
.u-resetSpectrum .u-baseColor--borderDark {border-color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--iconLight .svgIcon,.u-resetSpectrum .u-baseColor--iconLight.svgIcon {fill: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .u-baseColor--iconNormal .svgIcon,.u-resetSpectrum .u-baseColor--iconNormal.svgIcon {fill: rgba(0, 0, 0, 0.4980392156862745) !important;}
.u-resetSpectrum .u-baseColor--iconDark .svgIcon,.u-resetSpectrum .u-baseColor--iconDark.svgIcon {fill: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--textNormal {color: rgba(0, 0, 0, 0.4980392156862745) !important;}
.u-resetSpectrum .u-baseColor--textNormal.u-baseColor--textDarken:hover {color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--textDark {color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--textDarker {color: rgba(0, 0, 0, 0.8) !important;}
.u-resetSpectrum .u-baseColor--backgroundLight {background-color: rgba(0, 0, 0, 0.09803921568627451) !important;}
.u-resetSpectrum .u-baseColor--backgroundNormal {background-color: rgba(0, 0, 0, 0.2) !important;}
.u-resetSpectrum .u-baseColor--backgroundDark {background-color: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .u-baseColor--buttonLight {border-color: rgba(0, 0, 0, 0.2980392156862745) !important; color: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .u-baseColor--buttonLight:hover {border-color: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .u-baseColor--buttonLight .icon:before,.u-resetSpectrum .u-baseColor--buttonLight .svgIcon {color: rgba(0, 0, 0, 0.2980392156862745) !important; fill: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .u-baseColor--buttonDark {border-color: rgba(0, 0, 0, 0.6) !important; color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--buttonDark:hover {border-color: rgba(0, 0, 0, 0.8) !important;}
.u-resetSpectrum .u-baseColor--buttonDark .icon:before,.u-resetSpectrum .u-baseColor--buttonDark .svgIcon {color: rgba(0, 0, 0, 0.6) !important; fill: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--buttonNormal {border-color: rgba(0, 0, 0, 0.4980392156862745) !important; color: rgba(0, 0, 0, 0.4980392156862745) !important;}
.u-resetSpectrum .u-baseColor--buttonNormal:hover {border-color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--buttonNormal .icon:before,.u-resetSpectrum .u-baseColor--buttonNormal .svgIcon {color: rgba(0, 0, 0, 0.4980392156862745) !important; fill: rgba(0, 0, 0, 0.4980392156862745) !important;}
.u-resetSpectrum .u-baseColor--buttonDark.button--filled,.u-resetSpectrum .u-baseColor--buttonDark.button--withChrome.is-active {background-color: rgba(0, 0, 0, 0.2980392156862745) !important; border-color: rgba(0, 0, 0, 0.2980392156862745) !important; color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-resetSpectrum .u-baseColor--buttonNormal.button--filled,.u-resetSpectrum .u-baseColor--buttonNormal.button--withChrome.is-active {background-color: rgba(0, 0, 0, 0.2) !important; border-color: rgba(0, 0, 0, 0.2) !important; color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-resetSpectrum .u-baseColor--link {color: rgba(0, 0, 0, 0.4980392156862745) !important;}
.u-resetSpectrum .u-baseColor--link.link--darkenOnHover:hover {color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--link.link--darken:hover,.u-resetSpectrum .u-baseColor--link.link--darken:focus,.u-resetSpectrum .u-baseColor--link.link--darken:active {color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--link.link--dark {color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--link.link--dark.link--darken:hover,.u-resetSpectrum .u-baseColor--link.link--dark.link--darken:focus,.u-resetSpectrum .u-baseColor--link.link--dark.link--darken:active {color: rgba(0, 0, 0, 0.8) !important;}
.u-resetSpectrum .u-baseColor--link.link--darker {color: rgba(0, 0, 0, 0.8) !important;}
.u-resetSpectrum .u-baseColor--placeholderNormal ::-webkit-input-placeholder {color: rgba(0, 0, 0, 0.2980392156862745);}
.u-resetSpectrum .u-baseColor--placeholderNormal ::-moz-placeholder {color: rgba(0, 0, 0, 0.2980392156862745);}
.u-resetSpectrum .u-baseColor--placeholderNormal :-ms-input-placeholder {color: rgba(0, 0, 0, 0.2980392156862745);}
.u-resetSpectrum .svgIcon--logoNew path:nth-child(1) {stroke: none !important; fill: rgba(0, 0, 0, 0.2) !important;}
.u-resetSpectrum .svgIcon--logoNew path:nth-child(2) {stroke: none !important; fill: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .svgIcon--logoNew path:nth-child(3) {stroke: none !important; fill: rgba(0, 0, 0, 0.4) !important;}
.u-resetSpectrum .svgIcon--logoNew path:nth-child(4) {stroke: none !important; fill: rgba(0, 0, 0, 0.4980392156862745) !important;}
.u-resetSpectrum .svgIcon--logoWordmark {stroke: none !important; fill: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .svgIcon--logoMonogram {stroke: none !important; fill: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-accentColor--borderLight {border-color: rgba(2, 184, 117, 1) !important;}
.u-resetSpectrum .u-accentColor--borderNormal {border-color: rgba(2, 184, 117, 1) !important;}
.u-resetSpectrum .u-accentColor--borderDark {border-color: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--iconLight .svgIcon,.u-resetSpectrum .u-accentColor--iconLight.svgIcon {fill: rgba(2, 184, 117, 1) !important;}
.u-resetSpectrum .u-accentColor--iconNormal .svgIcon,.u-resetSpectrum .u-accentColor--iconNormal.svgIcon {fill: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--iconDark .svgIcon,.u-resetSpectrum .u-accentColor--iconDark.svgIcon {fill: rgba(28, 153, 99, 1) !important;}
.u-resetSpectrum .u-accentColor--textNormal {color: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--hoverTextNormal:hover {color: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--textNormal.u-accentColor--textDarken:hover {color: rgba(28, 153, 99, 1) !important;}
.u-resetSpectrum .u-accentColor--textDark {color: rgba(28, 153, 99, 1) !important;}
.u-resetSpectrum .u-accentColor--backgroundLight {background-color: rgba(2, 184, 117, 1) !important;}
.u-resetSpectrum .u-accentColor--backgroundNormal {background-color: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--backgroundDark {background-color: rgba(28, 153, 99, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonDark {border-color: rgba(0, 171, 107, 1) !important; color: rgba(28, 153, 99, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonDark:hover {border-color: rgba(28, 153, 99, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonDark .icon:before,.u-resetSpectrum .u-accentColor--buttonDark .svgIcon{color: rgba(28, 153, 99, 1) !important; fill: rgba(28, 153, 99, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonNormal:not(.clapButton--largePill) {border-color: rgba(2, 184, 117, 1) !important; color: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonNormal:hover {border-color: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonNormal .icon:before,.u-resetSpectrum .u-accentColor--buttonNormal .svgIcon{color: rgba(0, 171, 107, 1) !important; fill: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonNormal.button--filled .icon:before,.u-resetSpectrum .u-accentColor--buttonNormal.button--filled .svgIcon{color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonDark.button--filled,.u-resetSpectrum .u-accentColor--buttonDark.button--withChrome.is-active,.u-resetSpectrum .u-accentColor--fillWhenActive.is-active {background-color: rgba(28, 153, 99, 1) !important; border-color: rgba(28, 153, 99, 1) !important; color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonNormal.button--filled:not(.clapButton--largePill),.u-resetSpectrum .u-accentColor--buttonNormal.button--withChrome.is-active:not(.clapButton--largePill) {background-color: rgba(0, 171, 107, 1) !important; border-color: rgba(0, 171, 107, 1) !important; color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-resetSpectrum .postArticle.is-withAccentColors .markup--user,.u-resetSpectrum .postArticle.is-withAccentColors .markup--query {color: rgba(0, 171, 107, 1) !important;}</style>
    </div>
   </div>
  </div>
  <div class="loadingBar"></div>
  <script>// <![CDATA[
window["obvInit"] = function (opt_embedded) {window["obvInit"]["embedded"] = opt_embedded; window["obvInit"]["ready"] = true;}
// ]]></script>
  <script>// <![CDATA[
var GLOBALS = {"audioUrl":"https://d1fcbxp97j4nb2.cloudfront.net","baseUrl":"https://medium.freecodecamp.org","buildLabel":"30975","currentUser":{"userId":"lo_1a3b00d1e818","isVerified":false,"subscriberEmail":"","hasPastMemberships":false,"isEnrolledInHightower":false,"isEligibleForHightower":false},"currentUserHasUnverifiedEmail":false,"isAuthenticated":false,"isCurrentUserVerified":false,"mediumTwitterScreenName":"medium","miroUrl":"https://cdn-images-1.medium.com","moduleUrls":{"base":"https://cdn-static-1.medium.com/_/fp/gen-js/main-base.bundle.pWubqzC7vUwGdzM3DrvA7A.js","common-async":"https://cdn-static-1.medium.com/_/fp/gen-js/main-common-async.bundle.PIiSUy8B5K9Dfs89lMMlbA.js","home-screens":"https://cdn-static-1.medium.com/_/fp/gen-js/main-home-screens.bundle._uzwF5lj954yrdhE-RWUxQ.js","misc-screens":"https://cdn-static-1.medium.com/_/fp/gen-js/main-misc-screens.bundle.RrSJyTbNLwVvpAPQSpeJqQ.js","notes":"https://cdn-static-1.medium.com/_/fp/gen-js/main-notes.bundle.hgzflAyf5RTxbMtgptZUJA.js","payments":"https://cdn-static-1.medium.com/_/fp/gen-js/main-payments.bundle.3t2g-KGDVa-lbItiQssElw.js","posters":"https://cdn-static-1.medium.com/_/fp/gen-js/main-posters.bundle.ltNm8ABnNREzi-CT0CbtEQ.js","pubs":"https://cdn-static-1.medium.com/_/fp/gen-js/main-pubs.bundle.J70OVnn7kgh-gghT5JB17w.js","stats":"https://cdn-static-1.medium.com/_/fp/gen-js/main-stats.bundle.6iZYpjm_fB_rRMZUH4eC4g.js"},"previewConfig":{"weightThreshold":1,"weightImageParagraph":0.51,"weightIframeParagraph":0.8,"weightTextParagraph":0.08,"weightEmptyParagraph":0,"weightP":0.003,"weightH":0.005,"weightBq":0.003,"minPTextLength":60,"truncateBoundaryChars":20,"detectTitle":true,"detectTitleLevThreshold":0.15},"productName":"Medium","supportsEdit":true,"termsUrl":"//medium.com/policy/9db0094a1e0f","textshotHost":"textshot.medium.com","transactionId":"1507422229920:9dc37afe2223","useragent":{"browser":"chrome","family":"chrome","os":"windows","version":45,"supportsDesktopEdit":true,"supportsInteract":true,"supportsView":true,"isMobile":false,"isTablet":false,"isNative":false,"supportsFileAPI":true,"isTier1":true,"clientVersion":"","unknownParagraphsBad":false,"clientChannel":"","supportsRealScrollEvents":true,"supportsVhUnits":true,"ruinsViewportSections":false,"supportsHtml5Video":true,"supportsMagicUnderlines":true,"isWebView":false,"isFacebookWebView":false,"supportsProgressiveMedia":true,"supportsPromotedPosts":true,"isBot":false,"isNativeIphone":false,"supportsCssVariables":false,"supportsVideoSections":false,"emojiSupportLevel":1,"supportsScrollableMetabar":true},"variants":{"allow_access":true,"allow_signup":true,"allow_test_auth":"disallow","signin_services":"twitter,facebook,google,email,google-fastidv","signup_services":"twitter,facebook,google,email,google-fastidv","android_rating_prompt_recommend_threshold":5,"google_sign_in_android":true,"enable_onboarding":true,"ios_custom_miro_url":"https://cdn-images-1.medium.com","reengagement_notification_duration":3,"browsable_stream_config_bucket":"curated-topics","ios_small_post_preview_truncation_length":5.5,"ios_large_post_preview_truncation_length":5.5,"disable_ios_catalog_badging":true,"enable_series_creation":true,"enable_your_series_pages":true,"enable_productionized_series":true,"enable_dedicated_series_tab_api_ios":true,"enable_clap_milestone_notifications":true,"enable_series_stats_page":true,"enable_post_import":true,"enable_sponsored_post_labelling":true,"enable_logged_in_follow_on_collection_post":true,"retire_ranked_feed":true,"enable_export_members":true,"enable_series_card_background_creation":true,"available_membership_plans":"60e220181034","available_monthly_plan":"60e220181034","available_annual_plan":"2c754bcc2995","enable_sms":true,"enable_series_in_user_profiles":true,"enable_new_logged_out_bento_operation":true,"is_not_medium_subscriber":true,"subs_landing_copy_experiments":"short","logged_out_homepage_promo":"content","enable_dynamic_topic_windows":true,"enable_emoji_in_editor":true,"enable_glyph":true,"glyph_font_set":"m","enable_branding":true,"enable_upsell_tracking":true,"enable_sequence_carousel":true,"enable_multirecommends":true,"enable_updated_homepage_order":true,"enable_auto_grid_on_new_from_your_network":true,"enable_unbundled_you_might_like":true,"enable_noteworthy_promo":true,"enable_interest_graph_vtwo_topic_suggestions":true,"enable_popchunks":true,"enable_hightower":true,"enable_user_post_metering":true,"max_premium_content_per_user_under_metering":3,"enable_welcome_email_v2":true,"enable_topic_writer_onboarding":true,"enable_hightower_onboarding_blinker":true,"enable_algolia_search_reporting":true,"enable_direct_signin":true,"enable_strong_graph_chp_reorder":true,"remove_people_and_pubs_onboarding_experiment":true,"enable_post_page_cleanup":"remove_all"},"xsrfToken":"","iosAppId":"828256236","supportEmail":"yourfriends@medium.com","fp":{"/icons/monogram-mask.svg":"https://cdn-static-1.medium.com/_/fp/icons/monogram-mask.KPLCSFEZviQN0jQ7veN2RQ.svg","/icons/favicon-dev-editor.ico":"https://cdn-static-1.medium.com/_/fp/icons/favicon-dev-editor.YKKRxBO8EMvIqhyCwIiJeQ.ico","/icons/favicon-hatch-editor.ico":"https://cdn-static-1.medium.com/_/fp/icons/favicon-hatch-editor.BuEyHIqlyh2s_XEk4Rl32Q.ico","/icons/favicon-medium-editor.ico":"https://cdn-static-1.medium.com/_/fp/icons/favicon-medium-editor.PiakrZWB7Yb80quUVQWM6g.ico"},"authBaseUrl":"https://medium.com","imageUploadSizeMb":25,"isAuthDomainRequest":false,"domainCollectionSlug":"free-code-camp","algoliaApiEndpoint":"https://MQ57UUUQZ2-dsn.algolia.net","algoliaAppId":"MQ57UUUQZ2","algoliaSearchOnlyApiKey":"394474ced050e3911ae2249ecc774921","iosAppStoreUrl":"https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8","iosAppLinkBaseUrl":"medium:","algoliaIndexPrefix":"medium_","androidPlayStoreUrl":"https://play.google.com/store/apps/details?id=com.medium.reader","googleClientId":"216296035834-k1k6qe060s2tp2a2jam4ljdcms00sttg.apps.googleusercontent.com","androidPackage":"com.medium.reader","androidPlayStoreMarketScheme":"market://details?id=com.medium.reader","googleAuthUri":"https://accounts.google.com/o/oauth2/auth","androidScheme":"medium","layoutData":{"useDynamicScripts":false,"googleAnalyticsTrackingCode":"UA-24232453-2","jsShivUrl":"https://cdn-static-1.medium.com/_/fp/js/shiv.RI2ePTZ5gFmMgLzG5bEVAA.js","useDynamicCss":false,"faviconUrl":"https://cdn-static-1.medium.com/_/fp/icons/favicon-rebrand-medium.3Y6xpZ-0FSdWDnPM3hSBIA.ico","faviconImageId":"1*8I-HPL0bfoIzGied-dzOvA.png","fontSets":[{"id":8,"url":"https://glyph.medium.com/css/e/sr/latin/e/ssr/latin/e/ssb/latin/m.css"},{"id":9,"url":"https://glyph.medium.com/css/mkt.css"}],"editorFaviconUrl":"https://cdn-static-1.medium.com/_/fp/icons/favicon-rebrand-medium-editor.3Y6xpZ-0FSdWDnPM3hSBIA.ico","glyphUrl":"https://glyph.medium.com"},"authBaseUrlRev":"moc.muidem//:sptth","isDnt":false,"stripePublishableKey":"pk_live_7FReX44VnNIInZwrIIx6ghjl","archiveUploadSizeMb":100,"paymentData":{"currencies":{"1":{"label":"US Dollar","external":"usd"}},"countries":{"1":{"label":"United States of America","external":"US"}},"accountTypes":{"1":{"label":"Individual","external":"individual"},"2":{"label":"Company","external":"company"}}},"previewConfig2":{"weightThreshold":1,"weightImageParagraph":0.05,"raiseImage":true,"enforceHeaderHierarchy":true,"isImageInsetRight":true},"isAmp":false,"iosScheme":"medium","isSwBoot":false,"lightstep":{"accessToken":"ce5be895bef60919541332990ac9fef2","carrier":"{\"ot-tracer-spanid\":\"67e432090b8662a4\",\"ot-tracer-traceid\":\"0606cce558cc9b4c\",\"ot-tracer-sampled\":\"true\"}","host":"collector-medium.lightstep.com"},"facebook":{"key":"542599432471018","namespace":"medium-com","scope":{"default":["public_profile","email","user_friends"],"connect":["public_profile","email","user_friends"],"login":["public_profile","email","user_friends"],"share":["public_profile","email","user_friends","publish_actions"]}},"mailingListArchiveUploadSizeMb":2,"availableMembershipPlans":["60e220181034"],"editorsPicksTopicId":"3985d2a191c5","popularOnMediumTopicId":"9d34e48ecf94","memberContentTopicId":"13d7efd82fb2","audioContentTopicId":"3792abbd134","brandedSequenceId":"7d337ddf1941","isDoNotAuth":false,"goldfinchUrl":"https://goldfinch.medium.com","buggle":{"url":"https://buggle.medium.com","videoUrl":"https://cdn-videos-1.medium.com","audioUrl":"https://cdn-audio-1.medium.com"}}
// ]]></script>
  <script charset="UTF-8" src="https://cdn-static-1.medium.com/_/fp/gen-js/main-base.bundle.pWubqzC7vUwGdzM3DrvA7A.js" async></script>
  <script>// <![CDATA[
window["obvInit"]({"value":{"id":"7e8f5572276e","versionId":"25a281a247ad","creatorId":"6c2442a0e7f7","creator":{"userId":"6c2442a0e7f7","name":"Shalvah A.","username":"shalvah","createdAt":1463094790979,"lastPostCreatedAt":1507285875096,"imageId":"1*FCiNhJYh7H9oDbPq7w5V6A.jpeg","backgroundImageId":"","bio":"Learning. Building. Believing. Software Engineer. UX Enthusiast. Introspective. A branch trying to abide.","twitterScreenName":"theshalvah","socialStats":{"userId":"6c2442a0e7f7","usersFollowedCount":77,"usersFollowedByCount":748,"type":"SocialStats"},"social":{"userId":"lo_1a3b00d1e818","targetUserId":"6c2442a0e7f7","type":"Social"},"facebookAccountId":"1768257200092722","allowNotes":1,"type":"User"},"homeCollection":{"id":"336d898217ee","name":"freeCodeCamp","slug":"free-code-camp","tags":["TECHNOLOGY","DESIGN","TECH","STARTUP","PRODUCTIVITY"],"creatorId":"8b318225c16a","description":"Our community publishes stories worth reading on development, design, and data science.","shortDescription":"Our community publishes stories worth reading on…","image":{"imageId":"1*MotlWcSa2n6FrOx3ul89kw.png","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"metadata":{"followerCount":331943,"activeAt":1507330990093},"virtuals":{"permissions":{"canPublish":false,"canPublishAll":false,"canRepublish":false,"canRemove":false,"canManageAll":false,"canSubmit":false,"canEditPosts":false,"canAddWriters":false,"canViewStats":false,"canSendNewsletter":false,"canViewLockedPosts":false,"canViewCloaked":false,"canEditOwnPosts":false,"canBeAssignedAuthor":false,"canEnrollInHightower":false,"canLockPostsForMediumMembers":false},"isSubscribed":false,"isNewsletterSubscribed":false,"memberOfMembershipPlanId":"","isEnrolledInHightower":false,"isEligibleForHightower":false},"logo":{"imageId":"1*wViBNJ1o9rM5p6b-gf3vxg.png","filter":"","backgroundSize":"","originalWidth":600,"originalHeight":72,"strategy":"resample","height":0,"width":0},"twitterUsername":"freecodecamp","facebookPageName":"freecodecamp","publicEmail":"quincy@freecodecamp.com","collectionMastheadId":"af94c9c16d4","domain":"medium.freecodecamp.org","sections":[{"type":2,"collectionHeaderMetadata":{"backgroundImage":{},"logoImage":{"id":"1*JAG6GC1APQdyo2PegDDi2g@2x.png","originalWidth":601,"originalHeight":81,"alt":"freeCodeCamp"},"alignment":2,"layout":4}},{"type":1,"postListMetadata":{"source":3,"layout":6,"number":1,"postIds":["ee82d15c576d"]}},{"type":1,"postListMetadata":{"source":1,"layout":6,"number":25,"postIds":[]}},{"type":1,"postListMetadata":{"source":2,"layout":6,"number":25,"postIds":[],"sectionHeader":"Trending"}}],"tintColor":"#FF006400","lightText":true,"favicon":{"imageId":"1*B6_f-_SxscJ9FCuIjOrQAQ.jpeg","filter":"","backgroundSize":"","originalWidth":657,"originalHeight":654,"strategy":"resample","height":0,"width":0},"colorPalette":{"defaultBackgroundSpectrum":{"colorPoints":[{"color":"#FF429A35","point":0},{"color":"#FF408F33","point":0.1},{"color":"#FF3E8432","point":0.2},{"color":"#FF3B7830","point":0.3},{"color":"#FF376C2D","point":0.4},{"color":"#FF33602A","point":0.5},{"color":"#FF2E5426","point":0.6},{"color":"#FF284721","point":0.7},{"color":"#FF223A1C","point":0.8},{"color":"#FF1A2C15","point":0.9},{"color":"#FF111E0D","point":1}],"backgroundColor":"#FFFFFFFF"},"tintBackgroundSpectrum":{"colorPoints":[{"color":"#FF006400","point":0},{"color":"#FF2A7920","point":0.1},{"color":"#FF458C39","point":0.2},{"color":"#FF5D9E50","point":0.3},{"color":"#FF74AF66","point":0.4},{"color":"#FF8ABF7C","point":0.5},{"color":"#FFA0CE92","point":0.6},{"color":"#FFB5DDA8","point":0.7},{"color":"#FFCAEBBE","point":0.8},{"color":"#FFDFF8D4","point":0.9},{"color":"#FFF3FFEA","point":1}],"backgroundColor":"#FF006400"},"highlightSpectrum":{"colorPoints":[{"color":"#FFE3FBD9","point":0},{"color":"#FFDEFAD3","point":0.1},{"color":"#FFD9FACC","point":0.2},{"color":"#FFD3F9C6","point":0.3},{"color":"#FFCEF9C0","point":0.4},{"color":"#FFC9F8B9","point":0.5},{"color":"#FFC3F8B3","point":0.6},{"color":"#FFBDF7AD","point":0.7},{"color":"#FFB8F7A6","point":0.8},{"color":"#FFB2F6A0","point":0.9},{"color":"#FFACF699","point":1}],"backgroundColor":"#FFFFFFFF"}},"navItems":[{"type":1,"title":"Dev","tagSlug":"web-development","url":"https://medium.freecodecamp.org/tagged/web-development","source":"tagSlug"},{"type":1,"title":"Design","tagSlug":"design","url":"https://medium.freecodecamp.org/tagged/design","source":"tagSlug"},{"type":1,"title":"Data","tagSlug":"data-science","url":"https://medium.freecodecamp.org/tagged/data-science","source":"tagSlug"},{"type":3,"title":"Learn to code for free","url":"https://freecodecamp.com?ref=mn"}],"colorBehavior":2,"instantArticlesState":0,"acceleratedMobilePagesState":0,"googleAnalyticsId":"UA-55446531-3","ampLogo":{"imageId":"","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"header":{"backgroundImage":{},"logoImage":{"id":"1*JAG6GC1APQdyo2PegDDi2g@2x.png","originalWidth":601,"originalHeight":81,"alt":"freeCodeCamp"},"alignment":2,"layout":4},"type":"Collection"},"homeCollectionId":"336d898217ee","title":"Parsing math expressions with JavaScript","detectedLanguage":"en","latestVersion":"25a281a247ad","latestPublishedVersion":"25a281a247ad","hasUnpublishedEdits":true,"latestRev":2647,"createdAt":1494701766581,"updatedAt":1507342051956,"acceptedAt":0,"firstPublishedAt":1495481407903,"latestPublishedAt":1495481407903,"vote":false,"experimentalCss":"","displayAuthor":"","content":{"subtitle":"A while ago, I wrote about tokenizing a math expression, with Javascript as the language of choice. The tokenizer I built in that article…","bodyModel":{"paragraphs":[{"name":"59de","type":3,"text":"Parsing math expressions with JavaScript","markups":[]},{"name":"3674","type":4,"text":"","markups":[],"layout":5,"metadata":{"id":"1*zs_bmXKVXHJQuz0pnsDdqQ.jpeg","originalWidth":4272,"originalHeight":2848}},{"name":"996d","type":1,"text":"A while ago, I wrote about tokenizing a math expression, with Javascript as the language of choice. The tokenizer I built in that article was the first component of my quest to render and solve math expressions using Javascript, or any other language. In this article, I’ll walk through how to build the next component: the parser.","markups":[{"type":3,"start":27,"end":56,"href":"https://medium.freecodecamp.com/how-to-build-a-math-expression-tokenizer-using-javascript-3638d4e5fbe9","title":"","rel":"","anchorType":0}]},{"name":"322e","type":1,"text":"What is the job of the parser? Quite simple. It parses the expression. (Duh.) Okay, actually, Wikipedia has a good answer:","markups":[{"type":3,"start":94,"end":104,"href":"https://en.wikipedia.org/wiki/Parsing#Parser","title":"","rel":"","anchorType":0}]},{"name":"1ea2","type":7,"text":"A parser is a software component that takes input data (frequently text) and builds a data structure — often some kind of parse tree, abstract syntax tree or other hierarchical structure — giving a structural representation of the input, checking for correct syntax in the process. The parsing may be preceded or followed by other steps, or these may be combined into a single step. The parser is often preceded by a separate lexical analyser, which creates tokens from the sequence of input characters","markups":[]},{"name":"5978","type":1,"text":"So, in essence, this is what we’re trying to achieve:","markups":[]},{"name":"a21a","type":8,"text":"math expression =\x3e [parser] =\x3e some data structure (we'll get to this in a bit)","markups":[]},{"name":"1f24","type":4,"text":"Something like this (source: codeproject.com)","markups":[{"type":3,"start":29,"end":45,"href":"https://www.codeproject.com/Articles/50377/Create-Your-Own-Programming-Language","title":"","rel":"","anchorType":0}],"layout":1,"metadata":{"id":"1*jFWR28LjzW4rec1egUDwWg.gif","originalWidth":147,"originalHeight":409}},{"name":"61b4","type":1,"text":"Let’s skip ahead a bit: “… The parser is often preceded by a separate lexical analyzer, which creates tokens from the sequence of input characters”. This is talking about the tokenizer we built earlier. So, our parser won’t be receiving the raw math expression, but rather an array of tokens. So now, we have:","markups":[]},{"name":"ea1e","type":8,"text":"math expression =\x3e [tokenizer] =\x3e list of tokens =\x3e [parser] =\x3e some data structure","markups":[]},{"name":"de91","type":1,"text":"For the tokenizer, we had to come up with the algorithm manually. For the parser, we’ll be implementing an already existing algorithm, the Shunting-yard algorithm. Remember the “some data structure” above? With this algorithm, our parser can give us a data structure called an Abstract Syntax Tree (AST) or an alternative representation of the expression, known as Reverse Polish Notation (RPN).","markups":[{"type":3,"start":135,"end":163,"href":"https://en.wikipedia.org/wiki/Shunting-yard_algorithm","title":"","rel":"","anchorType":0}]},{"name":"43f3","type":3,"text":"Reverse Polish Notation","markups":[]},{"name":"977c","type":1,"text":"I’ll start with RPN. Again from Wikipedia, RPN is “a mathematical notation in which every operator follows all of its operands”. Instead of having, say, 3+4, RPN would be 3 4 +. Weird, I know. But the rule is that the operator has to come after all its operands.","markups":[{"type":3,"start":32,"end":41,"href":"https://en.wikipedia.org/wiki/Reverse_Polish_notation","title":"","rel":"","anchorType":0},{"type":1,"start":83,"end":126},{"type":1,"start":239,"end":244}]},{"name":"5787","type":1,"text":"Keep that rule in mind as we take a look at some more complex examples. Also remember that an operand for one operation can be the result of an earlier operation).","markups":[]},{"name":"5084","type":8,"text":"Algebraic: 3 - 4                        RPN: 3 4 -\n","markups":[]},{"name":"733b","type":8,"text":"Algebraic: 3 - 4 + 5                    RPN: 3 4 - 5 +\n","markups":[]},{"name":"dcae","type":8,"text":"Algebraic: 2^3                          RPN: 2 3 ^\n","markups":[]},{"name":"f569","type":8,"text":"Algebraic: 5 + ((1 + 2) × 4) ? 3        RPN: 5 1 2 + 4 * + 3 -\n","markups":[]},{"name":"d77d","type":8,"text":"Algebraic: sin(45)                      RPN: 45 sin\n","markups":[]},{"name":"b2ea","type":8,"text":"Algebraic: tan(x^2 + 2*x + 6)           RPN: x 2 ^ 2 x * + 6 + tan","markups":[]},{"name":"504f","type":1,"text":"Because the operator has to come after its operands, RPN is also known as postfix notation, and our “regular” algebraic notation is called infix.","markups":[{"type":2,"start":74,"end":90},{"type":2,"start":139,"end":144}]},{"name":"0b3a","type":1,"text":"How do you evaluate an expression in RPN? There’s a simple algorithm I use:","markups":[]},{"name":"6e6b","type":6,"text":"Read all the tokens from left to right till you get to an Operator or Function. Knowing that the Operator/Function takes n arguments (for instance, for +, n = 2; for cos(), n = 1), evaluate the last n preceding arguments with the Operator/Function, and replace all of them (Operator/Function + operands) with the result. Continue as before, until there are no more Operators/Functions left to read. The only (Literal or Variable) token left is your answer.","markups":[{"type":2,"start":0,"end":121},{"type":2,"start":122,"end":155},{"type":2,"start":157,"end":166},{"type":2,"start":171,"end":173},{"type":2,"start":174,"end":199},{"type":2,"start":201,"end":456}]},{"name":"79fd","type":1,"text":"(This is a simplified algorithm, which assumes the expression is valid. A couple indicators that the expression isn’t valid are if you have more than one token left at the end, or if the last token left is an Operator/Function.)","markups":[]},{"name":"f202","type":1,"text":"So, for something like 5 1 2 + 4 * + 3 ?:","markups":[]},{"name":"0bf6","type":8,"text":"read 5\nread 1\nread 2\nread +. + is an operator which takes 2 args, so calculate 1+2 and replace with the result (3). The expression is now 5 3 4 * + 3 -\nread 4\nread *. * is an operator which takes two args, so calculate 3*4 and replace with the result, 12. The expression is reduced to 5 12 + 3 -\nread +. + is an operator which takes two args, so calculate 5+12, replace by the result, 17. Now, we have 17 3 -\nread 3\nread -. - is an operator which takes two args, so calculate 17-3. The result is 14.","markups":[{"type":1,"start":138,"end":151},{"type":1,"start":285,"end":296},{"type":1,"start":402,"end":409},{"type":1,"start":496,"end":498}]},{"name":"2b9b","type":1,"text":"Hope you made an A in my little crash course on RPN. You did? OK, let’s move on.","markups":[]},{"name":"6ab4","type":3,"text":"Abstract Syntax Trees","markups":[]},{"name":"e38d","type":1,"text":"Wikipedia’s definition here might not be too helpful for many of us: “a tree representation of the abstract syntactic structure of source code written in a programming language.” For this use case, we can think of an AST as a data structure that represents the mathematical structure of the expression. This is better seen than said, so let’s draw a rough diagram. I’ll start with an AST for the simple expression 3+4:","markups":[]},{"name":"9b59","type":8,"text":"  [+]\n /   \\\n[3] [4]","markups":[]},{"name":"9f95","type":1,"text":"Each [] represents a node in the tree. So you can see at a glance, that the two tokens are brought together by a the + operator.","markups":[{"type":10,"start":5,"end":7}]},{"name":"a9bc","type":1,"text":"A more complex expression, 5 + ((1 + 2) * 4) ? 3:","markups":[]},{"name":"48c1","type":8,"text":"           [-]\n          /   \\\n        [+]    \\___[3]   \n       /  \\\n [5]__/   [*]\n         /   \\\n        [+]  [4]\n       /   \\  \n     [1]  [2]","markups":[]},{"name":"0d6a","type":1,"text":"Ah, a lovely little syntax tree. It links up all tokens and operators perfectly. You can see that evaluating this expression is much easier — just follow the tree.","markups":[]},{"name":"7e4d","type":1,"text":"So,why is an AST useful? It helps you represent the logic and structure of the expression correctly, making it easier for the expression to be evaluated. For instance, to evaluate the above expression, on our backend we could do something like this:","markups":[]},{"name":"1078","type":8,"text":"result = binaryoperation(+, 1, 2)\nresult = binaryoperation(*, result, 4)\nresult = binaryoperation(+, 5, result)\nresult = binaryoperation(-, result, 3)\nreturn result","markups":[]},{"name":"1052","type":1,"text":"In other words, for each operator (or function) node that the evaluator/compiler/interpreter encounters, it checks to see how many branches there are, and then evaluates the results of all those branches with the operator.","markups":[]},{"name":"a0d2","type":1,"text":"Okay, the crash course is over, now back to our parser. Our parser will convert the (tokenized) expression to RPN, and later to an AST. So let’s begin implementing it.","markups":[]},{"name":"6c7d","type":3,"text":"The Shunting-yard algorithm","markups":[]},{"name":"3387","type":1,"text":"Here’s the RPN version of the full algorithm (from our friend Wikipedia), and modified to fit with our tokenizer:","markups":[{"type":3,"start":46,"end":71,"href":"https://en.wikipedia.org/wiki/Shunting-yard_algorithm","title":"","rel":"","anchorType":0}]},{"name":"c501","type":6,"text":"While there are tokens to be read:","markups":[{"type":2,"start":0,"end":34,"href":"","title":"","rel":"","name":"","anchorType":0,"creatorIds":[],"userId":""}]},{"name":"0965","type":6,"text":"1. Read a token. Let’s call it t","markups":[{"type":10,"start":31,"end":32},{"type":2,"start":0,"end":32}]},{"name":"8128","type":6,"text":"2. If t is a Literal or Variable, push it to the output queue.","markups":[{"type":10,"start":6,"end":7,"href":"","title":"","rel":"","name":"","anchorType":0,"creatorIds":[],"userId":""},{"type":2,"start":0,"end":62,"href":"","title":"","rel":"","name":"","anchorType":0,"creatorIds":[],"userId":""}]},{"name":"50b5","type":6,"text":"3. If t is a Function,push it onto the stack.","markups":[{"type":10,"start":6,"end":7},{"type":2,"start":0,"end":45}]},{"name":"a900","type":6,"text":"4. If t is a Function Argument Separator (a comma), pop operators off the stack onto the output queue until the token at the top of the stack is a Left Parenthesis.","markups":[{"type":10,"start":6,"end":7},{"type":2,"start":0,"end":164}]},{"name":"6100","type":6,"text":"5. If t is an Operator:","markups":[{"type":10,"start":6,"end":7},{"type":2,"start":0,"end":23}]},{"name":"55d4","type":6,"text":"a. while there is an Operator token o at the top of the operator stack and either t is left-associative and has precedence is less than or equal to that of o, or t is right associative, and has precedence less than that of o, pop o off the operator stack, onto the output queue;","markups":[{"type":10,"start":36,"end":37},{"type":10,"start":82,"end":83},{"type":10,"start":156,"end":157},{"type":10,"start":162,"end":163},{"type":10,"start":223,"end":224},{"type":10,"start":230,"end":231},{"type":2,"start":0,"end":278}]},{"name":"3cf7","type":6,"text":"b. at the end of iteration push t onto the operator stack.","markups":[{"type":10,"start":32,"end":33},{"type":2,"start":0,"end":58}]},{"name":"96a7","type":6,"text":"6. If the token is a Left Parenthesis, push it onto the stack.","markups":[{"type":2,"start":0,"end":62}]},{"name":"a5ce","type":6,"text":"7. If the token is a Right Parenthesis, pop operators off the stack onto the output queue until the token at the top of the stack is a left parenthesis. Then pop the left parenthesis from the stack, but not onto the output queue.","markups":[{"type":2,"start":0,"end":229}]},{"name":"6348","type":6,"text":"8. If the token at the top of the stack is a Function, pop it onto the output queue.","markups":[{"type":2,"start":0,"end":84}]},{"name":"f9d8","type":6,"text":"When there are no more tokens to read, pop any Operator tokens on the stack onto the output queue.","markups":[{"type":2,"start":0,"end":98}]},{"name":"dc64","type":6,"text":"Exit.","markups":[{"type":2,"start":0,"end":5}]},{"name":"5408","type":1,"text":"(Side note: in case you read the earlier article, I’ve updated the list of recognized tokens to include the Function Argument Separator, aka comma).","markups":[{"type":2,"start":51,"end":52}]},{"name":"c9cf","type":1,"text":"The algorithm above assumes the expression is valid. I made it this way so it’s easily understandable in the context of an article. You can view the full algorithm on Wikipedia.","markups":[{"type":3,"start":164,"end":176,"href":"https://en.wikipedia.org/wiki/Shunting-yard_algorithm","title":"","rel":"","anchorType":0}]},{"name":"c626","type":1,"text":"You’ll observe a couple of things:","markups":[]},{"name":"22f1","type":9,"text":"We need two data structures: a stack to hold the functions and operators, and a queue for the output. If you aren’t familiar with these two data structures, here’s a primer for you: if you want to retrieve a value from a stack, you start with the last one you put in, whereas for a queue, you start with the first you put in.","markups":[{"type":1,"start":31,"end":37},{"type":1,"start":80,"end":86}]},{"name":"5737","type":8,"text":"// we'll use arrays to represent both of them\nvar outQueue=[];\nvar opStack=[];","markups":[]},{"name":"6429","type":9,"text":"We need to know the associativity of the operators. Associativity simply means in what order an expression containing several operations of the same kind are grouped in the absence of parentheses. For instance, 2 + 3 + 4 is canonically evaluated from left to right (2+ 3 =5, then 5 + 4 =9), so + has a left associativity. Compare that to 2 ^ 3 ^ 4, which is evaluated as 2 ^81, not 8 ^4. Thus ^ has a right associativity. We’ll package the associativities of the operators well encounter in a Javascriptobject:","markups":[{"type":3,"start":52,"end":65,"href":"https://en.wikipedia.org/wiki/Operator_associativity","title":"","rel":"","anchorType":0},{"type":1,"start":20,"end":34}]},{"name":"d283","type":8,"text":"var assoc = {\n  \"^\" : \"right\",\n  \"*\" : \"left\",\n  \"/\" : \"left\",\n  \"+\" : \"left\",\n  \"-\" : \"left\"\n };","markups":[]},{"name":"18a4","type":9,"text":"We also need to know the precedence of the operators. The precedence is a sort of ranking assigned to operators, so we can know in what order they should be evaluated if they appear in the same expression. Operators with higher precedence get evaluated first. For instance, * has a higher precedence than +, so 2 + 3 * 4 gets evaluated as 2 + 12, and not 5 * 4, unless parentheses are used. + and – have the same precedence, so 3 + 5 – 2 can be evaluated as either 8–2 or 3+3. Again, we’ll package the operator precedences in an object:","markups":[{"type":3,"start":58,"end":69,"href":"https://en.wikipedia.org/wiki/Order_of_operations","title":"","rel":"","anchorType":0},{"type":1,"start":25,"end":36}]},{"name":"f568","type":8,"text":"var prec = {\n  \"^\" : 4,\n  \"*\" : 3,\n  \"/\" : 3,\n  \"+\" : 2,\n  \"-\" : 2\n };","markups":[]},{"name":"0053","type":1,"text":"Now, lets update our Token class so that we can easily access the precedence and associativity via methods:","markups":[{"type":10,"start":21,"end":26}]},{"name":"9547","type":8,"text":"Token.prototype.precedence = function() {\n  return prec[this.value];\n };\n \n Token.prototype.associativity = function() {\n  return assoc[this.value];\n };","markups":[]},{"name":"23c4","type":9,"text":"We need a method that allows us to peek at the stack (to check the element at the top without removing it), and one that allows us to pop from the stack (retrieve and remove the item at the top). Fortunately, Javascript arrays already have a pop() method, so all we need to do is implement a peek() method. (Remember, for stacks, the element at the top is the one we added last.)","markups":[{"type":10,"start":242,"end":247},{"type":10,"start":292,"end":298},{"type":1,"start":35,"end":40},{"type":1,"start":134,"end":138}]},{"name":"abf2","type":8,"text":"Array.prototype.peek = function() {\n  return this.slice(-1)[0]; //retrieve the last element of the array\n };","markups":[]},{"name":"6f08","type":1,"text":"So here’s what we have:","markups":[]},{"name":"e988","type":8,"text":"function tokenize(expr) {\n  ...   // just paste the tokenizer code here\n}","markups":[]},{"name":"d5ad","type":8,"text":"function parse(inp){\n var outQueue=[];\n var opStack=[];","markups":[]},{"name":"acc8","type":8,"text":"Array.prototype.peek = function() {\n  return this.slice(-1)[0];\n };","markups":[]},{"name":"3be4","type":8,"text":"var assoc = {\n  \"^\" : \"right\",\n  \"*\" : \"left\",\n  \"/\" : \"left\",\n  \"+\" : \"left\",\n  \"-\" : \"left\"\n };","markups":[]},{"name":"42ae","type":8,"text":"var prec = {\n  \"^\" : 4,\n  \"*\" : 3,\n  \"/\" : 3,\n  \"+\" : 2,\n  \"-\" : 2\n };","markups":[]},{"name":"1174","type":8,"text":"Token.prototype.precedence = function() {\n  return prec[this.value];\n };\n \n Token.prototype.associativity = function() {\n  return assoc[this.value];\n };","markups":[]},{"name":"c345","type":8,"text":" //tokenize\n var tokens=tokenize(inp);","markups":[]},{"name":"4b73","type":8,"text":" tokens.forEach(function(v) {\n   ...   //apply the algorithm here\n });","markups":[]},{"name":"7ef9","type":8,"text":" return outQueue.concat(opStack.reverse());  // list of tokens in RPN\n}","markups":[]},{"name":"113a","type":1,"text":"I won’t delve into the algorithm’s implementation so I don’t bore you. It’s a pretty straightforward task, practically a word-for-word translation of the algorithm to code, so at the end of the day, here’s what we have:","markups":[]},{"name":"4e1c","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"0e844f3f882786bcca0b71e7200f64b9","thumbnailUrl":"https://i.embed.ly/1/image?url=https%3A%2F%2Favatars2.githubusercontent.com%2Fu%2F14361073%3Fv%3D3%26s%3D400&key=4fce0568f2ce49e8b54624ef71a8a5bd"}},{"name":"adfd","type":1,"text":"The toString function simply formats our RPN list of tokens in a readable format.","markups":[{"type":10,"start":4,"end":12}]},{"name":"b1fe","type":1,"text":"And we can test out our infix-to-postfix parser:","markups":[]},{"name":"a436","type":8,"text":"var rpn = parse(\"3 + 4 * 2 / ( 1 - 5 ) ^ 2 ^ 3\");\nconsole.log(toString(rpn));","markups":[]},{"name":"da12","type":1,"text":"Output:","markups":[]},{"name":"73ac","type":8,"text":"3 4 2 * 1 5 - 2 3 ^ ^ / +","markups":[]},{"name":"464c","type":1,"text":"RPN!!","markups":[]},{"name":"a51e","type":3,"text":"Time to plant a tree","markups":[]},{"name":"0d71","type":1,"text":"Now, let’s modify our parser so it returns an AST.","markups":[]},{"name":"fff4","type":1,"text":"To generate an AST instead of RPN, we’ll need to make a few modifications:","markups":[]},{"name":"7f81","type":9,"text":"We’ll create an object to represent a node in our AST. Each node has a value and two branches (which may be null):","markups":[{"type":10,"start":108,"end":112}]},{"name":"fe29","type":8,"text":"function ASTNode(token, leftChildNode, rightChildNode) {\n   this.token = token.value;\n   this.leftChildNode = leftChildNode;\n   this.rightChildNode = rightChildNode;\n}","markups":[]},{"name":"bbab","type":9,"text":"The second thing we’ll be doing is changing our output data structure to a stack. While the actual code for this is just to change the line var outQueue = [] to var outStack = [] (because it remains an array), the key change is in our understanding and treatment of this array.","markups":[{"type":10,"start":140,"end":157},{"type":10,"start":161,"end":178}]},{"name":"844d","type":1,"text":"Now, how is our infix-to-AST algorithm going to run? Basically, the same algorithm, with a few modifications:","markups":[]},{"name":"f7d1","type":10,"text":"Instead of pushing a Literal or Variable token onto our outQueue, we push a new node whose value is the token, and whose branches are null onto our outStack","markups":[{"type":10,"start":56,"end":64},{"type":10,"start":134,"end":138},{"type":10,"start":148,"end":156}]},{"name":"1f59","type":10,"text":"Instead of popping an Operator/Function token from the opStack , we replace the top two nodes on the outStack with a single node whose value is the token, and that has those two as its branches. Let’s create a function that does that:","markups":[{"type":10,"start":55,"end":62},{"type":10,"start":101,"end":109}]},{"name":"3f6d","type":8,"text":"Array.prototype.addNode = function (operatorToken) {\n  rightChildNode = this.pop();\n  leftChildNode = this.pop();\n  this.push(new ASTNode(operatorToken, leftChildNode, rightChildNode));\n }","markups":[]},{"name":"0c51","type":1,"text":"3. Our parser should now return a single node, the node at the top of our AST. Its two branches will contain the two child nodes, whose branches will contain their children,and so on, in a recursive manner. For instance, for an expression like 3 + 4 * 2 / ( 1–5 ) ^ 2 ^ 3, we expect the structure of our output node to be like this (in a horizontal form):","markups":[]},{"name":"3700","type":8,"text":"+ =\x3e 3 =\x3e null\n       =\x3e null\n  =\x3e / =\x3e * =\x3e 4 =\x3e null\n                 =\x3e null\n            =\x3e 2 =\x3e null\n                 =\x3e null\n       =\x3e ^ =\x3e - =\x3e 1 =\x3e null\n                      =\x3e null\n                 =\x3e 5 =\x3e null\n                      =\x3e null\n            =\x3e ^ =\x3e 2 =\x3e null\n                      =\x3e null\n                 =\x3e 3 =\x3e null\n                      =\x3e null","markups":[]},{"name":"4366","type":1,"text":"In the diagram above, the =\x3e represent the branches of the node (the top node is the left branch, the bottom one is the right branch). Each node has two branches, and the nodes at the end of the tree have theirs pointing to null","markups":[{"type":10,"start":224,"end":228}]},{"name":"23f9","type":1,"text":"So, if we put all this together, here is the code we come up with:","markups":[]},{"name":"6fe2","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"df102efc035c104716bc0d44ea368567","thumbnailUrl":"https://i.embed.ly/1/image?url=https%3A%2F%2Favatars2.githubusercontent.com%2Fu%2F14361073%3Fv%3D3%26s%3D400&key=4fce0568f2ce49e8b54624ef71a8a5bd"}},{"name":"f786","type":1,"text":"And if we demo it:","markups":[]},{"name":"44be","type":8,"text":"//a little hack I put together so it prints out in a readable form\nASTNode.prototype.toString = function(count) {\n   if (!this.leftChildNode && !this.rightChildNode)\n     return this.token + \"\\t=\x3enull\\n\" + Array(count+1).join(\"\\t\") + \"=\x3enull\";\n   var count = count || 1;\n   count++;\n   return this.token + \"\\t=\x3e\" + this.leftChildNode.toString(count) + \"\\n\" + Array(count).join(\"\\t\") + \"=\x3e\" + this.rightChildNode.toString(count);\n};","markups":[]},{"name":"8220","type":8,"text":"var ast = parse(\"3 + 4 * 2 / ( 1 - 5 ) ^ 2 ^ 3\");\nconsole.log(\"\" + ast);","markups":[]},{"name":"65da","type":1,"text":"And the result:","markups":[]},{"name":"fcda","type":4,"text":"Oh, beautiful tree!","markups":[{"type":2,"start":0,"end":19}],"layout":1,"metadata":{"id":"1*3vdqt8rw-Lbkil3CrIBDNA.png","originalWidth":1189,"originalHeight":665}},{"name":"affa","type":1,"text":"Slowly, but surely, we’re getting closer to understanding what makes compilers and interpreters tick! Admittedly, the working of modern-day programming languages and their toolkits is a lot more complex than what we’ve looked at thus far, but I hope this proves to be an easy-to-understand introduction to them. As a number of people have pointed out, tools exist to automatically generate tokenizers and parsers, but its often nice to know how something actually works.","markups":[]},{"name":"8f2f","type":1,"text":"The concepts we covered in this article and the previous are very interesting topics in the field of computer science and language theory. I still have a lot to learn about them, and I encourage you to go ahead and research them if they interest you. And drop me a line to let me know about your progress. Peace!","markups":[{"type":3,"start":255,"end":269,"href":"http://m.me/shalvah.adebayo","title":"","rel":"","anchorType":0}]}],"sections":[{"name":"2f1d","startIndex":0}]},"postDisplay":{"coverless":true}},"virtuals":{"statusForCollection":"APPROVED","allowNotes":true,"previewImage":{"imageId":"1*zs_bmXKVXHJQuz0pnsDdqQ.jpeg","filter":"","backgroundSize":"","originalWidth":4272,"originalHeight":2848,"strategy":"resample","height":0,"width":0},"wordCount":2650,"imageCount":3,"readingTime":10.55,"subtitle":"A while ago, I wrote about tokenizing a math expression, with Javascript as the language of choice. The tokenizer I built in that article…","publishedInCount":1,"usersBySocialRecommends":[],"recommends":152,"socialRecommends":[],"isBookmarked":false,"tags":[{"slug":"javascript","name":"JavaScript","postCount":44188,"virtuals":{"isFollowing":false},"metadata":{"followerCount":40578,"postCount":44188,"coverImage":{"id":"1*_WL8zajmqcczto2bjiBqpw.jpeg","originalWidth":4096,"originalHeight":2730}},"type":"Tag"},{"slug":"tech","name":"Tech","postCount":100047,"virtuals":{"isFollowing":false},"metadata":{"followerCount":1071599,"postCount":100047,"coverImage":{"id":"1*DJsCTsAMGfU3LdtcgLOt-w.png","originalWidth":639,"originalHeight":268}},"type":"Tag"},{"slug":"life-lessons","name":"Life Lessons","postCount":162490,"virtuals":{"isFollowing":false},"metadata":{"followerCount":1078810,"postCount":162490,"coverImage":{"id":"1*xJV8uYsDYrnDwulfbMByRQ.jpeg"}},"type":"Tag"},{"slug":"software-development","name":"Software Development","postCount":27043,"virtuals":{"isFollowing":false},"metadata":{"followerCount":23811,"postCount":27043,"coverImage":{"id":"1*c0S7FZCmO-k74oB58nxgww@2x.jpeg","originalWidth":2385,"originalHeight":859,"isFeatured":true}},"type":"Tag"},{"slug":"algorithms","name":"Algorithms","postCount":3504,"virtuals":{"isFollowing":false},"metadata":{"followerCount":2327,"postCount":3504,"coverImage":{"id":"1*F-EDLK-OugJ_4KOgtJqnPA.png","originalWidth":300,"originalHeight":330}},"type":"Tag"}],"socialRecommendsCount":0,"responsesCreatedCount":4,"links":{"entries":[{"url":"https://en.wikipedia.org/wiki/Reverse_Polish_notation","alts":[],"httpStatus":200},{"url":"https://en.wikipedia.org/wiki/Order_of_operations","alts":[],"httpStatus":200},{"url":"https://en.wikipedia.org/wiki/Shunting-yard_algorithm","alts":[],"httpStatus":200},{"url":"https://en.wikipedia.org/wiki/Operator_associativity","alts":[],"httpStatus":200},{"url":"https://en.wikipedia.org/wiki/Parsing#Parser","alts":[],"httpStatus":200},{"url":"https://medium.freecodecamp.com/how-to-build-a-math-expression-tokenizer-using-javascript-3638d4e5fbe9","alts":[{"type":2,"url":"medium://p/3638d4e5fbe9"},{"type":3,"url":"medium://p/3638d4e5fbe9"}],"httpStatus":200},{"url":"http://m.me/shalvah.adebayo","alts":[],"httpStatus":200},{"url":"https://www.codeproject.com/Articles/50377/Create-Your-Own-Programming-Language","alts":[],"httpStatus":200}],"version":"0.3","generatedAt":1495481420551},"isLockedPreviewOnly":false,"takeoverId":"","metaDescription":"","totalClapCount":201,"sectionCount":1},"coverless":true,"slug":"parsing-math-expressions-with-javascript","translationSourcePostId":"","translationSourceCreatorId":"","isApprovedTranslation":false,"inResponseToPostId":"","inResponseToRemovedAt":0,"isTitleSynthesized":true,"allowResponses":true,"importedUrl":"","importedPublishedAt":0,"visibility":0,"uniqueSlug":"parsing-math-expressions-with-javascript-7e8f5572276e","previewContent":{"bodyModel":{"paragraphs":[{"name":"59de","type":3,"text":"Parsing math expressions with JavaScript","markups":[],"alignment":1},{"name":"3674","type":4,"text":"","markups":[],"layout":10,"metadata":{"id":"1*zs_bmXKVXHJQuz0pnsDdqQ.jpeg","originalWidth":4272,"originalHeight":2848}},{"name":"996d","type":1,"text":"A while ago, I wrote about tokenizing a math expression, with Javascript as the language…","markups":[{"type":3,"start":27,"end":56,"href":"https://medium.freecodecamp.com/how-to-build-a-math-expression-tokenizer-using-javascript-3638d4e5fbe9","title":"","rel":"","anchorType":0}],"alignment":1}],"sections":[{"startIndex":0}]},"isFullContent":false},"license":0,"inResponseToMediaResourceId":"","canonicalUrl":"https://medium.freecodecamp.org/parsing-math-expressions-with-javascript-7e8f5572276e","approvedHomeCollectionId":"336d898217ee","approvedHomeCollection":{"id":"336d898217ee","name":"freeCodeCamp","slug":"free-code-camp","tags":["TECHNOLOGY","DESIGN","TECH","STARTUP","PRODUCTIVITY"],"creatorId":"8b318225c16a","description":"Our community publishes stories worth reading on development, design, and data science.","shortDescription":"Our community publishes stories worth reading on…","image":{"imageId":"1*MotlWcSa2n6FrOx3ul89kw.png","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"metadata":{"followerCount":331943,"activeAt":1507330990093},"virtuals":{"permissions":{"canPublish":false,"canPublishAll":false,"canRepublish":false,"canRemove":false,"canManageAll":false,"canSubmit":false,"canEditPosts":false,"canAddWriters":false,"canViewStats":false,"canSendNewsletter":false,"canViewLockedPosts":false,"canViewCloaked":false,"canEditOwnPosts":false,"canBeAssignedAuthor":false,"canEnrollInHightower":false,"canLockPostsForMediumMembers":false},"isSubscribed":false,"isNewsletterSubscribed":false,"memberOfMembershipPlanId":"","isEnrolledInHightower":false,"isEligibleForHightower":false},"logo":{"imageId":"1*wViBNJ1o9rM5p6b-gf3vxg.png","filter":"","backgroundSize":"","originalWidth":600,"originalHeight":72,"strategy":"resample","height":0,"width":0},"twitterUsername":"freecodecamp","facebookPageName":"freecodecamp","publicEmail":"quincy@freecodecamp.com","collectionMastheadId":"af94c9c16d4","domain":"medium.freecodecamp.org","sections":[{"type":2,"collectionHeaderMetadata":{"backgroundImage":{},"logoImage":{"id":"1*JAG6GC1APQdyo2PegDDi2g@2x.png","originalWidth":601,"originalHeight":81,"alt":"freeCodeCamp"},"alignment":2,"layout":4}},{"type":1,"postListMetadata":{"source":3,"layout":6,"number":1,"postIds":["ee82d15c576d"]}},{"type":1,"postListMetadata":{"source":1,"layout":6,"number":25,"postIds":[]}},{"type":1,"postListMetadata":{"source":2,"layout":6,"number":25,"postIds":[],"sectionHeader":"Trending"}}],"tintColor":"#FF006400","lightText":true,"favicon":{"imageId":"1*B6_f-_SxscJ9FCuIjOrQAQ.jpeg","filter":"","backgroundSize":"","originalWidth":657,"originalHeight":654,"strategy":"resample","height":0,"width":0},"colorPalette":{"defaultBackgroundSpectrum":{"colorPoints":[{"color":"#FF429A35","point":0},{"color":"#FF408F33","point":0.1},{"color":"#FF3E8432","point":0.2},{"color":"#FF3B7830","point":0.3},{"color":"#FF376C2D","point":0.4},{"color":"#FF33602A","point":0.5},{"color":"#FF2E5426","point":0.6},{"color":"#FF284721","point":0.7},{"color":"#FF223A1C","point":0.8},{"color":"#FF1A2C15","point":0.9},{"color":"#FF111E0D","point":1}],"backgroundColor":"#FFFFFFFF"},"tintBackgroundSpectrum":{"colorPoints":[{"color":"#FF006400","point":0},{"color":"#FF2A7920","point":0.1},{"color":"#FF458C39","point":0.2},{"color":"#FF5D9E50","point":0.3},{"color":"#FF74AF66","point":0.4},{"color":"#FF8ABF7C","point":0.5},{"color":"#FFA0CE92","point":0.6},{"color":"#FFB5DDA8","point":0.7},{"color":"#FFCAEBBE","point":0.8},{"color":"#FFDFF8D4","point":0.9},{"color":"#FFF3FFEA","point":1}],"backgroundColor":"#FF006400"},"highlightSpectrum":{"colorPoints":[{"color":"#FFE3FBD9","point":0},{"color":"#FFDEFAD3","point":0.1},{"color":"#FFD9FACC","point":0.2},{"color":"#FFD3F9C6","point":0.3},{"color":"#FFCEF9C0","point":0.4},{"color":"#FFC9F8B9","point":0.5},{"color":"#FFC3F8B3","point":0.6},{"color":"#FFBDF7AD","point":0.7},{"color":"#FFB8F7A6","point":0.8},{"color":"#FFB2F6A0","point":0.9},{"color":"#FFACF699","point":1}],"backgroundColor":"#FFFFFFFF"}},"navItems":[{"type":1,"title":"Dev","tagSlug":"web-development","url":"https://medium.freecodecamp.org/tagged/web-development","source":"tagSlug"},{"type":1,"title":"Design","tagSlug":"design","url":"https://medium.freecodecamp.org/tagged/design","source":"tagSlug"},{"type":1,"title":"Data","tagSlug":"data-science","url":"https://medium.freecodecamp.org/tagged/data-science","source":"tagSlug"},{"type":3,"title":"Learn to code for free","url":"https://freecodecamp.com?ref=mn"}],"colorBehavior":2,"instantArticlesState":0,"acceleratedMobilePagesState":0,"googleAnalyticsId":"UA-55446531-3","ampLogo":{"imageId":"","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"header":{"backgroundImage":{},"logoImage":{"id":"1*JAG6GC1APQdyo2PegDDi2g@2x.png","originalWidth":601,"originalHeight":81,"alt":"freeCodeCamp"},"alignment":2,"layout":4},"type":"Collection"},"newsletterId":"","webCanonicalUrl":"https://medium.freecodecamp.org/parsing-math-expressions-with-javascript-7e8f5572276e","mediumUrl":"https://medium.freecodecamp.org/parsing-math-expressions-with-javascript-7e8f5572276e","migrationId":"","notifyFollowers":true,"notifyTwitter":false,"isSponsored":false,"isRequestToPubDisabled":false,"notifyFacebook":false,"responseHiddenOnParentPostAt":0,"isSeries":false,"isSubscriptionLocked":false,"seriesLastAppendedAt":0,"audioVersionDurationSec":0,"sequenceId":"","isNsfw":false,"isEligibleForRevenue":false,"isBlockedFromHightower":false,"type":"Post"},"mentionedUsers":[],"collaborators":[],"membershipPlans":[],"topic":{"topicId":"55f1c20aba7a","slug":"software-engineering","createdAt":1491949272237,"deletedAt":0,"image":{"id":"1*U8FboK4lz1wqwQC6IcqxKw@2x.jpeg","originalWidth":5507,"originalHeight":3098},"name":"Software engineering","description":"Back-end to front-end.","briefCatalogId":"baec7bf32d9b","relatedTopics":[],"visibility":1,"relatedTags":[],"type":"Topic"},"collectionUserRelations":[],"mode":null,"references":{"User":{"6c2442a0e7f7":{"userId":"6c2442a0e7f7","name":"Shalvah A.","username":"shalvah","createdAt":1463094790979,"lastPostCreatedAt":1507285875096,"imageId":"1*FCiNhJYh7H9oDbPq7w5V6A.jpeg","backgroundImageId":"","bio":"Learning. Building. Believing. Software Engineer. UX Enthusiast. Introspective. A branch trying to abide.","twitterScreenName":"theshalvah","socialStats":{"userId":"6c2442a0e7f7","usersFollowedCount":77,"usersFollowedByCount":748,"type":"SocialStats"},"social":{"userId":"lo_1a3b00d1e818","targetUserId":"6c2442a0e7f7","type":"Social"},"facebookAccountId":"1768257200092722","allowNotes":1,"type":"User"}},"Collection":{"336d898217ee":{"id":"336d898217ee","name":"freeCodeCamp","slug":"free-code-camp","tags":["TECHNOLOGY","DESIGN","TECH","STARTUP","PRODUCTIVITY"],"creatorId":"8b318225c16a","description":"Our community publishes stories worth reading on development, design, and data science.","shortDescription":"Our community publishes stories worth reading on…","image":{"imageId":"1*MotlWcSa2n6FrOx3ul89kw.png","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"metadata":{"followerCount":331943,"activeAt":1507330990093},"virtuals":{"permissions":{"canPublish":false,"canPublishAll":false,"canRepublish":false,"canRemove":false,"canManageAll":false,"canSubmit":false,"canEditPosts":false,"canAddWriters":false,"canViewStats":false,"canSendNewsletter":false,"canViewLockedPosts":false,"canViewCloaked":false,"canEditOwnPosts":false,"canBeAssignedAuthor":false,"canEnrollInHightower":false,"canLockPostsForMediumMembers":false},"isSubscribed":false,"isNewsletterSubscribed":false,"memberOfMembershipPlanId":"","isEnrolledInHightower":false,"isEligibleForHightower":false},"logo":{"imageId":"1*wViBNJ1o9rM5p6b-gf3vxg.png","filter":"","backgroundSize":"","originalWidth":600,"originalHeight":72,"strategy":"resample","height":0,"width":0},"twitterUsername":"freecodecamp","facebookPageName":"freecodecamp","publicEmail":"quincy@freecodecamp.com","collectionMastheadId":"af94c9c16d4","domain":"medium.freecodecamp.org","sections":[{"type":2,"collectionHeaderMetadata":{"backgroundImage":{},"logoImage":{"id":"1*JAG6GC1APQdyo2PegDDi2g@2x.png","originalWidth":601,"originalHeight":81,"alt":"freeCodeCamp"},"alignment":2,"layout":4}},{"type":1,"postListMetadata":{"source":3,"layout":6,"number":1,"postIds":["ee82d15c576d"]}},{"type":1,"postListMetadata":{"source":1,"layout":6,"number":25,"postIds":[]}},{"type":1,"postListMetadata":{"source":2,"layout":6,"number":25,"postIds":[],"sectionHeader":"Trending"}}],"tintColor":"#FF006400","lightText":true,"favicon":{"imageId":"1*B6_f-_SxscJ9FCuIjOrQAQ.jpeg","filter":"","backgroundSize":"","originalWidth":657,"originalHeight":654,"strategy":"resample","height":0,"width":0},"colorPalette":{"defaultBackgroundSpectrum":{"colorPoints":[{"color":"#FF429A35","point":0},{"color":"#FF408F33","point":0.1},{"color":"#FF3E8432","point":0.2},{"color":"#FF3B7830","point":0.3},{"color":"#FF376C2D","point":0.4},{"color":"#FF33602A","point":0.5},{"color":"#FF2E5426","point":0.6},{"color":"#FF284721","point":0.7},{"color":"#FF223A1C","point":0.8},{"color":"#FF1A2C15","point":0.9},{"color":"#FF111E0D","point":1}],"backgroundColor":"#FFFFFFFF"},"tintBackgroundSpectrum":{"colorPoints":[{"color":"#FF006400","point":0},{"color":"#FF2A7920","point":0.1},{"color":"#FF458C39","point":0.2},{"color":"#FF5D9E50","point":0.3},{"color":"#FF74AF66","point":0.4},{"color":"#FF8ABF7C","point":0.5},{"color":"#FFA0CE92","point":0.6},{"color":"#FFB5DDA8","point":0.7},{"color":"#FFCAEBBE","point":0.8},{"color":"#FFDFF8D4","point":0.9},{"color":"#FFF3FFEA","point":1}],"backgroundColor":"#FF006400"},"highlightSpectrum":{"colorPoints":[{"color":"#FFE3FBD9","point":0},{"color":"#FFDEFAD3","point":0.1},{"color":"#FFD9FACC","point":0.2},{"color":"#FFD3F9C6","point":0.3},{"color":"#FFCEF9C0","point":0.4},{"color":"#FFC9F8B9","point":0.5},{"color":"#FFC3F8B3","point":0.6},{"color":"#FFBDF7AD","point":0.7},{"color":"#FFB8F7A6","point":0.8},{"color":"#FFB2F6A0","point":0.9},{"color":"#FFACF699","point":1}],"backgroundColor":"#FFFFFFFF"}},"navItems":[{"type":1,"title":"Dev","tagSlug":"web-development","url":"https://medium.freecodecamp.org/tagged/web-development","source":"tagSlug"},{"type":1,"title":"Design","tagSlug":"design","url":"https://medium.freecodecamp.org/tagged/design","source":"tagSlug"},{"type":1,"title":"Data","tagSlug":"data-science","url":"https://medium.freecodecamp.org/tagged/data-science","source":"tagSlug"},{"type":3,"title":"Learn to code for free","url":"https://freecodecamp.com?ref=mn"}],"colorBehavior":2,"instantArticlesState":0,"acceleratedMobilePagesState":0,"googleAnalyticsId":"UA-55446531-3","ampLogo":{"imageId":"","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"header":{"backgroundImage":{},"logoImage":{"id":"1*JAG6GC1APQdyo2PegDDi2g@2x.png","originalWidth":601,"originalHeight":81,"alt":"freeCodeCamp"},"alignment":2,"layout":4},"type":"Collection"}},"Social":{"6c2442a0e7f7":{"userId":"lo_1a3b00d1e818","targetUserId":"6c2442a0e7f7","type":"Social"}},"SocialStats":{"6c2442a0e7f7":{"userId":"6c2442a0e7f7","usersFollowedCount":77,"usersFollowedByCount":748,"type":"SocialStats"}}}})
// ]]></script>
 </body>
</html>