<!doctype html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-us" lang="en-us">
 <head> 
  <meta name="viewport" content="width=device-width; initial-scale=1.0;"> 
  <meta http-equiv="content-type" content="text/html; charset=utf-8"> 
  <title>The Julia Language</title> 
  <meta name="author" content="Jeff Bezanson, Stefan Karpinski, Viral Shah, Alan Edelman, et al."> 
  <link rel="stylesheet" href="/css/syntax.css" type="text/css"> 
  <link rel="stylesheet" href="/css/screen.css" type="text/css" media="screen, projection"> 
  <script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-28835595-1', 'auto');
    ga('send', 'pageview');
  </script> 
  <script type="text/javascript">window.liveSettings={api_key:"ab25420d08984953bd7435fd47506f96"};</script> 
  <script type="text/javascript" src="//cdn.transifex.com/live.js"></script> 
 </head> 
 <body> 
  <div id="site" class="site"> 
   <div class="title">
    <a href="/"> 
     <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="210px" height="142px" viewbox="0 0 310 216" enable-background="new 0 0 310 216" xml:space="preserve"> 
      <!-- blue dot --> 
      <circle fill="#6b85dd" stroke="#4266d5" stroke-width="3" cx="50.5" cy="60" r="16.5" /> 
      <!-- red dot --> 
      <circle fill="#d66661" stroke="#c93d39" stroke-width="3" cx="212.459" cy="60" r="16.5" /> 
      <!-- green dot --> 
      <circle fill="#6bab5b" stroke="#3b972e" stroke-width="3" cx="233.834" cy="23.874" r="16.5" /> 
      <!-- purple dot --> 
      <circle fill="#aa7dc0" stroke="#945bb0" stroke-width="3" cx="255.209" cy="60" r="16.5" /> 
      <!-- "j" --> 
      <path fill="#252525" d="M37.216,138.427c0-15.839,0.006-31.679-0.018-47.517c-0.001-0.827,0.169-1.234,1.043-1.47
	c7.876-2.127,15.739-4.308,23.606-6.47c1.33-0.366,1.333-0.36,1.333,1.019c0,25.758,0.015,51.517-0.012,77.274
	c-0.006,5.514,0.245,11.032-0.272,16.543c-0.628,6.69-2.15,13.092-6.438,18.506c-3.781,4.771-8.898,7.25-14.767,8.338
	c-6.599,1.222-13.251,1.552-19.934,0.938c-4.616-0.423-9.045-1.486-12.844-4.363c-2.863-2.168-4.454-4.935-3.745-8.603
	c0.736-3.806,3.348-5.978,6.861-7.127c2.262-0.74,4.628-0.872,6.994-0.53c1.823,0.264,3.42,1.023,4.779,2.288
	c1.38,1.284,2.641,2.674,3.778,4.177c0.872,1.15,1.793,2.256,2.991,3.086c2.055,1.426,4,0.965,5.213-1.216
	c0.819-1.473,0.997-3.106,1.173-4.731c0.255-2.348,0.255-4.707,0.256-7.062C37.218,167.145,37.216,152.786,37.216,138.427z" /> 
      <!-- "u" --> 
      <path fill="#252525" d="M125.536,162.479c-2.908,2.385-5.783,4.312-8.88,5.904c-10.348,5.323-20.514,4.521-30.324-1.253
	c-6.71-3.95-11.012-9.849-12.52-17.606c-0.236-1.213-0.363-2.438-0.363-3.688c0.01-19.797,0.017-39.593-0.02-59.39
	c-0.002-1.102,0.285-1.357,1.363-1.351c7.798,0.049,15.597,0.044,23.396,0.003c0.95-0.005,1.177,0.25,1.175,1.183
	c-0.027,19.356-0.025,38.713-0.018,58.07c0.002,6.34,3.599,10.934,9.672,12.42c2.13,0.521,4.19,0.396,6.173-0.6
	c4.26-2.139,7.457-5.427,10.116-9.307c0.333-0.487,0.224-1,0.224-1.51c0.007-19.635,0.016-39.271-0.02-58.904
	c-0.002-1.083,0.255-1.369,1.353-1.361c7.838,0.052,15.677,0.045,23.515,0.004c0.916-0.005,1.103,0.244,1.102,1.124
	c-0.025,27.677-0.026,55.353,0.002,83.024c0.001,0.938-0.278,1.099-1.139,1.095c-7.918-0.028-15.837-0.028-23.756-0.001
	c-0.815,0.003-1.1-0.166-1.073-1.037C125.581,167.117,125.536,164.928,125.536,162.479z" /> 
      <!-- "l" --> 
      <path fill="#252525" d="M187.423,107.08c0,20.637-0.011,41.273,0.026,61.91c0.003,1.119-0.309,1.361-1.381,1.355
	c-7.799-0.052-15.598-0.047-23.396-0.008c-0.898,0.008-1.117-0.222-1.115-1.115c0.021-39.074,0.021-78.147,0-117.226
	c0-0.811,0.189-1.169,1.006-1.392c7.871-2.149,15.73-4.327,23.584-6.545c1.045-0.295,1.308-0.17,1.306,0.985
	C187.412,65.727,187.423,86.403,187.423,107.08z" /> 
      <!-- "i" --> 
      <path fill="#252525" d="M223.46,126.477c0,14.155-0.011,28.312,0.021,42.467c0.002,1.027-0.164,1.418-1.332,1.408
	c-7.838-0.061-15.676-0.047-23.516-0.01c-0.881,0.004-1.121-0.189-1.119-1.104c0.026-26.153,0.025-52.307,0-78.458
	c0-0.776,0.203-1.101,0.941-1.302c7.984-2.172,15.972-4.35,23.938-6.596c1.049-0.296,1.08,0.031,1.078,0.886
	C223.454,98.004,223.46,112.239,223.46,126.477z" /> 
      <!-- "a" --> 
      <path fill="#252525" d="M277.695,163.6c-0.786,0.646-1.404,1.125-2,1.635c-4.375,3.746-9.42,5.898-15.16,6.42
	c-5.792,0.527-11.479,0.244-16.934-2.047c-12.08-5.071-15.554-17.188-11.938-27.448c1.799-5.111,5.472-8.868,9.831-11.94
	c5.681-4.003,12.009-6.732,18.504-9.074c5.576-2.014,11.186-3.939,16.955-5.347c0.445-0.104,0.773-0.243,0.757-0.854
	c-0.136-4.389,0.261-8.79-0.479-13.165c-1.225-7.209-6.617-10.013-12.895-9.348c-0.516,0.055-1.029,0.129-1.536,0.241
	c-4.877,1.081-7.312,4.413-7.374,10.127c-0.02,1.729-0.229,3.418-0.693,5.084c-0.906,3.229-2.969,5.354-6.168,6.266
	c-3.422,0.979-6.893,0.998-10.23-0.305c-6.529-2.543-8.877-10.164-5.12-16.512c2.249-3.799,5.606-6.4,9.461-8.405
	c6.238-3.246,12.914-4.974,19.896-5.537c7.565-0.61,15.096-0.366,22.49,1.507c4.285,1.085,8.312,2.776,11.744,5.657
	c4.473,3.749,6.776,8.647,6.812,14.374c0.139,21.477,0.096,42.951,0.143,64.428c0.002,0.799-0.248,0.983-1.021,0.98
	c-8.035-0.025-16.074-0.023-24.113-0.001c-0.716,0.002-0.973-0.146-0.941-0.915C277.736,167.562,277.695,165.698,277.695,163.6z
	 M277.695,126.393c-4.793,2.104-9.25,4.373-13.287,7.408c-2.151,1.618-4.033,3.483-5.732,5.581
	c-4.229,5.226-1.988,13.343,1.693,16.599c1.592,1.406,3.359,1.906,5.419,1.521c1.621-0.307,3.149-0.857,4.549-1.734
	c1.521-0.951,2.949-2.072,4.539-2.887c2.31-1.18,2.97-2.861,2.894-5.445C277.561,140.484,277.695,133.527,277.695,126.393z" /> 
     </svg> </a>
   </div> 
   <ul class="links"> 
    <li><a href="/" class="active">home</a></li> 
    <li><a href="https://github.com/JuliaLang/julia" class="">source</a></li> 
    <li><a href="/downloads/" class="">downloads</a></li> 
    <li><a href="http://docs.julialang.org/" class="">docs</a></li> 
    <li><a href="http://pkg.julialang.org/" class="">packages</a></li> 
    <li><a href="/blog/" class="">blog</a></li> 
    <li><a href="/community/" class="">community</a></li> 
    <li><a href="/learning/" class="">learning</a></li> 
    <li><a href="/teaching/" class="">teaching</a></li> 
    <li><a href="/publications/" class="">publications</a></li> 
    <li><a href="/soc/ideas-page.html" class="">GSoC</a></li> 
    <li><a href="http://juliacon.org" class="">juliacon</a></li> 
   </ul> 
   <!--

<style>
.banner-box .header {
  font-size: 1.5em;
}
@media (min-width: 830px) {
  .banner-box {
    float:left;
    width:50%;
  }
}
</style>

<div style="text-align:center">

<div class="banner-box">
<div class="header">JuliaCon 2016</div>
<p>
  Held on June 21<sup>st</sup> - 25<sup>th</sup> at MIT<br>
  <a href="http://juliacon.org">talks</a> |
  <a href="https://www.youtube.com/playlist?list=PLP8iPy9hna6SQPwZUDtAM59-wPzCPyD_S">videos</a>
</p>
</div>

<div class="banner-box">
<div class="header">Google Summer of Code</div>
<p>
  Julia gets 12 slots in the Google Summer of Code!<br />
  <a href="https://summerofcode.withgoogle.com/organizations/6453977159827456/">projects</a> |
  <a href="/soc/ideas-page.html">ideas list</a>
</p>
</div>

<div style="clear:both; border-top: 1px solid #ddd; margin-bottom:30px;"></div>


</div>
--> 
   <link rel="canonical" href="http://julialang.org"> 
   <!--<div style="display: flex; flex-direction: row; align-items:center; margin-bottom: 32px">
    <div style="width: 48%; text-align: center">
        <div style="justify-content:center; margin-bottom: 16px; display: flex; flex-direction: row; align-items:center">
            <a href="http://juliacon.org"><img src="/images/juliacon2017.svg" style="width:200px; height: auto"></a>
            <div style="margin-left: 16px; margin-top: 16px; font-weight: bold; font-size: 2.5em">2017</div>
        </div>
        <div>
            June 20th - June 24th 2017, Berkeley, CA. <br>
            <a href="http://juliacon.org/2017/schedule">Talks and workshops.</a>
            <a href="https://www.eventbrite.com/e/juliacon-2017-tickets-31531297961?ref=ebtnebtckt">Tickets.</a>
        </div>
    </div>
    <div style="width: 48%; text-align: center">
        <div style="justify-content:center; margin-bottom: 16px; display: flex; flex-direction: row; align-items:center">
            <a href="/soc/ideas-page.html"><img src="/images/juliasock.png" style="width:88px; height: auto"></a>
        </div>
        <div>
            Julia is part of <b><a href="https://summerofcode.withgoogle.com/">Google Summer of Code 2017</a>!</b><br>
            Students are working on these <a href="https://summerofcode.withgoogle.com/organizations/5642180010967040/">18 projects</a>.
        </div>
    </div>
</div>--> 
   <p><a href="http://julialang.org">Julia</a> is a high-level, high-performance dynamic programming language for numerical computing. It provides a sophisticated compiler, <a href="http://docs.julialang.org/en/stable/manual/parallel-computing/">distributed parallel execution</a>, numerical accuracy, and an <a href="https://docs.julialang.org/en/latest/#Standard-Library-1">extensive mathematical function library</a>. Julia’s Base library, largely written in Julia itself, also integrates mature, best-of-breed open source C and Fortran libraries for <a href="http://docs.julialang.org/en/stable/stdlib/linalg/">linear algebra</a>, <a href="http://docs.julialang.org/en/stable/stdlib/numbers/#random-numbers">random number generation</a>, <a href="http://docs.julialang.org/en/stable/stdlib/math/#signal-processing">signal processing</a>, and <a href="http://docs.julialang.org/en/stable/stdlib/strings/#strings">string processing</a>. In addition, the Julia developer community is contributing a number of <a href="http://pkg.julialang.org">external packages</a> through Julia’s built-in package manager at a rapid pace. <a href="https://github.com/JuliaLang/IJulia.jl">IJulia</a>, a collaboration between the <a href="http://jupyter.org">Jupyter</a> and Julia communities, provides a powerful browser-based graphical notebook interface to Julia.</p> 
   <!--
This keynote talk by Stefan Karpinski at [ODSC Boston](https://www.odsc.com/boston) (2016) on [the two language problem](https://www.youtube.com/watch?v=B9moDuSYzGo) explains much of the motivation behind Julia:

<div style="text-align: center">
<iframe width="560" height="315" src="https://www.youtube.com/embed/B9moDuSYzGo" frameborder="0" allowfullscreen></iframe>
</div>
--> 
   <p>Julia programs are organized around <a href="http://docs.julialang.org/en/stable/manual/methods/#man-methods">multiple dispatch</a>; by defining functions and overloading them for different combinations of argument types, which can also be user-defined. For a more in-depth discussion of the rationale and advantages of Julia over other systems, see the following highlights or read the <a href="http://docs.julialang.org/en/stable/manual/introduction/">introduction</a> in the <a href="http://docs.julialang.org">online manual</a>.</p> 
   <p>JuliaCon 2016, the annual conference on Julia was held during June 21st - 25th at MIT. Below is a random video from our youtube playlist of the talks. Click on the playlist icon to check out the other videos.</p> 
   <script type="text/javascript">//<!--
    var playlistId = 'PLP8iPy9hna6QpP6vqZs408etJVECPKIev',
        videoCount = 50,
        index = Math.floor(Math.random() * videoCount),
        videoIds =
        ["UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi41NkI0NEY2RDEwNTU3Q0M2","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi4yODlGNEE0NkRGMEEzMEQy","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi4wMTcyMDhGQUE4NTIzM0Y5","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi41MjE1MkI0OTQ2QzJGNzNG","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi4wOTA3OTZBNzVEMTUzOTMy","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi4xMkVGQjNCMUM1N0RFNEUx","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi41MzJCQjBCNDIyRkJDN0VD","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi5DQUNERDQ2NkIzRUQxNTY1","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi45NDk1REZENzhEMzU5MDQz","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi5GNjNDRDREMDQxOThCMDQ2","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi40NzZCMERDMjVEN0RFRThB","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi5EMEEwRUY5M0RDRTU3NDJC","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi45ODRDNTg0QjA4NkFBNkQy","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi4zMDg5MkQ5MEVDMEM1NTg2","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi41Mzk2QTAxMTkzNDk4MDhF","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi41QTY1Q0UxMTVCODczNThE","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi4yMUQyQTQzMjRDNzMyQTMy","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi45RTgxNDRBMzUwRjQ0MDhC","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi5ENDU4Q0M4RDExNzM1Mjcy","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi4yMDhBMkNBNjRDMjQxQTg1","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi5GM0Q3M0MzMzY5NTJFNTdE","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi4zRjM0MkVCRTg0MkYyQTM0","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi45NzUwQkI1M0UxNThBMkU0","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi5DNzE1RjZEMUZCMjA0RDBB","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi43MTI1NDIwOTMwQjIxMzNG","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi5DQ0MyQ0Y4Mzg0M0VGOEYw","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi4yQUE2Q0JEMTk4NTM3RTZC","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi5DMkU4NTY1QUFGQTYwMDE3","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi44Mjc5REFBRUE2MTdFRDU0","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi43NDhFRTgwOTRERTU4Rjg3","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi41QUZGQTY5OTE4QTREQUU4","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi4zRDBDOEZDOUM0MDY5NEEz","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi5CMEQ2Mjk5NTc3NDZFRUNB","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi42MTI4Njc2QjM1RjU1MjlG","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi45RjNFMDhGQ0Q2RkFCQTc1","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi40QTA3NTU2RkM1QzlCMzYx","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi5BRjJDODk5REM0NjkzMUIy","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi4xOTEzQzhBQzU3MDNDNjcz","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi5GNDg1Njc1QzZERjlFRjE5","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi4zQzFBN0RGNzNFREFCMjBE","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi5DNkMwRUI2MkI4QkI4NDFG","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi5DRUQwODMxQzUyRTlGRkY3","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi4yQUJFNUVCMzVDNjcxRTlF","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi40QzRDOEU0QUYwNUIxN0M1","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi41RTNBREYwMkI5QzU3RkY2","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi5ENjI1QUI0MDI5NEQzODFE","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi44QzVGQUU2QjE2NDgxM0M4","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi4xMzgwMzBERjQ4NjEzNUE5","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi4zMEQ1MEIyRTFGNzhDQzFB","UExQOGlQeTlobmE2UXBQNnZxWnM0MDhldEpWRUNQS0lldi42Qzk5MkEzQjVFQjYwRDA4","uecdcADM3hY"],
        videoUrl = 'https://www.youtube.com/embed/' +
            videoIds[index-1] + '?list=' + playlistId + '&index=' + index,
        videoFrame = document.getElementById('juliacon-player');

    document.write('<div style="text-align: center"><iframe width="560" height="315" src="' + videoUrl + '" frameborder="0" allowfullscreen></iframe></div>')

//-->
</script> 
   <h1 id="a-summary-of-features">A Summary of Features</h1> 
   <ul> 
    <li><a href="http://en.wikipedia.org/wiki/Multiple_dispatch">Multiple dispatch</a>: providing ability to define function behavior across many combinations of argument types</li> 
    <li>Dynamic type system: types for documentation, optimization, and dispatch</li> 
    <li>Good performance, approaching that of statically-compiled languages like C</li> 
    <li>Built-in package manager</li> 
    <li><a href="http://docs.julialang.org/en/stable/manual/metaprogramming/#macros">Lisp-like macros</a> and other <a href="http://docs.julialang.org/en/stable/manual/metaprogramming/">metaprogramming facilities</a></li> 
    <li>Call Python functions: use the <a href="https://github.com/stevengj/PyCall.jl">PyCall</a> package</li> 
    <li><a href="http://docs.julialang.org/en/stable/manual/calling-c-and-fortran-code/">Call C functions</a> directly: no wrappers or special APIs</li> 
    <li>Powerful shell-like capabilities for <a href="http://docs.julialang.org/en/stable/manual/running-external-programs/">managing other processes</a></li> 
    <li>Designed for <a href="http://docs.julialang.org/en/stable/manual/parallel-computing/">parallelism and distributed computation</a></li> 
    <li><a href="http://en.wikipedia.org/wiki/Coroutine">Coroutines</a>: lightweight “green” threading</li> 
    <li><a href="http://docs.julialang.org/en/stable/manual/types/">User-defined types</a> are as fast and compact as built-ins</li> 
    <li>Automatic generation of efficient, specialized code for different argument types</li> 
    <li>Elegant and extensible <a href="http://docs.julialang.org/en/stable/manual/conversion-and-promotion/">conversions and promotions</a> for numeric and other types</li> 
    <li>Efficient support for <a href="http://en.wikipedia.org/wiki/Unicode">Unicode</a>, including but not limited to <a href="http://en.wikipedia.org/wiki/UTF-8">UTF-8</a></li> 
    <li><a href="https://github.com/JuliaLang/julia/blob/master/LICENSE.md">MIT licensed</a>: free and open source</li> 
   </ul> 
   <h1 id="high-performance-jit-compiler">High-Performance JIT Compiler</h1> 
   <p>Julia’s LLVM-based just-in-time (JIT) compiler combined with the language’s design allow it to approach and often match the performance of C. To get a sense of relative performance of Julia compared to other languages that can or could be used for numerical and scientific computing, we’ve written a small set of micro-benchmarks in a variety of languages: <a href="https://github.com/JuliaLang/julia/blob/master/test/perf/micro/perf.c">C</a>, <a href="https://github.com/JuliaLang/julia/blob/master/test/perf/micro/perf.f90">Fortran</a>, <a href="https://github.com/JuliaLang/julia/blob/master/test/perf/micro/perf.jl">Julia</a>, <a href="https://github.com/JuliaLang/julia/blob/master/test/perf/micro/perf.py">Python</a>, <a href="https://github.com/JuliaLang/julia/blob/master/test/perf/micro/perf.m">Matlab/Octave</a>, <a href="https://github.com/JuliaLang/julia/blob/master/test/perf/micro/perf.R">R</a>, <a href="https://github.com/JuliaLang/julia/blob/master/test/perf/micro/perf.js">JavaScript</a>, <a href="https://github.com/JuliaLang/julia/tree/master/test/perf/micro/java/src/main/java">Java</a>, <a href="https://github.com/JuliaLang/julia/blob/master/test/perf/micro/perf.lua">Lua</a>, <a href="https://github.com/JuliaLang/julia/blob/master/test/perf/micro/perf.go">Go</a>, and <a href="https://github.com/JuliaLang/julia/blob/master/test/perf/micro/perf.nb">Mathematica</a>. We encourage you to skim the code to get a sense for how easy or difficult numerical programming in each language is. The following micro-benchmark results were obtained on a single core (serial execution) on an Intel(R) Xeon(R) CPU E7-8850 2.00GHz CPU with 1TB of 1067MHz DDR3 RAM, running Linux:</p> 
   <div class="figure"> 
    <div class="cs-benchmark-table"> 
     <table class="benchmarks"> 
      <colgroup> 
       <col class="name"> 
       <col class="relative" span="11"> 
      </colgroup> 
      <thead> 
       <tr>
        <td></td>
        <th class="system">Fortran</th>
        <th class="system">Julia</th>
        <th class="system">Python</th>
        <th class="system">R</th>
        <th class="system">Matlab</th>
        <th class="system">Octave</th>
        <th class="system">Mathe-matica</th>
        <th class="system">JavaScript</th>
        <th class="system">Go</th>
        <th class="system">LuaJIT</th>
        <th class="system">Java</th>
       </tr> 
       <tr>
        <td></td>
        <td class="version">gcc 5.1.1 </td>
        <td class="version">0.4.0 </td>
        <td class="version">3.4.3 </td>
        <td class="version">3.2.2 </td>
        <td class="version">R2015b </td>
        <td class="version">4.0.0 </td>
        <td class="version">10.2.0 </td>
        <td class="version">V8 3.28.71.19 </td>
        <td class="version">go1.5 </td>
        <td class="version">gsl-shell 2.3.1 </td>
        <td class="version">1.8.0_45 </td>
       </tr> 
      </thead> 
      <tbody> 
       <tr>
        <th>fib</th>
        <td class="data">0.70</td>
        <td class="data">2.11</td>
        <td class="data">77.76</td>
        <td class="data">533.52</td>
        <td class="data">26.89</td>
        <td class="data">9324.35</td>
        <td class="data">118.53</td>
        <td class="data">3.36</td>
        <td class="data">1.86</td>
        <td class="data">1.71</td>
        <td class="data">1.21</td>
       </tr> 
       <tr>
        <th>parse_int</th>
        <td class="data">5.05</td>
        <td class="data">1.45</td>
        <td class="data">17.02</td>
        <td class="data">45.73</td>
        <td class="data">802.52</td>
        <td class="data">9581.44</td>
        <td class="data">15.02</td>
        <td class="data">6.06</td>
        <td class="data">1.20</td>
        <td class="data">5.77</td>
        <td class="data">3.35</td>
       </tr> 
       <tr>
        <th>quicksort</th>
        <td class="data">1.31</td>
        <td class="data">1.15</td>
        <td class="data">32.89</td>
        <td class="data">264.54</td>
        <td class="data">4.92</td>
        <td class="data">1866.01</td>
        <td class="data">43.23</td>
        <td class="data">2.70</td>
        <td class="data">1.29</td>
        <td class="data">2.03</td>
        <td class="data">2.60</td>
       </tr> 
       <tr>
        <th>mandel</th>
        <td class="data">0.81</td>
        <td class="data">0.79</td>
        <td class="data">15.32</td>
        <td class="data">53.16</td>
        <td class="data">7.58</td>
        <td class="data">451.81</td>
        <td class="data">5.13</td>
        <td class="data">0.66</td>
        <td class="data">1.11</td>
        <td class="data">0.67</td>
        <td class="data">1.35</td>
       </tr> 
       <tr>
        <th>pi_sum</th>
        <td class="data">1.00</td>
        <td class="data">1.00</td>
        <td class="data">21.99</td>
        <td class="data">9.56</td>
        <td class="data">1.00</td>
        <td class="data">299.31</td>
        <td class="data">1.69</td>
        <td class="data">1.01</td>
        <td class="data">1.00</td>
        <td class="data">1.00</td>
        <td class="data">1.00</td>
       </tr> 
       <tr>
        <th>rand_mat_stat</th>
        <td class="data">1.45</td>
        <td class="data">1.66</td>
        <td class="data">17.93</td>
        <td class="data">14.56</td>
        <td class="data">14.52</td>
        <td class="data">30.93</td>
        <td class="data">5.95</td>
        <td class="data">2.30</td>
        <td class="data">2.96</td>
        <td class="data">3.27</td>
        <td class="data">3.92</td>
       </tr> 
       <tr>
        <th>rand_mat_mul</th>
        <td class="data">3.48</td>
        <td class="data">1.02</td>
        <td class="data">1.14</td>
        <td class="data">1.57</td>
        <td class="data">1.12</td>
        <td class="data">1.12</td>
        <td class="data">1.30</td>
        <td class="data">15.07</td>
        <td class="data">1.42</td>
        <td class="data">1.16</td>
        <td class="data">2.36</td>
       </tr> 
      </tbody> 
     </table> 
    </div> 
    <p class="caption"><b>Figure:</b> benchmark times relative to C (smaller is better, C performance = 1.0). </p> 
    <p class="note"> C and Fortran compiled by gcc 5.1.1, taking best timing from all optimization levels (-O0 through -O3). C, Fortran, Go, and Julia use <a href="https://github.com/xianyi/OpenBLAS">OpenBLAS</a> v0.2.14. Python 3 was installed from the <a href="https://www.continuum.io/downloads">Anaconda distribution</a>. The Python implementations of <tt>rand_mat_stat</tt> and <tt>rand_mat_mul</tt> use NumPy (v1.9.2) functions; the rest are pure Python implementations.<br> Benchmarks can also be seen <a href="/benchmarks/">here as a plot</a> created with <a href="https://github.com/dcjones/Gadfly.jl">Gadfly</a>. </p> 
   </div> 
   <p>These benchmarks, while not comprehensive, do test compiler performance on a range of common code patterns, such as function calls, string parsing, sorting, numerical loops, random number generation, and array operations. It is important to note that these benchmark implementations are not written for absolute maximal performance (the fastest code to compute <code class="highlighter-rouge">fib(20)</code> is the constant literal <code class="highlighter-rouge">6765</code>). Rather, all of the benchmarks are written to test the performance of specific algorithms implemented in each language. In particular, all languages use the same algorithm: the Fibonacci benchmarks are all recursive while the pi summation benchmarks are all iterative; the “algorithm” for random matrix multiplication is to call the most obvious built-in/standard random-number and matmul routines (or to directly call BLAS if the language does not provide a high-level matmul), except where a matmul/BLAS call is not possible (such as in JavaScript). The point of these benchmarks is to compare the performance of specific <em>algorithms</em> across language implementations, not to compare the fastest means of computing a result, which in most high-level languages relies on calling C code. Raw benchmark numbers in CSV format are available <a href="/benchmarks.csv">here</a>.</p> 
   <p>To give a quick taste of what Julia looks like, here is the code used in the Mandelbrot and random matrix statistics benchmarks:</p> 
   <figure class="highlight">
    <pre><code class="language-julia" data-lang="julia"><span class="k">function</span><span class="nf"> mandel</span><span class="x">(</span><span class="n">z</span><span class="x">)</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">z</span>
    <span class="n">maxiter</span> <span class="o">=</span> <span class="mi">80</span>
    <span class="k">for</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">1</span><span class="x">:</span><span class="n">maxiter</span>
        <span class="k">if</span> <span class="n">abs</span><span class="x">(</span><span class="n">z</span><span class="x">)</span> <span class="o">&gt;</span> <span class="mi">2</span>
            <span class="k">return</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span>
        <span class="k">end</span>
        <span class="n">z</span> <span class="o">=</span> <span class="n">z</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="n">c</span>
    <span class="k">end</span>
    <span class="k">return</span> <span class="n">maxiter</span>
<span class="k">end</span>

<span class="k">function</span><span class="nf"> randmatstat</span><span class="x">(</span><span class="n">t</span><span class="x">)</span>
    <span class="n">n</span> <span class="o">=</span> <span class="mi">5</span>
    <span class="n">v</span> <span class="o">=</span> <span class="n">zeros</span><span class="x">(</span><span class="n">t</span><span class="x">)</span>
    <span class="n">w</span> <span class="o">=</span> <span class="n">zeros</span><span class="x">(</span><span class="n">t</span><span class="x">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="x">:</span><span class="n">t</span>
        <span class="n">a</span> <span class="o">=</span> <span class="n">randn</span><span class="x">(</span><span class="n">n</span><span class="x">,</span><span class="n">n</span><span class="x">)</span>
        <span class="n">b</span> <span class="o">=</span> <span class="n">randn</span><span class="x">(</span><span class="n">n</span><span class="x">,</span><span class="n">n</span><span class="x">)</span>
        <span class="n">c</span> <span class="o">=</span> <span class="n">randn</span><span class="x">(</span><span class="n">n</span><span class="x">,</span><span class="n">n</span><span class="x">)</span>
        <span class="n">d</span> <span class="o">=</span> <span class="n">randn</span><span class="x">(</span><span class="n">n</span><span class="x">,</span><span class="n">n</span><span class="x">)</span>
        <span class="n">P</span> <span class="o">=</span> <span class="x">[</span><span class="n">a</span> <span class="n">b</span> <span class="n">c</span> <span class="n">d</span><span class="x">]</span>
        <span class="n">Q</span> <span class="o">=</span> <span class="x">[</span><span class="n">a</span> <span class="n">b</span><span class="x">;</span> <span class="n">c</span> <span class="n">d</span><span class="x">]</span>
        <span class="n">v</span><span class="x">[</span><span class="n">i</span><span class="x">]</span> <span class="o">=</span> <span class="n">trace</span><span class="x">((</span><span class="n">P</span><span class="o">.</span><span class="err">'</span><span class="o">*</span><span class="n">P</span><span class="x">)</span><span class="o">^</span><span class="mi">4</span><span class="x">)</span>
        <span class="n">w</span><span class="x">[</span><span class="n">i</span><span class="x">]</span> <span class="o">=</span> <span class="n">trace</span><span class="x">((</span><span class="n">Q</span><span class="o">.</span><span class="err">'</span><span class="o">*</span><span class="n">Q</span><span class="x">)</span><span class="o">^</span><span class="mi">4</span><span class="x">)</span>
    <span class="k">end</span>
    <span class="n">std</span><span class="x">(</span><span class="n">v</span><span class="x">)</span><span class="o">/</span><span class="n">mean</span><span class="x">(</span><span class="n">v</span><span class="x">),</span> <span class="n">std</span><span class="x">(</span><span class="n">w</span><span class="x">)</span><span class="o">/</span><span class="n">mean</span><span class="x">(</span><span class="n">w</span><span class="x">)</span>
<span class="k">end</span></code></pre>
   </figure> 
   <p>The code above is quite clear, and should feel familiar to anyone who has programmed in other mathematical languages. The Julia implementation of <code class="highlighter-rouge">randmatstat</code> is considerably simpler than the equivalent <a href="https://github.com/JuliaLang/julia/blob/master/test/perf/micro/perf.c#L126">C implementation</a>, without giving up much performance. Planned compiler optimizations will close this performance gap in the future. By design, Julia allows you to range from tight low-level loops, up to a high-level programming style, while sacrificing some performance, but gaining the ability to express complex algorithms easily. This continuous spectrum of programming levels is a hallmark of the Julia approach to programming and is very much an intentional feature of the language.</p> 
   <h1 id="designed-for-parallelism-and-cloud-computing">Designed for Parallelism and Cloud Computing</h1> 
   <p>Julia does not impose any particular style of parallelism on the user. Instead, it provides a number of <a href="http://docs.julialang.org/en/stable/manual/parallel-computing">key building blocks for distributed computation</a>, making it flexible enough to support a number of styles of parallelism, and allowing users to add more. The following simple example demonstrates how to count the number of heads in a large number of coin tosses in parallel.</p> 
   <figure class="highlight">
    <pre><code class="language-julia" data-lang="julia"><span class="n">nheads</span> <span class="o">=</span> <span class="nd">@parallel</span> <span class="x">(</span><span class="o">+</span><span class="x">)</span> <span class="k">for</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="x">:</span><span class="mi">100000000</span>
  <span class="n">rand</span><span class="x">(</span><span class="kt">Bool</span><span class="x">)</span>
<span class="k">end</span></code></pre>
   </figure> 
   <p>This computation is automatically distributed across all available compute nodes, and the result, reduced by summation (<code class="highlighter-rouge">+</code>), is returned at the calling node.</p> 
   <p>Here is a screenshot of a web-based interactive <a href="https://github.com/JuliaLang/IJulia.jl">IJulia Notebook</a> session, using <a href="https://github.com/dcjones/Gadfly.jl">Gadfly</a>. <a href="http://www.juliabox.com">JuliaBox</a> provides a way to run IJulia notebooks in your browser on Docker sandboxed containers provisioned on demand.</p> 
   <p><a href="/images/ijulia.png" target="_blank"><img class="u-center" src="/images/ijulia.png" width="90%"></a></p> 
   <p>This paves the way for fully cloud-based operation, including data management, code editing and sharing, execution, debugging, collaboration, analysis, data exploration, and visualization. The eventual goal is to let people stop worrying about administering machines and managing data and get straight to the real problem.</p> 
   <p><a href="https://github.com/dcjones/Gadfly.jl">Gadfly</a> can produce various plots with various rendering backends in the browser (SVG, PDF, PNG and various other backends are also supported). Interactivity can be added to graphs and plots with the <a href="https://github.com/JuliaLang/Interact.jl">Interact.jl</a> package. A small sampling of the capabilities of Gadfly is presented below.</p> 
   <p><a href="/images/gadfly-demo.png" target="_blank"><img src="/images/gadfly-demo.png" width="100%"></a></p> 
   <h1 id="free-open-source-and-library-friendly">Free, Open Source and Library-Friendly</h1> 
   <p>The core of the Julia implementation is licensed under the <a href="http://en.wikipedia.org/wiki/MIT_License">MIT license</a>. Various libraries used by the Julia environment include their own licenses such as the <a href="http://en.wikipedia.org/wiki/GNU_General_Public_License">GPL</a>, <a href="http://en.wikipedia.org/wiki/GNU_Lesser_General_Public_License">LGPL</a>, and <a href="http://en.wikipedia.org/wiki/BSD_licenses">BSD</a> (therefore the environment, which consists of the language, user interfaces, and libraries, is under the GPL). The language can be built as a shared library, so users can combine Julia with their own C/Fortran code or proprietary third-party libraries. Furthermore, Julia makes it <a href="http://docs.julialang.org/en/stable/manual/calling-c-and-fortran-code/">simple to call external functions</a> in C and Fortran shared libraries, without writing any wrapper code or even recompiling existing code. You can try calling external library functions directly from Julia’s interactive prompt, getting immediate feedback. See <a href="https://github.com/JuliaLang/julia/blob/master/LICENSE.md">LICENSE</a> for the full terms of Julia’s licensing.</p> 
   <div class="footer">
     Julia is a 
    <a href="https://numfocus.org/projects/index.html">NumFocus project</a>. We thank 
    <a href="https://fastly.com">Fastly</a> for their generous infrastructural support. 
    <a href="https://github.com/JuliaLang/julialang.github.com/edit/master/index.md">Edit this page on GitHub.</a> 
   </div> 
   <!--Flipcause Integration v3.0// Flipcause Integration Instructions:
    Install the following code block once in the website Header (after <head> tag) --> 
   <style>

  .fc-black_overlay{
  display:none; position: fixed; z-index:1000001; top: 0%;left: 0%;width: 100%;height: 100%;
  background-color: black; filter: alpha(opacity=50); cursor:pointer; opacity:0.5;
  }

  .fc-white_content {
  opacity:1; display:none; margin-top: -320px; margin-left: -485px; width:970px; height:640px;
  position:fixed; top:50%; left:50%; border: none;z-index:1000002;overflow: auto;
  }

  .fc-main-box{
  opacity:1; display:none; margin:15px auto 0 auto; width:930px; position:relative; z-index:1000003;
  }

  .fc-widget_close{
  opacity:1; content:url(http://i1338.photobucket.com/albums/o691/WeCause/X_zpse4a7e538.png);
  position:absolute; z-index=1000004; right:-16px; top:-16px; display:block; cursor:pointer;
  }

  .floating_button{
  display: block; margin-top: 0px; margin-left: 0px; width:auto ; height: auto;
  position:fixed; z-index:999999; overflow: auto;
  }

  @keyframes backfadesin {
  from { opacity:0; }
  to {opacity:.5;}
  }

  @-moz-keyframes backfadesin {
  from { opacity:0; }
  to {opacity:.5;}
  }

  @-webkit-keyframes backfadesin {
  from { opacity:0; }
  to {opacity:.5;}
  }

  @-o-keyframes backfadesin {
  from { opacity:0; }
  to {opacity:.5;}
  }


  @-ms-keyframes backfadesin {
  from { opacity:0; }
  to {opacity:.5;}
  }

  @keyframes fadesin {
  0%{ opacity:0; }
  50%{ opacity:0; }
  75% {opacity: 0; transform: translateY(20px);}
  100% {opacity: 1; transform: translateY(0);}
  }

  @-moz-keyframes fadesin {
  0%{ opacity:0; }
  50%{ opacity:0; }
  75% {opacity: 0; -moz-transform: translateY(20px);}
  100% {opacity: 1; -moz-transform: translateY(0);}
  }

  @-webkit-keyframes fadesin {
  0%{ opacity:0; }
  50%{ opacity:0; }
  75% {opacity: 0; -webkit-transform: translateY(20px);}
  100% {opacity: 1; -webkit-transform: translateY(0);}
  }

  @-o-keyframes fadesin {
  0%{ opacity:0; }
  50%{ opacity:0; }
  75% {opacity: 0; -o-transform: translateY(20px);}
  100% {opacity: 1; -o-transform: translateY(0);}
  }

  @-ms-keyframes fadesin {
  0%{ opacity:0; }
  50%{ opacity:0; }
  75% {opacity: 0; -ms-transform: translateY(20px);}
  100% {opacity: 1; -ms-transform: translateY(0);}
  }

</style> 
   <script>

  function open_window(cause_id) {
  var  protocol=String(document.location.protocol);
  var new_url;
  if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)){
  new_url="https://www.flipcause.com/widget/"+cause_id
  window.open(new_url);
  }

  else {
  document.getElementById("fc-fade").style.display = "block";
  document.getElementById("fc-fade").style.webkitAnimation = "backfadesin 1s";
  document.getElementById("fc-fade").style.animation = "backfadesin 1s";
  document.getElementById("fc-fade").style.mozAnimation = "backfadesin 1s";
  document.getElementById("fc-light").style.display = "block";
  document.getElementById("fc-light").style.webkitAnimation = "fadesin 1.5s";
  document.getElementById("fc-light").style.animation = "fadesin 1.5s";
  document.getElementById("fc-light").style.mozAnimation = "fadesin 1.5s";
  document.getElementById("fc-main").style.display = "block";
  document.getElementById("fc-main").style.webkitAnimation = "fadesin 1.5s";
  document.getElementById("fc-main").style.animation = "fadesin 1.5s";
  document.getElementById("fc-main").style.mozAnimation = "fadesin 1.5s";
  document.getElementById("fc-close").style.display = "block";
  document.getElementById("fc-close").style.webkitAnimation = "fadesin 1.5s";
  document.getElementById("fc-close").style.animation = "fadesin 1.5s";
  document.getElementById("fc-close").style.mozAnimation = "fadesin 1.5s";
  document.getElementById("fc-myFrame").style.display = "block";
  document.getElementById("fc-myFrame").style.webkitAnimation = "fadesin 1.5s";
  document.getElementById("fc-myFrame").style.animation = "fadesin 1.5s";
  document.getElementById("fc-myFrame").style.mozAnimation = "fadesin 1.5s";
  document.getElementById("fc-myFrame").src="https://www.flipcause.com/widget/"+cause_id;
  }
  }


  function close_window() {
  document.getElementById("fc-fade").style.display="none";
  document.getElementById("fc-light").style.display="none";
  document.getElementById("fc-main").style.display="none";
  document.getElementById("fc-close").style.display="none";
  document.getElementById("fc-myFrame").style.display="none";
  }

</script> 
   <div id="fc-fade" class="fc-black_overlay" onclick="close_window()"></div> 
   <div id="fc-light" class="fc-white_content"> 
    <div id="fc-main" class="fc-main-box"> 
     <div id="fc-close" class="fc-widget_close" onclick="close_window()"> 
     </div>
     <iframe id="fc-myFrame" iframe height="580" width="925" style="border: 0;
                                                                           border-radius:5px 5px 5px 5px; box-shadow:0 0 8px rgba(0, 0, 0, 0.5);" scrolling="no" src=""></iframe>
    </div> 
   </div> 
   <!--END Flipcause Main Integration Code--> 
   <div style="background:#ccc; border-radius:0px 0px 0px 0px;font-weight:normal; font-family:Arial, Helvetica, sans-serif;border:none;box-shadow:none;left: 50%; margin-left:-72.5px;clear: both;display: block; width:145px;height:45px; line-height:2.8; position:relative; font-size:16px;text-align:center; cursor:pointer;color:#fff;text-decoration: none; z-index:1" onclick="open_window('MjI1Nw==')">
    Donate Now
   </div> 
  </div>   
 </body>
</html>