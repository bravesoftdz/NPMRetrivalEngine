<!doctype html>
<html itemscope itemtype="http://schema.org/Article">
 <head> 
  <meta charset="UTF-8"> 
  <title>Hello World Chat-bot using Lambda</title> 
  <meta name="description" content="Creating your first chat-bot for Facebook Messenger, Skype, Telegram and Slack using AWS Lambda"> 
  <link rel="canonical" href="https://claudiajs.com/tutorials/hello-world-chatbot.html"> 
  <link rel="alternate" type="application/rss+xml" title="Claudia.js" href="https://claudiajs.com/feed.xml"> 
  <!-- Shorcut icon --> 
  <link rel="shortcut icon" href="https://claudiajs.com/assets/icon-32.png"> 
  <link rel="apple-touch-icon-precomposed" sizes="152x152" href="https://claudiajs.com/assets/icon-152.png"> 
  <!-- Schema.org markup for Google+ --> 
  <meta itemprop="name" content="Hello World Chat-bot using Lambda"> 
  <meta itemprop="description" content="Creating your first chat-bot for Facebook Messenger, Skype, Telegram and Slack using AWS Lambda"> 
  <meta itemprop="image" content="https://claudiajs.com/assets/claudia-events-menu.png"> 
  <!-- Twitter Card data --> 
  <meta name="twitter:card" content="summary_large_image"> 
  <meta name="twitter:site" content="@gojkoadzic"> 
  <meta name="twitter:title" content="Hello World Chat-bot using Lambda"> 
  <meta name="twitter:description" content="Creating your first chat-bot for Facebook Messenger, Skype, Telegram and Slack using AWS Lambda"> 
  <meta name="twitter:creator" content="@gojkoadzic"> 
  <!-- Twitter summary card with large image must be at least 280x150px --> 
  <meta name="twitter:image:src" content="https://claudiajs.com/assets/claudia-events-menu.png"> 
  <!-- Open Graph data --> 
  <meta property="og:title" content="Hello World Chat-bot using Lambda"> 
  <meta property="og:type" content="article"> 
  <meta property="og:url" content="https://claudiajs.com/tutorials/hello-world-chatbot.html"> 
  <meta property="og:image" content="https://claudiajs.com/assets/claudia-events-menu.png"> 
  <meta property="og:description" content="Creating your first chat-bot for Facebook Messenger, Skype, Telegram and Slack using AWS Lambda"> 
  <meta property="og:site_name" content="Claudia.js"> 
  <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
  <meta name="asset-v" content="1498203075"> 
  <link rel="stylesheet" type="text/css" media="all" href="/v/main-1498203075.css"> 
 </head> 
 <body> 
  <div id="header-full"> 
   <div id="header"> 
    <a href="#nav" class="open-menu"> <span class="icon-bar"></span> <span class="icon-bar"></span> <span class="icon-bar"></span> </a> 
    <a href="/" id="logo"> Claudia<span>.js</span> </a> 
    <ul id="nav-social"> 
     <li><a href="https://github.com/claudiajs"><i class="fa fa-github-square"></i></a></li> 
     <li><a href="/feed.xml"><i class="fa fa-rss-square"></i></a></li> 
     <li><a href="https://twitter.com/intent/follow?screen_name=gojkoadzic"><i class="fa fa-twitter"></i></a></li> 
    </ul> 
    <nav id="nav" class="clearfix"> 
     <a href="#" class="close-menu-big">Close</a> 
     <div id="nav-container"> 
      <a href="#" class="close-menu"> <span class="icon-bar"></span> <span class="icon-bar"></span> <span class="icon-bar"></span> </a> 
      <ul id="nav-main"> 
       <li><a href="/">Home</a></li> 
       <li><a href="/tutorials/index.html">Tutorials</a> </li>
       <li><a href="/documentation.html">Documentation</a> </li>
       <li><a href="/news/index.html">News</a></li> 
       <li><a href="https://gitter.im/claudiajs/claudia" target="_blank">Contact</a></li> 
      </ul> 
     </div> 
    </nav> 
   </div> 
  </div> 
  <div id="hero-container" class="color-4"> 
   <img width="700" height="430" src="/assets/header-tutorials.png"> 
  </div> 
  <header id="main-header" class="clearfix"> 
   <div id="intro-header-inner"> 
    <h1 id="main-title">Hello World Chat-bot using Lambda</h1> 
   </div> 
  </header> 
  <div id="content" class="clearfix"> 
   <article class="static-page"> 
    <p>This is a step-by-step guide for creating a simple serverless chat-bot using AWS Lambda. You’ll learn how to create a chat bot for Facebook Messenger, Skype, Telegram and Slack – all in less than 10 lines of code. We’ll use the <a href="/claudia-bot-builder.html">Claudia Bot Builder</a> to set-up the chat bot.</p> 
    <p>Claudia Bot Builder helps JavaScript developers create chat-bots for Facebook, Telegram, Skype and Slack easily, and deploy them to AWS Lambda and API Gateway in minutes. The key idea behind the project is to remove all the boilerplate code and common infrastructure tasks, so you can focus on writing the really important part of the bot – your business workflows. Everything else is handled by the Bot Builder.</p> 
    <h2 id="prerequisites">Prerequisites</h2> 
    <ul> 
     <li>Node.js 6</li> 
     <li>NPM</li> 
     <li>An AWS account with the permissions to create Lambda functions, API Gateway end-points and IAM roles.</li> 
     <li>Claudia.js 1.4.0 or later</li> 
    </ul> 
    <p>If you’re completely new to using Claudia.js, check out <a href="/tutorials/installing.html">Installing and configuring Claudia.js</a> for information on how to set up access credentials.</p> 
    <h2 id="creating-a-simple-text-bot">Creating a simple text bot</h2> 
    <p>First, create an empty folder, and a new NPM project inside it. Just make sure to give it a descriptive name:</p> 
    <figure class="highlight">
     <pre><code class="language-console" data-lang="console">npm init</code></pre>
    </figure> 
    <p>Then, add the <code class="highlighter-rouge">claudia-bot-builder</code> library as a project dependency:</p> 
    <figure class="highlight">
     <pre><code class="language-console" data-lang="console">npm install claudia-bot-builder -S</code></pre>
    </figure> 
    <p>For this particular bot, we’ll generate some dynamic content using the <code class="highlighter-rouge">huh</code> excuse generator. So add that as a project dependency as well:</p> 
    <figure class="highlight">
     <pre><code class="language-console" data-lang="console">npm install huh -S</code></pre>
    </figure> 
    <p>Claudia Bot Builder simplifies most of the messaging workflows, and converts incoming messages from all the supported platforms into a common format, so you can handle it easily. It also automatically packages text responses into the right format for the requesting bot engine, so you don’t have to worry about formatting results for simple responses. That makes it easy to create simple text responses.</p> 
    <p>Create a file called <code class="highlighter-rouge">bot.js</code> and paste the following content:</p> 
    <figure class="highlight">
     <pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">botBuilder</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'claudia-bot-builder'</span><span class="p">),</span>
    <span class="nx">excuse</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'huh'</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">botBuilder</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">request</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="s1">'Thanks for sending '</span> <span class="o">+</span> <span class="nx">request</span><span class="p">.</span><span class="nx">text</span>  <span class="o">+</span> 
      <span class="s1">'. Your message is very important to us, but '</span> <span class="o">+</span> 
      <span class="nx">excuse</span><span class="p">.</span><span class="nx">get</span><span class="p">();</span>
<span class="p">});</span></code></pre>
    </figure> 
    <p>That’s pretty much it.</p> 
    <h2 id="deploying-the-bot">Deploying the bot</h2> 
    <p>You can now deploy the bot to AWS:</p> 
    <figure class="highlight">
     <pre><code class="language-console" data-lang="console">claudia create --region us-east-1 --api-module bot</code></pre>
    </figure> 
    <p>Claudia will automatically create the right web hooks for all the supported bot platforms. After that, you just need to to connect your bot to the bot platforms.</p> 
    <h3 id="connecting-with-facebook-messenger">Connecting with Facebook Messenger</h3> 
    <ul> 
     <li>Create a new bot page in Facebook and a messenger app, as explained in the <a href="https://developers.facebook.com/docs/messenger-platform/guides/quick-start">Facebook Messenger Getting Started Guide</a>.</li> 
     <li>Use <code class="highlighter-rouge">claudia update --configure-fb-bot</code> to get the Webhook URL and the verification token, which you can copy to your Facebook Messenger configuration.</li> 
     <li>Generate the page access token from Facebook, and copy that back to Claudia when asked.</li> 
     <li>If you want to make the bot public, submit the app for <a href="https://developers.facebook.com/docs/messenger-platform/app-review">App Review</a></li> 
    </ul> 
    <h3 id="creating-a-slack-slash-command-for-your-channel">Creating a Slack Slash command for your channel</h3> 
    <ul> 
     <li>Follow the instructions from <a href="https://my.slack.com/services/new/slash-commands">Slack API Docs</a> to creeate a slash command for your team.</li> 
     <li>Use <code class="highlighter-rouge">claudia update --configure-slack-slash-command</code> to configure the token.</li> 
    </ul> 
    <h3 id="creating-a-slack-slash-command-application">Creating a Slack Slash Command Application</h3> 
    <ul> 
     <li>Follow the instructions from <a href="https://api.slack.com/">Slack API Docs</a> to set up an app with a slash command.</li> 
     <li>Use <code class="highlighter-rouge">claudia update --configure-slack-slash-app</code> to configure the access tokens.</li> 
     <li><a href="https://api.slack.com/docs/slack-button">Create a Slack Button</a> so people can add your app to their channels.</li> 
    </ul> 
    <h3 id="viber-bot-configuration">Viber bot configuration</h3> 
    <ul> 
     <li>Create a <a href="http://www.viber.com/en/public-accounts">Viber public account</a>, get the token</li> 
     <li>Use <code class="highlighter-rouge">claudia update --configure-viber-bot</code> to configure your bot with it’s Viber access token</li> 
    </ul> 
    <h3 id="telegram-bot-configuration">Telegram bot configuration</h3> 
    <ul> 
     <li>For getting a Telegram bot access token - use their <a href="https://telegram.me/BotFather">BotFather</a> bot for creating bots.</li> 
     <li>Use <code class="highlighter-rouge">claudia update --configure-telegram-bot</code> to configure the access token in your bot.</li> 
    </ul> 
    <h3 id="skype-bot-configuration">Skype bot configuration</h3> 
    <ul> 
     <li>Create a Microsoft App and get its App ID and App password at <a href="https://apps.dev.microsoft.com/">Microsoft Apps</a></li> 
     <li>Use <code class="highlighter-rouge">claudia update --configure-skype-bot</code> to configure the access details in your bot</li> 
     <li>Create the Skype bot using the webhook URL printed by the installer at the <a href="https://developer.microsoft.com/en-us/skype/bots/manage/Create">Skype Bots Page</a></li> 
    </ul> 
    <h3 id="twilio-bot-configuration">Twilio bot configuration</h3> 
    <ul> 
     <li>Create a Twilio account, buy a Twilio virtual number and create a Messaging Service with your virtual number at <a href="https://www.twilio.com/console/sms/services">Twilio Dashboard Messaging Service</a></li> 
     <li>Get your Twilio SID, Account Number from your <a href="https://www.twilio.com/console/sms/dashboard">Twilio Dashboard - Show API Credentials</a></li> 
     <li>Get the Virtual Number you connected to the Messaging Service</li> 
     <li>Use <code class="highlighter-rouge">claudia update --configure-twilio-sms-bot</code> to configure the access details in your bot</li> 
     <li>Update your Twilio messaging service webhook URL by the previous command and choose <code class="highlighter-rouge">HTTP POST</code> from the dropdown;</li> 
    </ul> 
    <h3 id="kik-bot-configuration">Kik bot configuration</h3> 
    <ul> 
     <li>Create a Kik account, scan the Kik code with your Kik app</li> 
     <li>Setup your bot with Botsworth (Kik Bot) and get your bot’s username</li> 
     <li>Get your Api Key at <a href="https://dev.kik.com/">Dev Kik</a></li> 
     <li>Use <code class="highlighter-rouge">claudia update --configure-kik-bot</code> to configure your bot with it’s username and Api Key</li> 
    </ul> 
    <h3 id="groupme-bot-configuration">GroupMe bot configuration</h3> 
    <ul> 
     <li>Register for a GroupMe account and their developer account</li> 
     <li>Create your group within GroupMe</li> 
     <li>Create your bot on the <a href="https://dev.groupme.com/bots">GroupMe Developer site</a> (without the CallbackURL), assign it to the created Group and copy its bot id</li> 
     <li>Invoke <code class="highlighter-rouge">claudia create</code> or <code class="highlighter-rouge">claudia update</code> with the <code class="highlighter-rouge">--configure-groupme-bot</code> flag</li> 
     <li>Enter the copied bot id, when Claudia requests</li> 
     <li>Claudia Bot Builder will respond with your AWS Lambda incoming webhook address, copy that webhook URL</li> 
     <li>Edit your bot and paste the copied webhook URL into Callback URL field for your bot</li> 
    </ul> 
    <h3 id="try-it-out-live">Try it out live</h3> 
    <p>You can see this bot in action and play with it live from the <a href="https://github.com/claudiajs/example-projects/tree/master/simple-bot">Github Claudia Examples repository</a>.</p> 
    <h2 id="more-complex-workflows">More complex workflows</h2> 
    <p>The example bot just responds with silly excuses, so for homework, do something more interesting with it. The <code class="highlighter-rouge">request</code> object passed into the message handling function contains the entire message in the <code class="highlighter-rouge">text</code> field, but it also has some other pieces of data for more complex work. The <code class="highlighter-rouge">sender</code> field will identify the user sending the message, so you can create threads of continuity and sessions. The <code class="highlighter-rouge">type</code> field will contain the identifier of the bot end-point that received the message (for example <code class="highlighter-rouge">skype</code> or <code class="highlighter-rouge">facebook</code>) so you can respond differently to different bot systems. The <code class="highlighter-rouge">originalRequest</code> field will contain the entire unparsed original message, so you can handle platform-specific requests and go beyond simple text. For example, check out the <a href="https://github.com/claudiajs/example-projects/tree/master/bot-with-buttons">Fact Bot</a>, which looks up facts about topics on WikiData and creates Facebook Messenger menus.</p> 
    <p>Although it’s enough to just return a string value for simple cases, and the Bot Builder will package it correctly for individual bot engines, you can just return a more complex object and get platform-specific features – for example Facebook buttons. In that case, make sure to use the <code class="highlighter-rouge">type</code> field of the request to decide on additional features.</p> 
    <p>For asynchronous workflows, just send back a <code class="highlighter-rouge">Promise</code> object, and resolve it with the response later. The convention is the same: if the promise gets resolved with a string, the Claudia Bot Builder will automatically package it into the correct template based on the bot endpoint that received a message. Reply with an object instead of a string, and the Bot Builder will not do any specific parsing, letting you take advantage of more advanced bot features for individual platforms. Remember to configure your Lambda function for longer execution if you plan to use asynchronous replies, AWS by default limits this to 3 seconds.</p> 
    <h2 id="more-information">More information</h2> 
    <p>See other <a href="/tutorials/index.html">tutorials and guides</a> on this site for ideas on how to set-up the development environment and fine-tune the packaging.</p> 
    <p>Check out the <a href="/documentation.html#apidocs">API Documentation</a> for more information on the request object and how to create more complex responses, such as receipts for Facebook or interactive buttons for Slack.</p> 
   </article> 
   <div class="callout"> 
    <h2>Did you like this tutorial? <span> Get notified when we publish the next one. </span> </h2> 
    <p> Once a month, high value mailing list, no ads or spam. (<a style="color:white; font-weight: 300" href="http://us2.campaign-archive1.com/home/?u=abe09ce689751513abf6f095f&amp;id=91abf35181">Check out the past issues</a>)</p> 
    <form action="//neuri.us2.list-manage.com/subscribe/post?u=abe09ce689751513abf6f095f&amp;id=91abf35181" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate> 
     <input type="hidden" name="SIGNUP" value="/tutorials/hello-world-chatbot.html"> 
     <input type="hidden" name="SOURCE" value="" role="session.referrer"> 
     <input type="email" value="" placeholder="Email address" name="EMAIL" class="required email" id="mce-EMAIL"> 
     <input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="button"> 
     <div style="position: absolute; left: -5000px;" aria-hidden="true">
      <input type="text" name="b_abe09ce689751513abf6f095f_91abf35181" tabindex="-1" value="">
     </div> 
    </form>
   </div>  
  </div>  
  <footer id="main-footer"> 
   <div id="main-footer-container" class="clearfix"> 
    <div id="footer-description"> 
     <img src="/assets/claudiajs.svg" alt="Claudia.js" id="logo-footer"> 
     <p>Opensource deployment tool for Node.js projects, helping JavaScript developers use AWS Lambda and API Gateway easily.</p> 
    </div> 
    <div id="sidebar-footer-left" class="sidebar-footer"> 
     <aside class="widget-container"> 
      <div class="widget-wrapper clearfix"> 
       <h3 class="widget-title">Sitemap</h3> 
       <ul> 
        <li><a href="/tutorials/index.html">Articles and Tutorials</a></li> 
        <li><a href="/documentation.html">Documentation</a></li> 
        <li><a href="/news/index.html">News</a></li> 
        <li><a href="/claudia-api-builder.html">Claudia API Builder</a></li> 
        <li><a href="/claudia-bot-builder.html">Claudia Bot Builder</a></li> 
        <li><a href="https://gitter.im/claudiajs/claudia" target="_blank">Contact Us</a></li> 
       </ul> 
      </div> 
     </aside> 
    </div> 
    <div id="sidebar-footer-middle" class="sidebar-footer"> 
     <aside class="widget-container"> 
      <div class="widget-wrapper clearfix"> 
       <h3 class="widget-title">Quick Links</h3> 
       <ul> 
        <li><a href="/tutorials/hello-world-lambda.html">Getting Started</a></li> 
        <li><a href="/documentation.html#args">Command line options</a></li> 
        <li><a href="/documentation.html#packaging">Customising deployments</a></li> 
        <li><a href="https://github.com/claudiajs/example-projects">Example projects</a></li> 
        <li><a href="https://github.com/claudiajs/claudia/issues">Report a bug/issue</a></li> 
        <li><a href="https://github.com/claudiajs/claudia">Source Code @ GitHub</a></li> 
       </ul> 
      </div> 
     </aside> 
    </div> 
    <div id="sidebar-footer-right" class="sidebar-footer"> 
     <aside class="widget-container"> 
      <div class="widget-wrapper clearfix"> 
       <h3 class="widget-title">Latest News</h3> 
       <ul class="menu news-sidebar"> 
        <li class="clearfix"> <h4><a href="/news/2017/06/07/claudia-2-14-alexa-trigger.html">Claudia 2.14: Alexa privileges</a></h4> <span class="date-news">Jun 7, 2017</span> </li> 
        <li class="clearfix"> <h4><a href="/news/2017/06/07/claudia-2-13.html">Claudia 2.13: Easier updates</a></h4> <span class="date-news">Jun 7, 2017</span> </li> 
        <li><h4><i class="fa fa-bullhorn"></i><a href="/news/index.html">Older News</a></h4></li> 
        <li><h4><i class="fa fa-rss-square"></i><a href="/feed.xml">RSS Feed</a></h4></li> 
       </ul> 
      </div> 
     </aside> 
    </div> 
    <div id="footer-copyright" class="clearfix"> 
     <h5>© 2016 Claudia.js / <a href="https://gojko.net">Gojko Adzic</a></h5> 
    </div> 
   </div> 
   <a href="#" id="back-top"><span>Top</span></a> 
  </footer> 
  <script src="/v/main-1498203075.js"></script> 
  <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-80137200-1', 'auto');
  ga('send', 'pageview');
</script>   
 </body>
</html>