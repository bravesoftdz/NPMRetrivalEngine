<!doctype html>
<html lang="en">
 <head> 
  <meta charset="utf-8"> 
  <meta http-equiv="X-UA-Compatible" content="IE=edge"> 
  <meta name="viewport" content="width=device-width, initial-scale=1"> 
  <meta content="#2f3241" name="theme-color"> 
  <link rel="shortcut icon" href="/images/favicon.ico"> 
  <link rel="stylesheet" href="/css/index.css"> 
  <link rel="alternate" type="application/rss+xml" href="https://developers.viber.com/feed.xml" title="Viber Developers Hub"> 
  <!-- Begin Jekyll SEO tag v2.3.0 --> 
  <title>Viber Node.JS Bot API | Viber Developers Hub</title> 
  <meta property="og:title" content="Viber Node.JS Bot API"> 
  <meta property="og:locale" content="en_US"> 
  <meta name="description" content="Viber lets everyone in the world connect. Freely. Millions of Viber users call, text, and send photos to each other, worldwide - for free."> 
  <meta property="og:description" content="Viber lets everyone in the world connect. Freely. Millions of Viber users call, text, and send photos to each other, worldwide - for free."> 
  <link rel="canonical" href="https://developers.viber.com/docs/api/nodejs-bot-api/"> 
  <meta property="og:url" content="https://developers.viber.com/docs/api/nodejs-bot-api/"> 
  <meta property="og:site_name" content="Viber Developers Hub"> 
  <meta property="og:image" content="https://developers.viber.com/images/devlogo.png"> 
  <meta property="og:image:height" content="630"> 
  <meta property="og:image:width" content="1200"> 
  <meta name="twitter:card" content="summary_large_image"> 
  <meta name="twitter:site" content="@viber"> 
  <script type="application/ld+json">
{"name":null,"description":"Viber lets everyone in the world connect. Freely. Millions of Viber users call, text, and send photos to each other, worldwide - for free.","author":null,"@type":"WebPage","url":"https://developers.viber.com/docs/api/nodejs-bot-api/","image":{"width":1200,"height":630,"url":"https://developers.viber.com/images/devlogo.png","@type":"imageObject"},"publisher":{"@type":"Organization","logo":{"@type":"ImageObject","url":"https://developers.viber.com/images/devlogo.png"}},"headline":"Viber Node.JS Bot API","dateModified":null,"datePublished":null,"sameAs":null,"mainEntityOfPage":null,"@context":"http://schema.org"}</script> 
  <!-- End Jekyll SEO tag --> 
  <script src="/js/index.js"></script> 
  <script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-89879627-1', 'auto');
    ga('send', 'pageview');
  </script> 
 </head> 
 <body> 
  <header class="site-header"> 
   <div class="container"> 
    <a class="site-header-logo no-underline-hover" href="/"> <img src="/images/devlogo.png"> </a> 
    <nav class="site-header-nav"> 
     <a class="site-header-nav-item active" href="/docs/">Docs</a> 
     <a class="site-header-nav-item " href="/blog/">Blog</a> 
     <a class="site-header-nav-item " href="/community/">Community</a> 
     <a class="site-header-nav-item " href="/partners/">Partners</a> 
     <a class="site-header-nav-item " href="/releases/">Releases</a> 
     <a class="site-header-nav-item " href="/contact/">Contact</a> 
     <a class="site-header-nav-item" href="/search/" title="Site search"><span class="octicon octicon-search"></span></a> 
    </nav> 
   </div> 
  </header> 
  <div class="subheader text-left"> 
   <div class="container-narrow"> 
    <h1><span class="mr-3 mr-lg-4">Viber API Documentation</span><span class="docs-version">7.1.0</span></h1> 
    <h4 class="docs-breadcrumbs"> <a href="/docs/">Docs</a> <span class="docs-breadcrumbs-divider">/</span> <a href="/docs/api/">API</a> <span class="docs-breadcrumbs-divider">/</span> Viber Node.JS Bot API </h4> 
   </div> 
  </div> 
  <section class="page-section docs strong-headers"> 
   <div class="container-narrow"> 
    <h1 id="viber-nodejs-bot-api">Viber Node.JS Bot API</h1> 
    <p>Use this library to develop a bot for the Viber platform. The library is available on <strong><a href="https://github.com/Viber/viber-bot-node">GitHub</a></strong> as well as a package on <a href="https://www.npmjs.com/package/viber-bot">npm</a>.</p> 
    <h2 class="no_toc" id="table-of-contents">Table of Contents</h2> 
    <ul id="markdown-toc"> 
     <li><a href="#license" id="markdown-toc-license">License</a></li> 
     <li><a href="#library-prerequisites" id="markdown-toc-library-prerequisites">Library Prerequisites</a></li> 
     <li><a href="#installation" id="markdown-toc-installation">Installation</a> 
      <ul> 
       <li><a href="#npm" id="markdown-toc-npm">npm</a></li> 
       <li><a href="#express" id="markdown-toc-express">Express</a></li> 
      </ul> </li> 
     <li><a href="#lets-get-started" id="markdown-toc-lets-get-started">Let’s get started!</a> 
      <ul> 
       <li><a href="#creating-an-echo-bot" id="markdown-toc-creating-an-echo-bot">Creating an echo Bot</a></li> 
       <li><a href="#using-winston-logger" id="markdown-toc-using-winston-logger">Using Winston logger</a></li> 
       <li><a href="#do-you-supply-a-basic-router-for-text-messages" id="markdown-toc-do-you-supply-a-basic-router-for-text-messages">Do you supply a basic router for text messages?</a></li> 
      </ul> </li> 
     <li><a href="#api" id="markdown-toc-api">API</a> 
      <ul> 
       <li><a href="#viber-bot" id="markdown-toc-viber-bot">Viber Bot</a></li> 
       <li><a href="#new-viberbot" id="markdown-toc-new-viberbot">New ViberBot()</a></li> 
       <li><a href="#botonhandler" id="markdown-toc-botonhandler">bot.on(handler)</a></li> 
       <li><a href="#botgetbotprofile" id="markdown-toc-botgetbotprofile">bot.getBotProfile()</a></li> 
       <li><a href="#botgetuserdetailsuserprofile" id="markdown-toc-botgetuserdetailsuserprofile">bot.getUserDetails(userProfile)</a></li> 
       <li><a href="#botgetonlinestatusviberuserids" id="markdown-toc-botgetonlinestatusviberuserids">bot.getOnlineStatus(viberUserIds)</a></li> 
       <li><a href="#botsetwebhookurl" id="markdown-toc-botsetwebhookurl">bot.setWebhook(url)</a></li> 
       <li><a href="#botsendmessageuserprofile-messages-optionaltrackingdata" id="markdown-toc-botsendmessageuserprofile-messages-optionaltrackingdata">bot.sendMessage(userProfile, messages, [optionalTrackingData])</a></li> 
       <li><a href="#botposttopublicchatuserprofile-messages" id="markdown-toc-botposttopublicchatuserprofile-messages">bot.postToPublicChat(userProfile, messages)</a></li> 
       <li><a href="#botmiddleware" id="markdown-toc-botmiddleware">bot.middleware()</a></li> 
       <li><a href="#botontextmessageregex-handler" id="markdown-toc-botontextmessageregex-handler">bot.onTextMessage(regex, handler)</a></li> 
       <li><a href="#botonerrorhandler" id="markdown-toc-botonerrorhandler">bot.onError(handler)</a></li> 
       <li><a href="#botonconversationstarteduserprofile-issubscribed-context-onfinish" id="markdown-toc-botonconversationstarteduserprofile-issubscribed-context-onfinish">bot.onConversationStarted(userProfile, isSubscribed, context, onFinish)</a></li> 
       <li><a href="#botonsubscribehandler" id="markdown-toc-botonsubscribehandler">bot.onSubscribe(handler)</a></li> 
       <li><a href="#botonunsubscribehandler" id="markdown-toc-botonunsubscribehandler">bot.onUnsubscribe(handler)</a></li> 
       <li><a href="#response-object" id="markdown-toc-response-object">Response object</a></li> 
       <li><a href="#userprofile-object" id="markdown-toc-userprofile-object">UserProfile object</a></li> 
       <li><a href="#message-object" id="markdown-toc-message-object">Message Object</a></li> 
      </ul> </li> 
     <li><a href="#sample-project" id="markdown-toc-sample-project">Sample project</a></li> 
     <li><a href="#community" id="markdown-toc-community">Community</a></li> 
    </ul> 
    <h2 id="license">License</h2> 
    <p>This library is released under the terms of the Apache 2.0 license. See <a href="https://github.com/Viber/viber-bot-node/blob/master/LICENSE.md">License</a> for more information.</p> 
    <h2 id="library-prerequisites">Library Prerequisites</h2> 
    <ol> 
     <li>Node &gt;= 5.0.0</li> 
     <li>An Active Viber account on a platform which supports Public Accounts/ bots (iOS/Android). This account will automatically be set as the account administrator during the account creation process.</li> 
     <li>Active Public Account/ bot.</li> 
     <li>Account authentication token - unique account identifier used to validate your account in all API requests. Once your account is created your authentication token will appear in the account’s “edit info” screen (for admins only). Each request posted to Viber by the account will need to contain the token.</li> 
     <li>Certification - You’ll need a trusted (ca.pem) certificate, not self-signed. You can find one at <a href="https://letsencrypt.org/">Let’s Encrypt</a> or buy one.</li> 
    </ol> 
    <h2 id="installation">Installation</h2> 
    <p>This library is released on <a href="https://www.npmjs.com/package/viber-bot">npm</a>.</p> 
    <h3 id="npm">npm</h3> 
    <p>Install with <a href="https://www.npmjs.com/package/viber-bot"><code class="highlighter-rouge">npm install viber-bot --save</code></a></p> 
    <h3 id="express">Express</h3> 
    <p>If you are already using express or equivalent, you can do the following:</p> 
    <div class="language-js highlighter-rouge">
     <pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s2">"/viber/webhook"</span><span class="p">,</span> <span class="nx">bot</span><span class="p">.</span><span class="nx">middleware</span><span class="p">());</span>
</code></pre> 
    </div> 
    <p>Please revisit <a href="http://expressjs.com/en/api.html#app.use">app.use()</a> documentation. For more information see <a href="#middleware">ViberBot.middleware()</a>.</p> 
    <h2 id="lets-get-started">Let’s get started!</h2> 
    <p>Creating a basic Viber bot is simple:</p> 
    <ol> 
     <li>Import <code class="highlighter-rouge">viber-bot</code> library to your project</li> 
     <li>Create a Public Account or bot and use the API key from <a href="">https://developers.viber.com</a></li> 
     <li>Configure your bot as described in the documentation below</li> 
     <li>Add the bot as middleware to your server with <code class="highlighter-rouge">bot.middleware()</code></li> 
     <li>Start your web server</li> 
     <li>Call <code class="highlighter-rouge">setWebhook(url)</code> with your web server url</li> 
    </ol> 
    <h3 id="creating-an-echo-bot">Creating an echo Bot</h3> 
    <p>Firstly, let’s <em>import and configure</em> our bot:</p> 
    <div class="language-js highlighter-rouge">
     <pre class="highlight"><code><span class="s1">'use strict'</span><span class="p">;</span>

<span class="kr">const</span> <span class="nx">ViberBot</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'viber-bot'</span><span class="p">).</span><span class="nx">Bot</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">BotEvents</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'viber-bot'</span><span class="p">).</span><span class="nx">Events</span><span class="p">;</span>

<span class="kr">const</span> <span class="nx">bot</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ViberBot</span><span class="p">({</span>
	<span class="na">authToken</span><span class="p">:</span> <span class="nx">YOUR_AUTH_TOKEN_HERE</span><span class="p">,</span>
	<span class="na">name</span><span class="p">:</span> <span class="s2">"EchoBot"</span><span class="p">,</span>
	<span class="na">avatar</span><span class="p">:</span> <span class="s2">"http://viber.com/avatar.jpg"</span> <span class="c1">// It is recommended to be 720x720, and no more than 100kb.</span>
<span class="p">});</span>

<span class="c1">// Perfect! Now here's the key part:</span>
<span class="nx">bot</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="nx">BotEvents</span><span class="p">.</span><span class="nx">MESSAGE_RECEIVED</span><span class="p">,</span> <span class="p">(</span><span class="nx">message</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
	<span class="c1">// Echo's back the message to the client. Your bot logic should sit here.</span>
	<span class="nx">response</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
<span class="p">});</span>

<span class="c1">// Wasn't that easy? Let's create HTTPS server and set the webhook:</span>
<span class="kr">const</span> <span class="nx">https</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'https'</span><span class="p">);</span>
<span class="kr">const</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">8080</span><span class="p">;</span>

<span class="c1">// Viber will push messages sent to this URL. Web server should be internet-facing.</span>
<span class="kr">const</span> <span class="nx">webhookUrl</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">WEBHOOK_URL</span><span class="p">;</span>

<span class="kr">const</span> <span class="nx">httpsOptions</span> <span class="o">=</span> <span class="p">{</span>
	<span class="na">key</span><span class="p">:</span> <span class="p">...,</span>
	<span class="na">cert</span><span class="p">:</span> <span class="p">...,</span>
	<span class="na">ca</span><span class="p">:</span> <span class="p">...</span>
<span class="p">};</span> <span class="c1">// Trusted SSL certification (not self-signed).</span>
<span class="nx">https</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">httpsOptions</span><span class="p">,</span> <span class="nx">bot</span><span class="p">.</span><span class="nx">middleware</span><span class="p">()).</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">bot</span><span class="p">.</span><span class="nx">setWebhook</span><span class="p">(</span><span class="nx">webhookUrl</span><span class="p">));</span>
</code></pre> 
    </div> 
    <h3 id="using-winston-logger">Using Winston logger</h3> 
    <p>We provide an option to use <a href="https://www.npmjs.com/package/winston">Winston</a> logger with our library. The only requirement is that you use Winston &gt;= 2.0.0.</p> 
    <div class="language-js highlighter-rouge">
     <pre class="highlight"><code><span class="s1">'use strict'</span><span class="p">;</span>

<span class="kr">const</span> <span class="nx">ViberBot</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'viber-bot'</span><span class="p">).</span><span class="nx">Bot</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">winston</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'winston'</span><span class="p">);</span>
<span class="kr">const</span> <span class="nx">toYAML</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'winston-console-formatter'</span><span class="p">);</span> <span class="c1">// makes the output more friendly</span>

<span class="kd">function</span> <span class="nx">createLogger</span><span class="p">()</span> <span class="p">{</span>
	<span class="kr">const</span> <span class="nx">logger</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">winston</span><span class="p">.</span><span class="nx">Logger</span><span class="p">({</span>
		<span class="na">level</span><span class="p">:</span> <span class="s2">"debug"</span>
	<span class="p">});</span> <span class="c1">// We recommend DEBUG for development</span>
	<span class="nx">logger</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">winston</span><span class="p">.</span><span class="nx">transports</span><span class="p">.</span><span class="nx">Console</span><span class="p">,</span> <span class="nx">toYAML</span><span class="p">.</span><span class="nx">config</span><span class="p">());</span>
	<span class="k">return</span> <span class="nx">logger</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">const</span> <span class="nx">logger</span> <span class="o">=</span> <span class="nx">createLogger</span><span class="p">();</span>
<span class="kr">const</span> <span class="nx">bot</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ViberBot</span><span class="p">({</span>
	<span class="na">logger</span><span class="p">:</span> <span class="nx">logger</span><span class="p">,</span>
	<span class="na">authToken</span><span class="p">:</span> <span class="p">...,</span>
	<span class="p">...</span>
<span class="p">});</span>
</code></pre> 
    </div> 
    <h3 id="do-you-supply-a-basic-router-for-text-messages">Do you supply a basic router for text messages?</h3> 
    <p>Well funny you ask. Yes we do. But a word of warning - messages sent to your router callback will also be emitted to the <code class="highlighter-rouge">BotEvents.MESSAGE_RECEIVED</code> event.</p> 
    <div class="language-js highlighter-rouge">
     <pre class="highlight"><code><span class="kr">const</span> <span class="nx">TextMessage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'viber-bot'</span><span class="p">).</span><span class="nx">Message</span><span class="p">.</span><span class="nx">Text</span><span class="p">;</span>

<span class="c1">// A simple regular expression to answer messages in the form of 'hi' and 'hello'.</span>
<span class="nx">bot</span><span class="p">.</span><span class="nx">onTextMessage</span><span class="p">(</span><span class="sr">/^hi|hello$/i</span><span class="p">,</span> <span class="p">(</span><span class="nx">message</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="k">new</span> <span class="nx">TextMessage</span><span class="p">(</span><span class="err">`</span><span class="nx">Hi</span> <span class="nx">there</span> <span class="nx">$</span><span class="p">{</span><span class="nx">response</span><span class="p">.</span><span class="nx">userProfile</span><span class="p">.</span><span class="nx">name</span><span class="p">}.</span> <span class="nx">I</span> <span class="nx">am</span> <span class="nx">$</span><span class="p">{</span><span class="nx">bot</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="err">`</span><span class="p">)));</span>
</code></pre> 
    </div> 
    <p>Have you noticed how we created the <code class="highlighter-rouge">TextMessage</code> instance? There’s a all bunch of message types you should get familiar with.</p> 
    <ul> 
     <li><a href="#TextMessage">Text Message</a></li> 
     <li><a href="#UrlMessage">Url Message</a></li> 
     <li><a href="#ContactMessage">Contact Message</a></li> 
     <li><a href="#PictureMessage">Picture Message</a></li> 
     <li><a href="#VideoMessage">Video Message</a></li> 
     <li><a href="#LocationMessage">Location Message</a></li> 
     <li><a href="#StickerMessage">Sticker Message</a></li> 
     <li><a href="#FileMessage">File Message</a></li> 
     <li><a href="#RichMediaMessage">Rich Media Message</a></li> 
     <li><a href="#KeyboardMessage">Keyboard Message</a></li> 
    </ul> 
    <p>Creating them is easy! Every message object has its own unique constructor corresponding to its API implementation. Click on each type in the list to find out more. Check out the full API documentation for more advanced uses.</p> 
    <h2 id="api">API</h2> 
    <h3 id="viber-bot">Viber Bot</h3> 
    <p><code class="highlighter-rouge">require('viber-bot').Bot</code></p> 
    <p>An event emitter, emitting events <a href="#onEvent">described here</a>.</p> 
    <ul> 
     <li>ViberBot 
      <ul> 
       <li><a href="#newViberBot">new ViberBot()</a></li> 
       <li><a href="#getBotProfile">.getBotProfile()</a> ? <code class="highlighter-rouge">promise.JSON</code></li> 
       <li><a href="#getUserDetails">.getUserDetails(userProfile)</a> ? <code class="highlighter-rouge">promise.JSON</code></li> 
       <li><a href="#getOnlineStatus">.getOnlineStatus(viberUserIds)</a> ? <code class="highlighter-rouge">promise.JSON</code></li> 
       <li><a href="#setWebhook">.setWebhook(url)</a> ? <code class="highlighter-rouge">promise.JSON</code></li> 
       <li><a href="#sendMessage">.sendMessage(userProfile, messages, [optionalTrackingData])</a> ? <code class="highlighter-rouge">promise.ARRAY</code></li> 
       <li><a href="#postToPublicChat">.postToPublicChat(userProfile, messages)</a> ? <code class="highlighter-rouge">promise.ARRAY</code></li> 
       <li><a href="#onEvent">.on(handler)</a></li> 
       <li><a href="#onTextMessage">.onTextMessage(regex, handler)</a> : <code class="highlighter-rouge">handler</code> = <a href="#TextMessageHandlerCallback"><code class="highlighter-rouge">TextMessageHandlerCallback</code></a></li> 
       <li><a href="#onError">.onError(handler)</a> : <code class="highlighter-rouge">handler</code> = <a href="#ErrorHandlerCallback"><code class="highlighter-rouge">ErrorHandlerCallback</code></a></li> 
       <li><a href="#onConversationStarted">.onConversationStarted(userProfile, isSubscribed, context, onFinish)</a> : <code class="highlighter-rouge">onFinish</code> = <a href="#ConversationStartedOnFinishCallback"><code class="highlighter-rouge">ConversationStartedOnFinishCallback</code></a></li> 
       <li><a href="#onSubscribe">.onSubscribe(handler)</a> : <code class="highlighter-rouge">handler</code> = <a href="#SubscribeResponseHandlerCallback"><code class="highlighter-rouge">SubscribeResponseHandlerCallback</code></a></li> 
       <li><a href="#onUnsubscribe">.onUnsubscribe(handler)</a> : <code class="highlighter-rouge">handler</code> = <a href="#UnsubscribeResponseHandlerCallback"><code class="highlighter-rouge">UnsubscribeResponseHandlerCallback</code></a></li> 
       <li><a href="#middleware">.middleware()</a></li> 
      </ul> </li> 
    </ul> 
    <p><a name="newViberBot"></a></p> 
    <h3 id="new-viberbot">New ViberBot()</h3> 
    <table> 
     <thead> 
      <tr> 
       <th>Param</th> 
       <th>Type</th> 
       <th>Description</th> 
      </tr> 
     </thead> 
     <tbody> 
      <tr> 
       <td>options.logger</td> 
       <td><code class="highlighter-rouge">object</code></td> 
       <td>Winston logger</td> 
      </tr> 
      <tr> 
       <td>options.authToken</td> 
       <td><code class="highlighter-rouge">string</code></td> 
       <td>Viber Auth Token</td> 
      </tr> 
      <tr> 
       <td>options.name</td> 
       <td><code class="highlighter-rouge">string</code></td> 
       <td>Your BOT Name</td> 
      </tr> 
      <tr> 
       <td>options.avatar</td> 
       <td><code class="highlighter-rouge">string</code></td> 
       <td>Avatar URL. <strong>No more than 100kb.</strong></td> 
      </tr> 
      <tr> 
       <td>options.registerToEvents</td> 
       <td><code class="highlighter-rouge">array</code></td> 
       <td>example: [“message”, “delivered”]</td> 
      </tr> 
     </tbody> 
    </table> 
    <p><a name="onEvent"></a></p> 
    <h3 id="botonhandler">bot.on(handler)</h3> 
    <p><code class="highlighter-rouge">require('viber-bot').Events</code></p> 
    <table> 
     <thead> 
      <tr> 
       <th>Param</th> 
       <th>Type</th> 
      </tr> 
     </thead> 
     <tbody> 
      <tr> 
       <td>handler</td> 
       <td><code class="highlighter-rouge">EventHandlerCallback</code></td> 
      </tr> 
      <tr> 
       <td>message</td> 
       <td><a href="#MessageObject"><code class="highlighter-rouge">Message Object</code></a></td> 
      </tr> 
      <tr> 
       <td>response</td> 
       <td><a href="#ResponseObject"><code class="highlighter-rouge">Response Object</code></a></td> 
      </tr> 
      <tr> 
       <td>err</td> 
       <td><code class="highlighter-rouge">Error Object</code></td> 
      </tr> 
     </tbody> 
    </table> 
    <p>Subscribe to events:</p> 
    <ul> 
     <li>MESSAGE_RECEIVED (Callback: <code class="highlighter-rouge">function (message, response) {}</code>)</li> 
     <li>MESSAGE_SENT (Callback: <code class="highlighter-rouge">function (message, userProfile) {}</code>)</li> 
     <li>SUBSCRIBED (Callback: <code class="highlighter-rouge">function (response) {}</code>)</li> 
     <li>UNSUBSCRIBED (Callback: <code class="highlighter-rouge">function (response) {}</code>)</li> 
     <li>CONVERSATION_STARTED (Callback: <code class="highlighter-rouge">function (userProfile, isSubscribed, context, onFinish) {}</code>)</li> 
     <li>ERROR (Callback: <code class="highlighter-rouge">function (err) {}</code>)</li> 
    </ul> 
    <p><strong>Example</strong></p> 
    <div class="language-js highlighter-rouge">
     <pre class="highlight"><code><span class="nx">bot</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="nx">BotEvents</span><span class="p">.</span><span class="nx">MESSAGE_RECEIVED</span><span class="p">,</span> <span class="p">(</span><span class="nx">message</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">...</span> <span class="p">);</span>
<span class="nx">bot</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="nx">BotEvents</span><span class="p">.</span><span class="nx">MESSAGE_SENT</span><span class="p">,</span> <span class="p">(</span><span class="nx">message</span><span class="p">,</span> <span class="nx">userProfile</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">...</span> <span class="p">);</span>
<span class="nx">bot</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="nx">BotEvents</span><span class="p">.</span><span class="nx">CONVERSATION_STARTED</span><span class="p">,</span> <span class="p">(</span><span class="nx">userProfile</span><span class="p">,</span> <span class="nx">isSubscribed</span><span class="p">,</span> <span class="nx">context</span><span class="p">,</span> <span class="nx">onFinish</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">...</span> <span class="p">);</span>
<span class="nx">bot</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="nx">BotEvents</span><span class="p">.</span><span class="nx">ERROR</span><span class="p">,</span> <span class="nx">err</span> <span class="o">=&gt;</span> <span class="p">...</span> <span class="p">);</span>
<span class="nx">bot</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="nx">BotEvents</span><span class="p">.</span><span class="nx">UNSUBSCRIBED</span><span class="p">,</span> <span class="nx">response</span> <span class="o">=&gt;</span> <span class="p">...</span> <span class="p">);</span>
<span class="nx">bot</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="nx">BotEvents</span><span class="p">.</span><span class="nx">SUBSCRIBED</span><span class="p">,</span> <span class="nx">response</span> <span class="o">=&gt;</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="err">`</span><span class="nx">Thanks</span> <span class="k">for</span> <span class="nx">subscribing</span><span class="p">,</span> <span class="nx">$</span><span class="p">{</span><span class="nx">response</span><span class="p">.</span><span class="nx">userProfile</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="err">`</span><span class="p">));</span>
</code></pre> 
    </div> 
    <p><a name="getBotProfile"></a></p> 
    <h3 id="botgetbotprofile">bot.getBotProfile()</h3> 
    <p>Returns a <code class="highlighter-rouge">promise.JSON</code> <a href="https://developers.viber.com/docs/api/rest-bot-api/#get-account-info">with the following JSON</a>.</p> 
    <div class="language-js highlighter-rouge">
     <pre class="highlight"><code><span class="nx">bot</span><span class="p">.</span><span class="nx">getBotProfile</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="nx">Public</span> <span class="nx">Account</span> <span class="nx">Named</span><span class="err">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">response</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="err">`</span><span class="p">));</span>
</code></pre> 
    </div> 
    <p><a name="getUserDetails"></a></p> 
    <h3 id="botgetuserdetailsuserprofile">bot.getUserDetails(userProfile)</h3> 
    <table> 
     <thead> 
      <tr> 
       <th>Param</th> 
       <th>Type</th> 
       <th>Description</th> 
      </tr> 
     </thead> 
     <tbody> 
      <tr> 
       <td>userProfile</td> 
       <td><a href="#UserProfile"><code class="highlighter-rouge">UserProfile</code></a></td> 
       <td><code class="highlighter-rouge">UserProfile</code> object</td> 
      </tr> 
     </tbody> 
    </table> 
    <p>The <code class="highlighter-rouge">getUserDetails</code> function will fetch the details of a specific Viber user based on his unique user ID. The user ID can be obtained from the callbacks sent to the account regarding user’s actions. This request can be sent twice during a 12 hours period for each user ID.</p> 
    <p>Returns a <code class="highlighter-rouge">promise.JSON</code>.</p> 
    <div class="language-js highlighter-rouge">
     <pre class="highlight"><code><span class="nx">bot</span><span class="p">.</span><span class="nx">onSubscribe</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">bot</span><span class="p">.</span><span class="nx">getUserDetails</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">userProfile</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">userDetails</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">userDetails</span><span class="p">)));</span>
</code></pre> 
    </div> 
    <p><a name="getOnlineStatus"></a></p> 
    <h3 id="botgetonlinestatusviberuserids">bot.getOnlineStatus(viberUserIds)</h3> 
    <table> 
     <thead> 
      <tr> 
       <th>Param</th> 
       <th>Type</th> 
       <th>Description</th> 
      </tr> 
     </thead> 
     <tbody> 
      <tr> 
       <td>viberUserIds</td> 
       <td><code class="highlighter-rouge">array of strings</code></td> 
       <td>Collection of Viber user ids</td> 
      </tr> 
     </tbody> 
    </table> 
    <p>Returns a <code class="highlighter-rouge">promise.JSON</code>.</p> 
    <div class="language-js highlighter-rouge">
     <pre class="highlight"><code><span class="nx">bot</span><span class="p">.</span><span class="nx">getOnlineStatus</span><span class="p">([</span><span class="s2">"a1, "</span><span class="nx">a2</span><span class="err">"</span><span class="p">]).</span><span class="nx">then</span><span class="p">(</span><span class="nx">onlineStatus</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">onlineStatus</span><span class="p">));</span>
</code></pre> 
    </div> 
    <p><a name="setWebhook"></a></p> 
    <h3 id="botsetwebhookurl">bot.setWebhook(url)</h3> 
    <table> 
     <thead> 
      <tr> 
       <th>Param</th> 
       <th>Type</th> 
       <th>Description</th> 
      </tr> 
     </thead> 
     <tbody> 
      <tr> 
       <td>url</td> 
       <td><code class="highlighter-rouge">string</code></td> 
       <td>Trusted SSL Certificate</td> 
      </tr> 
     </tbody> 
    </table> 
    <p>Returns a <code class="highlighter-rouge">promise.JSON</code>.</p> 
    <div class="language-js highlighter-rouge">
     <pre class="highlight"><code><span class="nx">bot</span><span class="p">.</span><span class="nx">setWebhook</span><span class="p">(</span><span class="s2">"https://my.bot/incoming"</span><span class="p">).</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">yourBot</span><span class="p">.</span><span class="nx">doSomething</span><span class="p">()).</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</code></pre> 
    </div> 
    <p><a name="sendMessage"></a></p> 
    <h3 id="botsendmessageuserprofile-messages-optionaltrackingdata">bot.sendMessage(userProfile, messages, [optionalTrackingData])</h3> 
    <table> 
     <thead> 
      <tr> 
       <th>Param</th> 
       <th>Type</th> 
       <th>Description</th> 
      </tr> 
     </thead> 
     <tbody> 
      <tr> 
       <td>userProfile</td> 
       <td><a href="#UserProfile"><code class="highlighter-rouge">UserProfile</code></a></td> 
       <td><code class="highlighter-rouge">UserProfile</code> object</td> 
      </tr> 
      <tr> 
       <td>messages</td> 
       <td><code class="highlighter-rouge">object or array</code></td> 
       <td>Can be <code class="highlighter-rouge">Message</code> object or array of <code class="highlighter-rouge">Message</code> objects</td> 
      </tr> 
      <tr> 
       <td>[optionalTrackingData]</td> 
       <td><code class="highlighter-rouge">JSON</code></td> 
       <td>Optional. JSON Object. Returned on every message sent by the client</td> 
      </tr> 
     </tbody> 
    </table> 
    <p><strong>Note:</strong> When passing array of messages to <code class="highlighter-rouge">sendMessage</code>, messages will be sent by explicit order (the order which they were given to the <code class="highlighter-rouge">sendMessage</code> method). The library will also cancel all custom keyboards except the last one, sending only the last message keyboard.</p> 
    <p>Returns a <code class="highlighter-rouge">promise.ARRAY</code> array of message tokens.</p> 
    <div class="language-js highlighter-rouge">
     <pre class="highlight"><code><span class="c1">// Single message</span>
<span class="kr">const</span> <span class="nx">TextMessage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'viber-bot'</span><span class="p">).</span><span class="nx">Message</span><span class="p">.</span><span class="nx">Text</span><span class="p">;</span>
<span class="nx">bot</span><span class="p">.</span><span class="nx">sendMessage</span><span class="p">(</span><span class="nx">userProfile</span><span class="p">,</span> <span class="k">new</span> <span class="nx">TextMessage</span><span class="p">(</span><span class="s2">"Thanks for shopping with us"</span><span class="p">));</span>

<span class="c1">// Multiple messages</span>
<span class="kr">const</span> <span class="nx">UrlMessage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'viber-bot'</span><span class="p">).</span><span class="nx">Message</span><span class="p">.</span><span class="nx">Url</span><span class="p">;</span>
<span class="nx">bot</span><span class="p">.</span><span class="nx">sendMessage</span><span class="p">(</span><span class="nx">userProfile</span><span class="p">,</span> <span class="p">[</span>
	<span class="k">new</span> <span class="nx">TextMessage</span><span class="p">(</span><span class="s2">"Here's the product you've requested:"</span><span class="p">),</span>
	<span class="k">new</span> <span class="nx">UrlMessage</span><span class="p">(</span><span class="s2">"http://my.ecommerce.site/product1"</span><span class="p">),</span>
	<span class="k">new</span> <span class="nx">TextMessage</span><span class="p">(</span><span class="s2">"Shipping time: 1-3 business days"</span><span class="p">)</span>
<span class="p">]);</span>
</code></pre> 
    </div> 
    <p><a name="postToPublicChat"></a></p> 
    <h3 id="botposttopublicchatuserprofile-messages">bot.postToPublicChat(userProfile, messages)</h3> 
    <p>The Viber post API allows the Public Account owner to post a message in the Public Account’s public chat.</p> 
    <table> 
     <thead> 
      <tr> 
       <th>Param</th> 
       <th>Type</th> 
       <th>Description</th> 
      </tr> 
     </thead> 
     <tbody> 
      <tr> 
       <td>userProfile</td> 
       <td><a href="#UserProfile"><code class="highlighter-rouge">UserProfile</code></a></td> 
       <td><code class="highlighter-rouge">UserProfile</code> object</td> 
      </tr> 
      <tr> 
       <td>messages</td> 
       <td><code class="highlighter-rouge">object or array</code></td> 
       <td>Can be <code class="highlighter-rouge">Message</code> object or array of <code class="highlighter-rouge">Message</code> objects</td> 
      </tr> 
     </tbody> 
    </table> 
    <p><strong>Note:</strong> When passing array of messages to <code class="highlighter-rouge">postToPublicChat</code>, messages will be sent by explicit order (the order which they were given to the <code class="highlighter-rouge">postToPublicChat</code> method).</p> 
    <p><strong>Note:</strong> This method does not support keyboard attachment.</p> 
    <p>Returns a <code class="highlighter-rouge">promise.ARRAY</code> array of message tokens.</p> 
    <div class="language-js highlighter-rouge">
     <pre class="highlight"><code><span class="c1">// Single message</span>
<span class="kr">const</span> <span class="nx">TextMessage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'viber-bot'</span><span class="p">).</span><span class="nx">Message</span><span class="p">.</span><span class="nx">Text</span><span class="p">;</span>
<span class="nx">bot</span><span class="p">.</span><span class="nx">postToPublicChat</span><span class="p">(</span><span class="nx">userProfile</span><span class="p">,</span> <span class="k">new</span> <span class="nx">TextMessage</span><span class="p">(</span><span class="s2">"Thanks for shopping with us"</span><span class="p">));</span>

<span class="c1">// Multiple messages</span>
<span class="kr">const</span> <span class="nx">UrlMessage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'viber-bot'</span><span class="p">).</span><span class="nx">Message</span><span class="p">.</span><span class="nx">Url</span><span class="p">;</span>
<span class="nx">bot</span><span class="p">.</span><span class="nx">postToPublicChat</span><span class="p">(</span><span class="nx">userProfile</span><span class="p">,</span> <span class="p">[</span>
	<span class="k">new</span> <span class="nx">TextMessage</span><span class="p">(</span><span class="s2">"Here's the product you've requested:"</span><span class="p">),</span>
	<span class="k">new</span> <span class="nx">UrlMessage</span><span class="p">(</span><span class="s2">"http://my.ecommerce.site/product1"</span><span class="p">),</span>
	<span class="k">new</span> <span class="nx">TextMessage</span><span class="p">(</span><span class="s2">"Shipping time: 1-3 business days"</span><span class="p">)</span>
<span class="p">]);</span>
</code></pre> 
    </div> 
    <p><a name="middleware"></a></p> 
    <h3 id="botmiddleware">bot.middleware()</h3> 
    <p>Returns a middleware implementation to use with <code class="highlighter-rouge">http/https</code>.</p> 
    <div class="language-js highlighter-rouge">
     <pre class="highlight"><code><span class="kr">const</span> <span class="nx">https</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'https'</span><span class="p">);</span>
<span class="nx">https</span><span class="p">.</span><span class="nx">createServer</span><span class="p">({</span>
	<span class="na">key</span><span class="p">:</span> <span class="p">...,</span>
	<span class="na">cert</span><span class="p">:</span> <span class="p">...,</span>
	<span class="na">ca</span><span class="p">:</span> <span class="p">...</span>
<span class="p">},</span> <span class="nx">bot</span><span class="p">.</span><span class="nx">middleware</span><span class="p">()).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">8080</span><span class="p">);</span>
</code></pre> 
    </div> 
    <p><a name="onTextMessage"></a></p> 
    <h3 id="botontextmessageregex-handler">bot.onTextMessage(regex, handler)</h3> 
    <table> 
     <thead> 
      <tr> 
       <th>Param</th> 
       <th>Type</th> 
      </tr> 
     </thead> 
     <tbody> 
      <tr> 
       <td>regex</td> 
       <td><code class="highlighter-rouge">regular expression</code></td> 
      </tr> 
      <tr> 
       <td>handler</td> 
       <td><a href="#TextMessageHandlerCallback"><code class="highlighter-rouge">TextMessageHandlerCallback</code></a></td> 
      </tr> 
     </tbody> 
    </table> 
    <p><a name="TextMessageHandlerCallback"></a></p> 
    <h5 id="textmessagehandlercallback-function-message-response-">TextMessageHandlerCallback: <code class="highlighter-rouge">function (message, response) {}</code></h5> 
    <div class="language-js highlighter-rouge">
     <pre class="highlight"><code><span class="nx">bot</span><span class="p">.</span><span class="nx">onTextMessage</span><span class="p">(</span><span class="sr">/^hi|hello$/i</span><span class="p">,</span> <span class="p">(</span><span class="nx">message</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="k">new</span> <span class="nx">TextMessage</span><span class="p">(</span><span class="err">`</span><span class="nx">Hi</span> <span class="nx">there</span> <span class="nx">$</span><span class="p">{</span><span class="nx">response</span><span class="p">.</span><span class="nx">userProfile</span><span class="p">.</span><span class="nx">name</span><span class="p">}.</span> <span class="nx">I</span> <span class="nx">am</span> <span class="nx">$</span><span class="p">{</span><span class="nx">bot</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="err">`</span><span class="p">)));</span>
</code></pre> 
    </div> 
    <p><a name="onError"></a></p> 
    <h3 id="botonerrorhandler">bot.onError(handler)</h3> 
    <table> 
     <thead> 
      <tr> 
       <th>Param</th> 
       <th>Type</th> 
      </tr> 
     </thead> 
     <tbody> 
      <tr> 
       <td>handler</td> 
       <td><a href="#ErrorHandlerCallback"><code class="highlighter-rouge">ErrorHandlerCallback</code></a></td> 
      </tr> 
     </tbody> 
    </table> 
    <p><a name="ErrorHandlerCallback"></a></p> 
    <h5 id="errorhandlercallback-function-err-">ErrorHandlerCallback: <code class="highlighter-rouge">function (err) {}</code></h5> 
    <div class="language-js highlighter-rouge">
     <pre class="highlight"><code><span class="nx">bot</span><span class="p">.</span><span class="nx">onError</span><span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span> <span class="nx">logger</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</code></pre> 
    </div> 
    <p><a name="onConversationStarted"></a></p> 
    <h3 id="botonconversationstarteduserprofile-issubscribed-context-onfinish">bot.onConversationStarted(userProfile, isSubscribed, context, onFinish)</h3> 
    <table> 
     <thead> 
      <tr> 
       <th>Param</th> 
       <th>Type</th> 
       <th>Description</th> 
      </tr> 
     </thead> 
     <tbody> 
      <tr> 
       <td>userProfile</td> 
       <td><a href="#UserProfile"><code class="highlighter-rouge">UserProfile</code></a></td> 
       <td><code class="highlighter-rouge">UserProfile</code> object</td> 
      </tr> 
      <tr> 
       <td>isSubscribed</td> 
       <td>boolean</td> 
       <td>Indicates whether a user is already subscribed</td> 
      </tr> 
      <tr> 
       <td>context</td> 
       <td>String</td> 
       <td>Any additional parameters added to the deep link used to access the conversation passed as a string</td> 
      </tr> 
      <tr> 
       <td>onFinish</td> 
       <td><a href="#ConversationStartedOnFinishCallback"><code class="highlighter-rouge">ConversationStartedOnFinishCallback</code></a></td> 
       <td>When called, a <a href="#MessageObject"><code class="highlighter-rouge">Message</code></a> will be sent to the client</td> 
      </tr> 
     </tbody> 
    </table> 
    <p>Conversation started event fires when a user opens a conversation with the Public Account/ bot using the “message” button (found on the account’s info screen) or using a <a href="https://developers.viber.com/docs/tools/deep-links">deep link</a>.</p> 
    <p>This event is <strong>not</strong> considered a subscribe event and doesn’t allow the account to send messages to the user; however, it will allow sending one “welcome message” to the user. See <a href="#SendingWelcomeMessage">sending a welcome message</a> below for more information.</p> 
    <p><a name="ConversationStartedOnFinishCallback"></a></p> 
    <h5 id="conversationstartedonfinishcallback-function-responsemessage-optionaltrackingdata-">ConversationStartedOnFinishCallback: <code class="highlighter-rouge">function (responseMessage, optionalTrackingData) {}</code></h5> 
    <p>The <code class="highlighter-rouge">ConversationStartedOnFinishCallback</code> accepts <code class="highlighter-rouge">null</code> and <a href="#MessageObject"><code class="highlighter-rouge">MessageObject</code></a> only. Otherwise, an exception is thrown.</p> 
    <div class="language-js highlighter-rouge">
     <pre class="highlight"><code><span class="nx">bot</span><span class="p">.</span><span class="nx">onConversationStarted</span><span class="p">((</span><span class="nx">userProfile</span><span class="p">,</span> <span class="nx">isSubscribed</span><span class="p">,</span> <span class="nx">context</span><span class="p">,</span> <span class="nx">onFinish</span><span class="p">)</span> <span class="o">=&gt;</span>
	<span class="nx">onFinish</span><span class="p">(</span><span class="k">new</span> <span class="nx">TextMessage</span><span class="p">(</span><span class="err">`</span><span class="nx">Hi</span><span class="p">,</span> <span class="nx">$</span><span class="p">{</span><span class="nx">userProfile</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">!</span> <span class="nx">Nice</span> <span class="nx">to</span> <span class="nx">meet</span> <span class="nx">you</span><span class="p">.</span><span class="err">`</span><span class="p">)));</span>

<span class="nx">bot</span><span class="p">.</span><span class="nx">onConversationStarted</span><span class="p">((</span><span class="nx">userProfile</span><span class="p">,</span> <span class="nx">isSubscribed</span><span class="p">,</span> <span class="nx">context</span><span class="p">,</span> <span class="nx">onFinish</span><span class="p">)</span> <span class="o">=&gt;</span>
	<span class="nx">onFinish</span><span class="p">(</span><span class="k">new</span> <span class="nx">TextMessage</span><span class="p">(</span><span class="err">`</span><span class="nx">Thanks</span><span class="err">`</span><span class="p">),</span> <span class="p">{</span>
		<span class="na">saidThanks</span><span class="p">:</span> <span class="kc">true</span>
	<span class="p">}));</span>
</code></pre> 
    </div> 
    <p><a name="onSubscribe"></a></p> 
    <h3 id="botonsubscribehandler">bot.onSubscribe(handler)</h3> 
    <table> 
     <thead> 
      <tr> 
       <th>Param</th> 
       <th>Type</th> 
      </tr> 
     </thead> 
     <tbody> 
      <tr> 
       <td>handler</td> 
       <td><a href="#SubscribeResponseHandlerCallback"><code class="highlighter-rouge">SubscribeResponseHandlerCallback</code></a></td> 
      </tr> 
     </tbody> 
    </table> 
    <p><a name="SubscribeResponseHandlerCallback"></a></p> 
    <h5 id="subscriberesponsehandlercallback-function-response-">SubscribeResponseHandlerCallback: <code class="highlighter-rouge">function (response) {}</code></h5> 
    <div class="language-js highlighter-rouge">
     <pre class="highlight"><code><span class="nx">bot</span><span class="p">.</span><span class="nx">onSubscribe</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="nx">Subscribed</span><span class="err">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">response</span><span class="p">.</span><span class="nx">userProfile</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="err">`</span><span class="p">));</span>
</code></pre> 
    </div> 
    <p><a name="onUnsubscribe"></a></p> 
    <h3 id="botonunsubscribehandler">bot.onUnsubscribe(handler)</h3> 
    <table> 
     <thead> 
      <tr> 
       <th>Param</th> 
       <th>Type</th> 
      </tr> 
     </thead> 
     <tbody> 
      <tr> 
       <td>handler</td> 
       <td><a href="#UnsubscribeResponseHandlerCallback"><code class="highlighter-rouge">UnsubscribeResponseHandlerCallback</code></a></td> 
      </tr> 
     </tbody> 
    </table> 
    <p><a name="UnsubscribeResponseHandlerCallback"></a></p> 
    <h5 id="unsubscriberesponsehandlercallback-function-userid-">UnsubscribeResponseHandlerCallback: <code class="highlighter-rouge">function (userId) {}</code></h5> 
    <div class="language-js highlighter-rouge">
     <pre class="highlight"><code><span class="nx">bot</span><span class="p">.</span><span class="nx">onUnsubscribe</span><span class="p">(</span><span class="nx">userId</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="nx">Unsubscribed</span><span class="err">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">userId</span><span class="p">}</span><span class="err">`</span><span class="p">));</span>
</code></pre> 
    </div> 
    <p><a name="ResponseObject"></a></p> 
    <h3 id="response-object">Response object</h3> 
    <p>Members:</p> 
    <table> 
     <thead> 
      <tr> 
       <th>Param</th> 
       <th>Type</th> 
       <th>Notes</th> 
      </tr> 
     </thead> 
     <tbody> 
      <tr> 
       <td>userProfile</td> 
       <td><a href="#UserProfile"><code class="highlighter-rouge">UserProfile</code></a></td> 
       <td>—</td> 
      </tr> 
     </tbody> 
    </table> 
    <ul> 
     <li>Response 
      <ul> 
       <li><a href="#sendMessage">.send(messages, [optionalTrackingData])</a> ? <code class="highlighter-rouge">promise.JSON</code></li> 
      </ul> </li> 
    </ul> 
    <p><a name="UserProfile"></a></p> 
    <h3 id="userprofile-object">UserProfile object</h3> 
    <p>Members:</p> 
    <table> 
     <thead> 
      <tr> 
       <th>Param</th> 
       <th>Type</th> 
       <th>Notes</th> 
      </tr> 
     </thead> 
     <tbody> 
      <tr> 
       <td>id</td> 
       <td><code class="highlighter-rouge">string</code></td> 
       <td>—</td> 
      </tr> 
      <tr> 
       <td>name</td> 
       <td><code class="highlighter-rouge">string</code></td> 
       <td>—</td> 
      </tr> 
      <tr> 
       <td>avatar</td> 
       <td><code class="highlighter-rouge">string</code></td> 
       <td>Optional Avatar URL</td> 
      </tr> 
      <tr> 
       <td>country</td> 
       <td><code class="highlighter-rouge">string</code></td> 
       <td><strong>currently set in CONVERSATION_STARTED event only</strong></td> 
      </tr> 
      <tr> 
       <td>language</td> 
       <td><code class="highlighter-rouge">string</code></td> 
       <td><strong>currently set in CONVERSATION_STARTED event only</strong></td> 
      </tr> 
     </tbody> 
    </table> 
    <p><a name="MessageObject"></a></p> 
    <h3 id="message-object">Message Object</h3> 
    <div class="language-js highlighter-rouge">
     <pre class="highlight"><code><span class="kr">const</span> <span class="nx">TextMessage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'viber-bot'</span><span class="p">).</span><span class="nx">Message</span><span class="p">.</span><span class="nx">Text</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">UrlMessage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'viber-bot'</span><span class="p">).</span><span class="nx">Message</span><span class="p">.</span><span class="nx">Url</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">ContactMessage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'viber-bot'</span><span class="p">).</span><span class="nx">Message</span><span class="p">.</span><span class="nx">Contact</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">PictureMessage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'viber-bot'</span><span class="p">).</span><span class="nx">Message</span><span class="p">.</span><span class="nx">Picture</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">VideoMessage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'viber-bot'</span><span class="p">).</span><span class="nx">Message</span><span class="p">.</span><span class="nx">Video</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">LocationMessage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'viber-bot'</span><span class="p">).</span><span class="nx">Message</span><span class="p">.</span><span class="nx">Location</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">StickerMessage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'viber-bot'</span><span class="p">).</span><span class="nx">Message</span><span class="p">.</span><span class="nx">Sticker</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">RichMediaMessage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'viber-bot'</span><span class="p">).</span><span class="nx">Message</span><span class="p">.</span><span class="nx">RichMedia</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">KeyboardMessage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'viber-bot'</span><span class="p">).</span><span class="nx">Message</span><span class="p">.</span><span class="nx">Keyboard</span><span class="p">;</span>
</code></pre> 
    </div> 
    <p><strong>Common Members for <code class="highlighter-rouge">Message</code> interface</strong>:</p> 
    <table> 
     <thead> 
      <tr> 
       <th>Param</th> 
       <th>Type</th> 
       <th>Description</th> 
      </tr> 
     </thead> 
     <tbody> 
      <tr> 
       <td>timestamp</td> 
       <td><code class="highlighter-rouge">string</code></td> 
       <td>Epoch time</td> 
      </tr> 
      <tr> 
       <td>token</td> 
       <td><code class="highlighter-rouge">string</code></td> 
       <td>Sequential message token</td> 
      </tr> 
      <tr> 
       <td>trackingData</td> 
       <td><code class="highlighter-rouge">JSON</code></td> 
       <td>JSON Tracking Data from Viber Client</td> 
      </tr> 
     </tbody> 
    </table> 
    <p><strong>Common Constructor Arguments <code class="highlighter-rouge">Message</code> interface</strong>:</p> 
    <table> 
     <thead> 
      <tr> 
       <th>Param</th> 
       <th>Type</th> 
       <th>Description</th> 
      </tr> 
     </thead> 
     <tbody> 
      <tr> 
       <td>optionalKeyboard</td> 
       <td><code class="highlighter-rouge">JSON</code></td> 
       <td><a href="https://developers.viber.com/docs/tools/keyboards">Writing Custom Keyboards</a></td> 
      </tr> 
      <tr> 
       <td>optionalTrackingData</td> 
       <td><code class="highlighter-rouge">JSON</code></td> 
       <td>Data to be saved on Viber Client device, and sent back each time message is received</td> 
      </tr> 
     </tbody> 
    </table> 
    <p><a name="TextMessage"></a></p> 
    <h4 id="textmessage-object">TextMessage object</h4> 
    <table> 
     <thead> 
      <tr> 
       <th>Member</th> 
       <th>Type</th> 
      </tr> 
     </thead> 
     <tbody> 
      <tr> 
       <td>text</td> 
       <td><code class="highlighter-rouge">string</code></td> 
      </tr> 
     </tbody> 
    </table> 
    <div class="language-js highlighter-rouge">
     <pre class="highlight"><code><span class="kr">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TextMessage</span><span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="p">[</span><span class="nx">optionalKeyboard</span><span class="p">],</span> <span class="p">[</span><span class="nx">optionalTrackingData</span><span class="p">]);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">message</span><span class="p">.</span><span class="nx">text</span><span class="p">);</span>
</code></pre> 
    </div> 
    <p><a name="UrlMessage"></a></p> 
    <h4 id="urlmessage-object">UrlMessage object</h4> 
    <table> 
     <thead> 
      <tr> 
       <th>Member</th> 
       <th>Type</th> 
      </tr> 
     </thead> 
     <tbody> 
      <tr> 
       <td>url</td> 
       <td><code class="highlighter-rouge">string</code></td> 
      </tr> 
     </tbody> 
    </table> 
    <div class="language-js highlighter-rouge">
     <pre class="highlight"><code><span class="kr">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UrlMessage</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="p">[</span><span class="nx">optionalKeyboard</span><span class="p">],</span> <span class="p">[</span><span class="nx">optionalTrackingData</span><span class="p">]);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">message</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
</code></pre> 
    </div> 
    <p><a name="ContactMessage"></a></p> 
    <h4 id="contactmessage-object">ContactMessage object</h4> 
    <table> 
     <thead> 
      <tr> 
       <th>Member</th> 
       <th>Type</th> 
      </tr> 
     </thead> 
     <tbody> 
      <tr> 
       <td>contactName</td> 
       <td><code class="highlighter-rouge">string</code></td> 
      </tr> 
      <tr> 
       <td>contactPhoneNumber</td> 
       <td><code class="highlighter-rouge">string</code></td> 
      </tr> 
     </tbody> 
    </table> 
    <div class="language-js highlighter-rouge">
     <pre class="highlight"><code><span class="kr">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ContactMessage</span><span class="p">(</span><span class="nx">contactName</span><span class="p">,</span> <span class="nx">contactPhoneNumber</span><span class="p">,</span> <span class="p">[</span><span class="nx">optionalAvatar</span><span class="p">],</span> <span class="p">[</span><span class="nx">optionalKeyboard</span><span class="p">],</span> <span class="p">[</span><span class="nx">optionalTrackingData</span><span class="p">]);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">message</span><span class="p">.</span><span class="nx">contactName</span><span class="p">},</span> <span class="nx">$</span><span class="p">{</span><span class="nx">message</span><span class="p">.</span><span class="nx">contactPhoneNumber</span><span class="p">}</span><span class="err">`</span><span class="p">);</span>
</code></pre> 
    </div> 
    <p><a name="PictureMessage"></a></p> 
    <h4 id="picturemessage-object">PictureMessage object</h4> 
    <table> 
     <thead> 
      <tr> 
       <th>Member</th> 
       <th>Type</th> 
      </tr> 
     </thead> 
     <tbody> 
      <tr> 
       <td>url</td> 
       <td><code class="highlighter-rouge">string</code></td> 
      </tr> 
      <tr> 
       <td>text</td> 
       <td><code class="highlighter-rouge">string</code></td> 
      </tr> 
      <tr> 
       <td>thumbnail</td> 
       <td><code class="highlighter-rouge">string</code></td> 
      </tr> 
     </tbody> 
    </table> 
    <div class="language-js highlighter-rouge">
     <pre class="highlight"><code><span class="kr">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PictureMessage</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="p">[</span><span class="nx">optionalText</span><span class="p">],</span> <span class="p">[</span><span class="nx">optionalThumbnail</span><span class="p">],</span> <span class="p">[</span><span class="nx">optionalKeyboard</span><span class="p">],</span> <span class="p">[</span><span class="nx">optionalTrackingData</span><span class="p">]);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">message</span><span class="p">.</span><span class="nx">url</span><span class="p">},</span> <span class="nx">$</span><span class="p">{</span><span class="nx">message</span><span class="p">.</span><span class="nx">text</span><span class="p">},</span> <span class="nx">$</span><span class="p">{</span><span class="nx">message</span><span class="p">.</span><span class="nx">thumbnail</span><span class="p">}</span><span class="err">`</span><span class="p">);</span>
</code></pre> 
    </div> 
    <p><a name="VideoMessage"></a></p> 
    <h4 id="videomessage-object">VideoMessage object</h4> 
    <table> 
     <thead> 
      <tr> 
       <th>Member</th> 
       <th>Type</th> 
      </tr> 
     </thead> 
     <tbody> 
      <tr> 
       <td>url</td> 
       <td><code class="highlighter-rouge">string</code></td> 
      </tr> 
      <tr> 
       <td>size</td> 
       <td><code class="highlighter-rouge">int</code></td> 
      </tr> 
      <tr> 
       <td>thumbnail</td> 
       <td><code class="highlighter-rouge">string</code></td> 
      </tr> 
      <tr> 
       <td>duration</td> 
       <td><code class="highlighter-rouge">int</code></td> 
      </tr> 
     </tbody> 
    </table> 
    <div class="language-js highlighter-rouge">
     <pre class="highlight"><code><span class="kr">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">VideoMessage</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">size</span><span class="p">,</span> <span class="p">[</span><span class="nx">optionalText</span><span class="p">],</span> <span class="p">[</span><span class="nx">optionalThumbnail</span><span class="p">],</span> <span class="p">[</span><span class="nx">optionalDuration</span><span class="p">],</span> <span class="p">[</span><span class="nx">optionalKeyboard</span><span class="p">],</span> <span class="p">[</span><span class="nx">optionalTrackingData</span><span class="p">]);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">message</span><span class="p">.</span><span class="nx">url</span><span class="p">},</span> <span class="nx">$</span><span class="p">{</span><span class="nx">message</span><span class="p">.</span><span class="nx">size</span><span class="p">},</span> <span class="nx">$</span><span class="p">{</span><span class="nx">message</span><span class="p">.</span><span class="nx">thumbnail</span><span class="p">},</span> <span class="nx">$</span><span class="p">{</span><span class="nx">message</span><span class="p">.</span><span class="nx">duration</span><span class="p">}</span><span class="err">`</span><span class="p">);</span>
</code></pre> 
    </div> 
    <p><a name="LocationMessage"></a></p> 
    <h4 id="locationmessage-object">LocationMessage object</h4> 
    <table> 
     <thead> 
      <tr> 
       <th>Member</th> 
       <th>Type</th> 
      </tr> 
     </thead> 
     <tbody> 
      <tr> 
       <td>latitude</td> 
       <td><code class="highlighter-rouge">float</code></td> 
      </tr> 
      <tr> 
       <td>longitude</td> 
       <td><code class="highlighter-rouge">float</code></td> 
      </tr> 
     </tbody> 
    </table> 
    <div class="language-js highlighter-rouge">
     <pre class="highlight"><code><span class="kr">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LocationMessage</span><span class="p">(</span><span class="nx">latitude</span><span class="p">,</span> <span class="nx">longitude</span><span class="p">,</span> <span class="p">[</span><span class="nx">optionalKeyboard</span><span class="p">],</span> <span class="p">[</span><span class="nx">optionalTrackingData</span><span class="p">]);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">message</span><span class="p">.</span><span class="nx">latitude</span><span class="p">},</span> <span class="nx">$</span><span class="p">{</span><span class="nx">message</span><span class="p">.</span><span class="nx">longitude</span><span class="p">}</span><span class="err">`</span><span class="p">);</span>
</code></pre> 
    </div> 
    <p><a name="StickerMessage"></a></p> 
    <h4 id="stickermessage-object">StickerMessage object</h4> 
    <table> 
     <thead> 
      <tr> 
       <th>Member</th> 
       <th>Type</th> 
      </tr> 
     </thead> 
     <tbody> 
      <tr> 
       <td>stickerId</td> 
       <td><code class="highlighter-rouge">int</code></td> 
      </tr> 
     </tbody> 
    </table> 
    <div class="language-js highlighter-rouge">
     <pre class="highlight"><code><span class="kr">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">StickerMessage</span><span class="p">(</span><span class="nx">stickerId</span><span class="p">,</span> <span class="p">[</span><span class="nx">optionalKeyboard</span><span class="p">],</span> <span class="p">[</span><span class="nx">optionalTrackingData</span><span class="p">]);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">message</span><span class="p">.</span><span class="nx">stickerId</span><span class="p">);</span>
</code></pre> 
    </div> 
    <p><a name="FileMessage"></a></p> 
    <h4 id="filemessage-object">FileMessage object</h4> 
    <table> 
     <thead> 
      <tr> 
       <th>Member</th> 
       <th>Type</th> 
      </tr> 
     </thead> 
     <tbody> 
      <tr> 
       <td>url</td> 
       <td><code class="highlighter-rouge">string</code></td> 
      </tr> 
      <tr> 
       <td>sizeInBytes</td> 
       <td><code class="highlighter-rouge">int</code></td> 
      </tr> 
      <tr> 
       <td>filename</td> 
       <td><code class="highlighter-rouge">string</code></td> 
      </tr> 
     </tbody> 
    </table> 
    <div class="language-js highlighter-rouge">
     <pre class="highlight"><code><span class="kr">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FileMessage</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">sizeInBytes</span><span class="p">,</span> <span class="nx">filename</span><span class="p">,</span> <span class="p">[</span><span class="nx">optionalKeyboard</span><span class="p">],</span> <span class="p">[</span><span class="nx">optionalTrackingData</span><span class="p">]);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">message</span><span class="p">.</span><span class="nx">url</span><span class="p">},</span> <span class="nx">$</span><span class="p">{</span><span class="nx">message</span><span class="p">.</span><span class="nx">sizeInBytes</span><span class="p">},</span> <span class="nx">$</span><span class="p">{</span><span class="nx">message</span><span class="p">.</span><span class="nx">filename</span><span class="p">}</span><span class="err">`</span><span class="p">);</span>
</code></pre> 
    </div> 
    <p><a name="RichMediaMessage"></a></p> 
    <h4 id="richmediamessage-object">RichMediaMessage object</h4> 
    <table> 
     <thead> 
      <tr> 
       <th>Member</th> 
       <th>Type</th> 
      </tr> 
     </thead> 
     <tbody> 
      <tr> 
       <td>richMedia</td> 
       <td><code class="highlighter-rouge">Object</code></td> 
      </tr> 
     </tbody> 
    </table> 
    <div class="language-js highlighter-rouge">
     <pre class="highlight"><code><span class="kr">const</span> <span class="nx">SAMPLE_RICH_MEDIA</span> <span class="o">=</span> <span class="p">{</span>
	<span class="s2">"ButtonsGroupColumns"</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
	<span class="s2">"ButtonsGroupRows"</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
	<span class="s2">"BgColor"</span><span class="p">:</span> <span class="s2">"#FFFFFF"</span><span class="p">,</span>
	<span class="s2">"Buttons"</span><span class="p">:</span> <span class="p">[{</span>
		<span class="s2">"ActionBody"</span><span class="p">:</span> <span class="s2">"http://www.website.com/go_here"</span><span class="p">,</span>
		<span class="s2">"ActionType"</span><span class="p">:</span> <span class="s2">"open-url"</span><span class="p">,</span>
		<span class="s2">"BgMediaType"</span><span class="p">:</span> <span class="s2">"picture"</span><span class="p">,</span>
		<span class="s2">"Image"</span><span class="p">:</span> <span class="s2">"http://www.images.com/img.jpg"</span><span class="p">,</span>
		<span class="s2">"BgColor"</span><span class="p">:</span> <span class="s2">"#000000"</span><span class="p">,</span>
		<span class="s2">"TextOpacity"</span><span class="p">:</span> <span class="mi">60</span><span class="p">,</span>
		<span class="s2">"Rows"</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
		<span class="s2">"Columns"</span><span class="p">:</span> <span class="mi">6</span>
	<span class="p">},</span> <span class="p">{</span>
		<span class="s2">"ActionBody"</span><span class="p">:</span> <span class="s2">"http://www.website.com/go_here"</span><span class="p">,</span>
		<span class="s2">"ActionType"</span><span class="p">:</span> <span class="s2">"open-url"</span><span class="p">,</span>
		<span class="s2">"BgColor"</span><span class="p">:</span> <span class="s2">"#85bb65"</span><span class="p">,</span>
		<span class="s2">"Text"</span><span class="p">:</span> <span class="s2">"Buy"</span><span class="p">,</span>
		<span class="s2">"TextOpacity"</span><span class="p">:</span> <span class="mi">60</span><span class="p">,</span>
		<span class="s2">"Rows"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
		<span class="s2">"Columns"</span><span class="p">:</span> <span class="mi">6</span>
	<span class="p">}]</span>
<span class="p">};</span>

<span class="kr">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">RichMedia</span><span class="p">(</span><span class="nx">SAMPLE_RICH_MEDIA</span><span class="p">,</span> <span class="p">[</span><span class="nx">optionalKeyboard</span><span class="p">],</span> <span class="p">[</span><span class="nx">optionalTrackingData</span><span class="p">]);</span>
</code></pre> 
    </div> 
    <p><a name="KeyboardMessage"></a></p> 
    <h4 id="keyboardmessage-object">KeyboardMessage object</h4> 
    <table> 
     <thead> 
      <tr> 
       <th>Member</th> 
       <th>Type</th> 
      </tr> 
     </thead> 
     <tbody> 
      <tr> 
       <td>keyboard</td> 
       <td><code class="highlighter-rouge">JSON</code></td> 
      </tr> 
     </tbody> 
    </table> 
    <div class="language-js highlighter-rouge">
     <pre class="highlight"><code>
<span class="kr">const</span> <span class="nx">SAMPLE_KEYBOARD</span> <span class="o">=</span> <span class="p">{</span>
	<span class="s2">"Type"</span><span class="p">:</span> <span class="s2">"keyboard"</span><span class="p">,</span>
	<span class="s2">"Revision"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
	<span class="s2">"Buttons"</span><span class="p">:</span> <span class="p">[</span>
		<span class="p">{</span>
			<span class="s2">"Columns"</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
			<span class="s2">"Rows"</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
			<span class="s2">"BgColor"</span><span class="p">:</span> <span class="s2">"#e6f5ff"</span><span class="p">,</span>
			<span class="s2">"BgMedia"</span><span class="p">:</span> <span class="s2">"http://www.jqueryscript.net/images/Simplest-Responsive-jQuery-Image-Lightbox-Plugin-simple-lightbox.jpg"</span><span class="p">,</span>
			<span class="s2">"BgMediaType"</span><span class="p">:</span> <span class="s2">"picture"</span><span class="p">,</span>
			<span class="s2">"BgLoop"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
			<span class="s2">"ActionType"</span><span class="p">:</span> <span class="s2">"reply"</span><span class="p">,</span>
			<span class="s2">"ActionBody"</span><span class="p">:</span> <span class="s2">"Yes"</span>
		<span class="p">}</span>
	<span class="p">]</span>
<span class="p">};</span>

<span class="kr">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">KeyboardMessage</span><span class="p">(</span><span class="nx">SAMPLE_KEYBOARD</span><span class="p">,</span> <span class="p">[</span><span class="nx">optionalTrackingData</span><span class="p">]);</span>
</code></pre> 
    </div> 
    <h2 id="sample-project">Sample project</h2> 
    <p>We’ve created the <a href="https://github.com/Viber/sample-bot-isitup">Is It Up sample project</a> to help you get started.</p> 
    <h2 id="community">Community</h2> 
    <p>Join the conversation on <strong><a href="https://gitter.im/viber/bot-node">Gitter</a></strong>.</p> 
   </div> 
  </section> 
  <footer id="footer" class="footer"> 
   <div id="mc_embed_signup" class="container-narrow text-center"> 
    <form action="//viber.us14.list-manage.com/subscribe/post?u=b5b41d562cbdd6f2d8d5f07e8&amp;id=ca0dedc6fb" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate> 
     <div id="mc_embed_signup_scroll"> 
      <h2 class="col-sm-12">Subscribe to our mailing list</h2> 
      <div class="col-sm-9"> 
       <div class="mc-field-group"> 
        <input type="email" placeholder="email@address.com" value="" name="EMAIL" class="required email" id="mce-EMAIL"> 
        <div id="mce-responses"> 
         <h5 class="response" id="mce-error-response" style="display:none"></h5> 
         <h5 class="response" id="mce-success-response" style="display:none"></h5> 
        </div> 
       </div> 
       <!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups--> 
      </div> 
      <div style="position: absolute; left: -5000px;" aria-hidden="true">
       <input type="text" name="b_b5b41d562cbdd6f2d8d5f07e8_ca0dedc6fb" tabindex="-1" value="">
      </div> 
      <div class="col-sm-3">
       <input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" disabled class="button">
      </div> 
      <h6 class="col-sm-12 terms">By clicking "Subscribe" you agree to allow Viber to send you emails. You will be able to unsubscribe at any time by clicking Unsubscribe in the email messages. </h6> 
     </div> 
    </form> 
   </div> 
   <script type="text/javascript" src="//s3.amazonaws.com/downloads.mailchimp.com/js/mc-validate.js"></script> 
   <script type="text/javascript">
    (function ($) {
      window.fnames = new Array();
      window.ftypes = new Array();
      fnames[0] = 'EMAIL';
      ftypes[0] = 'email';
      fnames[1] = 'FNAME';
      ftypes[1] = 'text';
      fnames[2] = 'LNAME';
      ftypes[2] = 'text';
    }(jQuery));
    var $mcj = jQuery.noConflict(true);
  </script> 
   <script type="text/javascript">
      jQuery(document).ready(function ($) {
        $('#mce-EMAIL').focus(function () {
          $('#mc-embedded-subscribe').removeAttr('disabled');
        });
      });
  </script> 
   <div class="container-narrow text-center mt-4"> 
    <nav> 
     <a class="footer-nav-item" href="/">Home</a> 
     <a class="footer-nav-item" href="/docs/">Docs</a> 
     <a class="footer-nav-item" href="/blog/">Blog</a> 
     <a class="footer-nav-item" href="/community/">Community</a> 
     <a class="footer-nav-item" href="/partners/">Partners</a> 
     <a class="footer-nav-item" href="/releases/">Releases</a> 
     <a class="footer-nav-item" href="/contact/">Contact</a> 
     <a class="footer-nav-item" href="//www.viber.com/en/about" target="_blank">About</a> 
     <a class="footer-nav-item" href="//www.viber.com/en/terms" target="_blank">Terms &amp; Policies</a> 
    </nav> 
    <div class="text-center"> 
     <span class="copyright">© 2017 Viber Media S.à r.l.</span> 
     <span class="footer-love pl-4"> <a href="https://viber.com" target="_blank" class="no-underline"><span class="octicon octicon-code"></span> with <span class="octicon octicon-heart"></span> by Viber</a></span>  
    </div> 
   </div> 
  </footer> 
  <script src="https://cdn.jsdelivr.net/clipboard.js/1.6.1/clipboard.min.js"></script> 
  <script>
  var anchorForId = function (id) {
    var anchor = document.createElement("a");
    anchor.className = "header-link";
    anchor.href      = "#" + id;
    anchor.innerHTML = "<span class='octicon octicon-link'></span>";
    anchor.title = "Permalink";
    return anchor;
  };

  var linkifyAnchors = function (level, containingElement) {
    var headers = containingElement.getElementsByTagName("h" + level);
    for (var h = 0; h < headers.length; h++) {
      var header = headers[h];

      if (typeof header.id !== "undefined" && header.id !== "") {
        header.appendChild(anchorForId(header.id));
      }
    }
  };

  document.onreadystatechange = function () {
    if (this.readyState === "complete") {
      var contentBlock = document.getElementsByClassName("docs")[0] || document.getElementsByClassName("news")[0];
      if (!contentBlock) {
        return;
      }
      for (var level = 1; level <= 6; level++) {
        linkifyAnchors(level, contentBlock);
      }
    }
  };
</script>   
 </body>
</html>