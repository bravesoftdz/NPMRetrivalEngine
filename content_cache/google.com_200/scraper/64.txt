<!doctype html>
<html ? lang="en">
 <head> 
  <script async custom-element="amp-youtube" src="https://cdn.ampproject.org/v0/amp-youtube-0.1.js"></script> 
  <meta charset="utf-8"> 
  <meta http-equiv="X-UA-Compatible" content="IE=edge"> 
  <meta name="viewport" content="width=device-width,minimum-scale=1"> 
  <title>I Don't Need No Stinking API: Web Scraping For Fun and Profit</title> 
  <meta name="description" content="If you’ve ever needed to pull data from a third party website, chances are you started by checking to see if they had an official API. But did you know that ..."> 
  <meta property="fb:app_id" content="225565217845173"> 
  <link rel="canonical" href="https://blog.hartleybrody.com/web-scraping/"> 
  <link rel="alternate" type="application/rss+xml" title="Hartley Brody" href="https://blog.hartleybrody.com/feed.xml"> 
  <link rel="icon" type="image/jpeg" href="https://www.gravatar.com/avatar/0b3ac738e74f7fbda25fca0f754b0aad?s=64"> 
  <script type="application/ld+json">
  
{
  "@context": "http://schema.org",
  "@type": "NewsArticle",
  "mainEntityOfPage": "https://blog.hartleybrody.com/web-scraping/",
  "headline": "I Don&#39;t Need No Stinking API: Web Scraping For Fun and Profit",
  "datePublished": "2012-12-08T00:00:00-05:00",
  "dateModified": "2012-12-08T00:00:00-05:00",
  "description": "If you’ve ever needed to pull data from a third party website, chances are you started by checking to see if they had an official API. But did you know that ...",
  "author": {
    "@type": "Person",
    "name": "Hartley Brody"
  },
  "publisher": {
    "@type": "Organization",
    "name": "Hartley Brody",
    "logo": {
      "@type": "ImageObject",
      "url": "https://blog.hartleybrody.com",
      "width": 60,
      "height": 60
    }
  },
  "image": {
    "@type": "ImageObject",
    "url": "https://blog.hartleybrody.com",
    "height": 60,
    "width": 60
  }
}

  </script> 
  <link rel="stylesheet" href="/styles.css"> 
  <!-- Google Analytics--> 
  <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-9472773-3']);
    _gaq.push(['_trackPageview']);
    _gaq.push(['_trackPageLoadTime']);

    (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
  </script> 
  <!--sumome--> 
  <script src="//load.sumome.com/" data-sumo-site-id="95a56d848849343e0f7ae71b38a33ba5a367a4f01ca9b464b31075f4bf35aaf0" async></script> 
 </head> 
 <body> 
  <div class="container"> 
   <div class="full-col"> 
    <header> 
     <section> 
      <h1> <a href="/"> Hartley Brody </a> </h1> 
     </section> 
    </header> 
   </div> 
   <div class="left-col"> 
    <article itemscope itemtype="http://schema.org/BlogPosting" role="article"> 
     <h2 itemprop="name">I Don't Need No Stinking API: Web Scraping For Fun and Profit</h2> 
     <div class="post-meta"> 
      <time datetime="">February 3, 2017</time> 
     </div> 
     <section> 
      <p>If you’ve ever needed to pull data from a third party website, chances are you started by checking to see if they had an official API. But did you know that there’s a source of structured data that virtually every website on the internet supports automatically, by default?</p> 
      <p><img src="//blog.hartleybrody.com/wp-content/uploads/2012/12/scraper-tool.jpg" alt="scraper tool" title="scraper-tool" width="150" height="119" class="alignright">That’s right, we’re talking about pulling our data straight out of HTML – otherwise known as web scraping. Here’s why web scraping is awesome:</p> 
      <p><strong>Any content that can be viewed on a webpage can be scraped. Period.</strong></p> 
      <p>If a website provides a way for a visitor’s browser to download content and render that content in a structured way, then almost by definition, that content can be accessed programmatically. In this article, I’ll show you how.</p> 
      <p>Over the past few years, I’ve scraped dozens of websites – from music blogs and fashion retailers to the USPTO and undocumented JSON endpoints I found by inspecting network traffic in my browser.</p> 
      <p>There are some tricks that site owners will use to thwart this type of access – which we’ll dive into later – but they almost all have simple work-arounds.</p> 
      <!--more--> 
      <h3>Why You Should Scrape</h3> 
      <p>But first we’ll start with some great reasons why you should consider web scraping first, before you start looking for APIs or RSS feeds or other, more traditional forms of structured data.</p> 
      <p><strong>Websites are More Important Than APIs</strong><br> The biggest one is that site owners generally care way more about maintaining their public-facing visitor website than they do about their structured data feeds.</p> 
      <p>We’ve seen it very publicly with Twitter clamping down on their developer ecosystem, and I’ve seen it multiple times in my projects where APIs change or feeds move without warning.</p> 
      <p>Sometimes it’s deliberate, but most of the time these sorts of problems happen because no one at the organization really cares or maintains the structured data. If it goes offline or gets horribly mangled, no one really notices.</p> 
      <p>Whereas if the website goes down or is having issues, that’s a more of an in-your-face, drop-everything-until-this-is-fixed kind of problem, and gets dealt with quickly.</p> 
      <p><strong>No Rate-Limiting</strong><br> Another thing to think about is that the concept of rate-limiting is virtually non-existent for public websites.</p> 
      <p>Aside from the occasional captchas on sign up pages, most businesses generally don’t build a lot of defenses against automated access. I’ve scraped a single site for over 4 hours at a time and not seen any issues.</p> 
      <p>Unless you’re making concurrent requests, you probably won’t be viewed as a DDOS attack, you’ll just show up as a super-avid visitor in the logs, in case anyone’s looking.</p> 
      <p><strong>Anonymous Access</strong><br> There are also fewer ways for the website’s administrators to track your behavior, which can be useful if you want gather data more privately.</p> 
      <p>With APIs, you often have to register to get a key and then send along that key with every request. But with simple HTTP requests, you’re basically anonymous besides your IP address and cookies, which can be easily spoofed.</p> 
      <p><strong>The Data’s Already in Your Face</strong><br> Web scraping is also universally available, as I mentioned earlier. You don’t have to wait for a site to open up an API or even contact anyone at the organization. Just spend some time browsing the site until you find the data you need and figure out some basic access patterns – which we’ll talk about next.</p> 
      <div class="post-callout"> 
       <h3>Want to Learn More?</h3> 
       <p style="width:50%; float:left"> I share all my web scraping secrets in my extensive ebook, <strong>The Ultimate Guide to Web Scraping</strong>. <a href="https://blog.hartleybrody.com/guide-to-web-scraping/" target="_blank">Learn More</a>. </p> 
       <p style="width:50%; float:left; text-align:right;" class="buy-now"> <script src="https://gumroad.com/js/gumroad.js"></script> <a class="gumroad-button btn-cta" href="https://gum.co/RpXV?wanted=true" data-gumroad-single-product="true"> Buy Now - $<span itemprop="price">12.00</span> 
         <!-- &nbsp;<i class="glyphicon glyphicon-lock"></i> --> </a> <br> </p> 
      </div> 
      <h3>Let’s Get to Scraping</h3> 
      <p>So you’ve decided you want to dive in and start grabbing data like a true hacker. Awesome.</p> 
      <p>Just like reading API docs, it takes a bit of work up front to figure out how the data is structured and how you can access it. Unlike APIs however, there’s really no documentation so you have to be a little clever about it.</p> 
      <p>I’ll share some of the tips I’ve learned along the way.</p> 
      <p><strong>Fetching the Data</strong><br> So the first thing you’re going to need to do is fetch the data. You’ll need to start by finding your “endpoints” – the URL or URLs that return the data you need.</p> 
      <p>If you know you need your information organized in a certain way – or only need a specific subset of it – you can browse through the site using their navigation. Pay attention to the URLs and how they change as you click between sections and drill down into sub-sections.</p> 
      <p>The other option for getting started is to go straight to the site’s search functionality. Try typing in a few different terms and again, pay attention to the URL and how it changes depending on what you search for. You’ll probably see a GET parameter like <code>q=</code> that always changes based on you search term.</p> 
      <p>Try removing other unnecessary GET parameters from the URL, until you’re left with only the ones you need to load your data. Make sure that there’s always a beginning <code>?</code> to start the query string and a <code>&amp;</code> between each key/value pair.</p> 
      <p><strong>Dealing with Pagination</strong><br> At this point, you should be starting to see the data you want access to, but there’s usually some sort of pagination issue keeping you from seeing all of it at once. Most regular APIs do this as well, to keep single requests from slamming the database.</p> 
      <p>Usually, clicking to page 2 adds some sort of <code>offset=</code> parameter to the URL, which is usually either the page number or else the number of items displayed on the page. Try changing this to some really high number and see what response you get when you “fall off the end” of the data.</p> 
      <p>With this information, you can now iterate over every page of results, incrementing the <code>offset</code> parameter as necessary, until you hit that “end of data” condition.</p> 
      <p>The other thing you can try doing is changing the “Display X Per Page” which most pagination UIs now have. Again, look for a new GET parameter to be appended to the URL which indicates how many items are on the page.</p> 
      <p>Try setting this to some arbitrarily large number to see if the server will return all the information you need in a single request. Sometimes there’ll be some limits enforced server-side that you can’t get around by tampering with this, but it’s still worth a shot since it can cut down on the number of pages you must paginate through to get all the data you need.</p> 
      <p><strong>AJAX Isn’t That Bad!</strong><br> Sometimes people see web pages with URL fragments <code>#</code> and AJAX content loading and think a site can’t be scraped. On the contrary! If a site is using AJAX to load the data, that probably makes it even easier to pull the information you need.</p> 
      <p>The AJAX response is probably coming back in some nicely-structured way (probably JSON!) in order to be rendered on the page with Javscript.</p> 
      <p>All you have to do is pull up the network tab in Web Inspector or Firebug and look through the XHR requests for the ones that seem to be pulling in your data.</p> 
      <p>Once you find it, you can leave the crufty HTML behind and focus instead on this endpoint, which is essentially an undocumented API.</p> 
      <h3>(Un)structured Data?</h3> 
      <p>Now that you’ve figured out how to get the data you need from the server, the somewhat tricky part is getting the data you need out of the page’s markup.</p> 
      <p><strong>Use CSS Hooks</strong><br> In my experience, this is usually straightforward since most web designers litter the markup with tons of <code>class</code>es and <code>id</code>s to provide hooks for their CSS.</p> 
      <p>You can piggyback on these to jump to the parts of the markup that contain the data you need.</p> 
      <p>Just right click on a section of information you need and pull up the Web Inspector or Firebug to look at it. Zoom up and down through the DOM tree until you find the outermost <code>&lt;div&gt;</code> around the item you want.</p> 
      <p>This <code>&lt;div&gt;</code> should be the outer wrapper around a single item you want access to. It probably has some <code>class</code> attribute which you can use to easily pull out all of the other wrapper elements on the page. You can then iterate over these just as you would iterate over the items returned by an API response.</p> 
      <p>A note here though: the DOM tree that is presented by the inspector isn’t always the same as the DOM tree represented by the HTML sent back by the website. It’s possible that the DOM you see in the inspector has been modified by Javascript – or sometime even the browser, if it’s in quirks mode.</p> 
      <p>Once you find the right node in the DOM tree, you should always view the source of the page (“right click” &gt; “View Source”) to make sure the elements you need are actually showing up in the raw HTML.</p> 
      <p>This issue has caused me a number of head-scratchers.</p> 
      <p><strong>Get a Good HTML Parsing Library</strong><br> It is probably a horrible idea to try parsing the HTML of the page as a long string (although there are times I’ve needed to fall back on that). Spend some time doing research for a good HTML parsing library in your language of choice.</p> 
      <p>Most of the code I write is in Python, and I love <a href="http://www.crummy.com/software/BeautifulSoup/" target="_blank">BeautifulSoup</a> for its error handling and super-simple API. I also love its motto:</p> 
      <blockquote> 
       <p>You didn’t write that awful page. You’re just trying to get some data out of it. Beautiful Soup is here to help. :)</p> 
      </blockquote> 
      <p>You’re going to have a bad time if you try to use an XML parser since most websites out there don’t actually validate as properly formed XML (sorry XHTML!) and will give you a ton of errors.</p> 
      <p>A good library will read in the HTML that you pull in using some HTTP library (hat tip to the <a href="http://docs.python-requests.org/en/latest/" target="_blank">Requests library</a> if you’re writing Python) and turn it into an object that you can traverse and iterate over to your heart’s content, similar to a JSON object.</p> 
      <div class="post-callout"> 
       <h3>Essential HTTP, HTML &amp; CSS for Web Scrapers</h3> 
       <p> I cover the basics of all the web technologies you need in order to be an effective web scraper <a href="https://blog.hartleybrody.com/guide-to-web-scraping/" target="_blank">in my web scraping ebook</a>. Join thousands of satisfied readers. </p> 
      </div> 
      <h3>Some Traps To Know About</h3> 
      <p>I should mention that some websites explicitly prohibit the use of automated scraping, so it’s a good idea to read your target site’s Terms of Use to see if you’re going to make anyone upset by scraping.</p> 
      <p>For two-thirds of the website I’ve scraped, the above steps are all you need. Just fire off a request to your “endpoint” and parse the returned data.</p> 
      <p>But sometimes, you’ll find that the response you get when scraping isn’t what you saw when you visited the site yourself.</p> 
      <p><strong>When In Doubt, Spoof Headers</strong><br> Some websites require that your User Agent string is set to something they allow, or you need to set certain cookies or other headers in order to get a proper response.</p> 
      <p>Depending on the HTTP library you’re using to make requests, this is usually pretty straightforward. I just browse the site in my web browser and then grab all of the headers that my browser is automatically sending. Then I put those in a dictionary and send them along with my request.</p> 
      <p>Note that this might mean grabbing some login or other session cookie, which might identify you and make your scraping less anonymous. It’s up to you how serious of a risk that is.</p> 
      <p><strong>Content Behind A Login</strong><br> Sometimes you might need to create an account and login to access the information you need. If you have a good HTTP library that handles logins and automatically sending session cookies (did I mention how awesome <a href="http://docs.python-requests.org/en/latest/user/advanced/#session-objects" target="_blank">Requests</a> is?), then you just need your scraper login before it gets to work.</p> 
      <p>Note that this obviously makes you totally non-anonymous to the third party website so all of your scraping behavior is probably pretty easy to trace back to you if anyone on their side cared to look.</p> 
      <p><strong>Rate Limiting</strong><br> I’ve never actually run into this issue myself, although I did have to plan for it one time. I was using a web service that had a strict rate limit that I knew I’d exceed fairly quickly.</p> 
      <p>Since the third party service conducted rate-limiting based on IP address (stated in their docs), my solution was to put the code that hit their service into some client-side Javascript, and then send the results back to my server from each of the clients.</p> 
      <p>This way, the requests would appear to come from thousands of different places, since each client would presumably have their own unique IP address, and none of them would individually be going over the rate limit.</p> 
      <p>Depending on your application, this could work for you.</p> 
      <p><strong>Poorly Formed Markup</strong><br> Sadly, this is the one condition that there really is no cure for. If the markup doesn’t come close to validating, then the site is not only keeping you out, but also serving a degraded browsing experience to all of their visitors.</p> 
      <p>It’s worth digging into your HTML parsing library to see if there’s any setting for error tolerance. Sometimes this can help.</p> 
      <p>If not, you can always try falling back on treating the entire HTML document as a long string and do all of your parsing as string splitting or – God forbid – a giant regex.</p> 
      <hr> 
      <p>Well there’s 2000 words to get you started on web scraping. Hopefully I’ve convinced you that it’s actually a legitimate way of collecting data.</p> 
      <p>It’s a real hacker challenge to read through some HTML soup and look for patterns and structure in the markup in order to pull out the data you need. It usually doesn’t take much longer than reading some API docs and getting up to speed with a client. Plus it’s way more fun!</p> 
      <div class="post-callout"> 
       <h3>The Ultimate Guide to Web Scraping</h3> 
       <p style="float:left; width: 20%"> <a href="http://blog.hartleybrody.com/guide-to-web-scraping/"><img src="https://blog.hartleybrody.com/guide-to-web-scraping/img/web-scraping-ebook.png" style="width: 140px; float:left; margin:5px; border: 1px solid #FFD700; background:white"></a> </p> 
       <p style="margin: 15px 20px; float: left; width: 70%;"> I’ve written a book called <strong><a href="http://blog.hartleybrody.com/guide-to-web-scraping/">The Ultimate Guide to Web Scraping</a></strong> that includes everything you need to know to extract information from web pages. <a href="http://blog.hartleybrody.com/guide-to-web-scraping/">More Info ?</a> </p> 
       <p style="text-align:center; clear:both" class="buy-now"> <script src="https://gumroad.com/js/gumroad.js"></script> <a class="gumroad-button btn-cta" href="https://gum.co/RpXV?wanted=true" data-gumroad-single-product="true"> Buy Now - $<span itemprop="price">12.00</span> 
         <!-- &nbsp;<i class="glyphicon glyphicon-lock"></i> --> </a> <br> <small class="text-muted cta-subtext"> <i class="glyphicon glyphicon-lock"></i> Purchase securely with Paypal or Credit Card. </small> </p> 
      </div> 
      <p><strong>Disclaimer</strong><br> While scraping can sometimes be used as a legitimate way to access all kinds of data on the internet, it’s also important to consider the legal implications. As was <a href="http://news.ycombinator.com/item?id=4896590" target="_blank">pointed out in the comments on HN</a>, there are many cases where scraping data may be considered illegal, or open you to the possibility of being sued. Similar to using a firearm, some uses of web scraping techniques can be used for utility or sport, while others can land you in jail. I am not a lawyer, but you should be smart about how you use it.</p> 
     </section> 
     <div id="fb-root"></div> 
     <script>
    (function(d, s, id) {
      var js, fjs = d.getElementsByTagName(s)[0];
      if (d.getElementById(id)) return;
      js = d.createElement(s); js.id = id;
      js.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.8&appId=225565217845173";
      fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));
  </script> 
     <div class="fb-comments" data-href="https://blog.hartleybrody.com/web-scraping/" data-width="750" data-numposts="5"></div> 
    </article> 
   </div> 
   <div class="right-col"> 
    <div id="sidebar"> 
     <div class="sidebar-item" id="bio"> 
      <a href="http://www.hartleybrody.com/"> <img src="https://www.gravatar.com/avatar/0b3ac738e74f7fbda25fca0f754b0aad?s=200" id="bioimg"> </a> 
      <p>I'm a full-stack web developer and tech lead with 6 years of experience across many modern tech stacks.</p> 
      <p>I'm always looking to talk to new clients and contribute to cool projects. <a href="/contact-me/">Contact me</a> or <a href="/projects/">check out my side projects</a>. </p> 
     </div> 
     <div class="non-amp"> 
      <div class="sidebar-item" id="subscribe"> 
       <h3>Get Email Updates</h3> 
       <p>One or two emails a month about the latest technology I'm hacking on.</p> 
       <form action="https://tinyletter.com/hb-tech" method="post" target="popupwindow" onsubmit="window.open('https://tinyletter.com/hb-tech', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true"> 
        <input type="email" name="email" placeholder="email address..." id="subscribe-email"> 
        <input type="hidden" value="1" name="embed"> 
        <input type="submit" value="Join »" name="subscribe" id="subscribe-button"> 
       </form> 
      </div> 
     </div> 
     <div class="sidebar-item" id="scraping-book"> 
      <a href="/guide-to-web-scraping/"> <img src="/guide-to-web-scraping/img/web-scraping-ebook.png"> </a> 
     </div> 
     <div class="sidebar-item" id="popular"> 
      <h3>Popular Posts</h3> 
      <ul> 
       <li><a href="/web-scraping/">I Don’t Need No Stinking API: Web Scraping For Fun and Profit</a></li> 
       <li><a href="/fb-messenger-bot/">Facebook Messenger Bot Tutorial: Step-by-Step Instructions for Building a Basic Facebook Chat Bot</a></li> 
       <li><a href="/https-certificates/">How HTTPS Secures Connections: What Every Web Dev Should Know</a></li> 
       <li><a href="/google-python/">Google’s Python Lessons are Awesome</a></li> 
       <li><a href="/python-serialize/">Lightning Fast Data Serialization in Python</a></li> 
       <li><a href="/static-site-s3/">Moving a Static Site to S3 Before My Girlfriend Got Out of the Shower</a></li> 
       <li><a href="/scrape-amazon/">How to Scrape Amazon.com: 19 Lessons I Learned While Crawling 1MM+ Product Listings</a></li> 
       <li><a href="/chrome-extension/">So You Want to Build a Chrome Extension?</a></li> 
       <li><a href="/scale-load/">Scaling Your Web App 101: Lessons in Architecture Under Load</a></li> 
       <li><a href="/serverless-stack/">Look Ma, No Servers! How Javascript is Changing the Modern Web Stack</a></li> 
       <li><a href="/learning-to-code/">How I Learned to Code in Only 6 Years: And You Can Too!</a></li> 
       <li><a href="/git-small-teams/">Minimum Viable Git Best Practices for Small Teams</a></li> 
      </ul> 
     </div> 
     <div class="sidebar-item" id="links"> 
      <h3>More Info</h3> 
      <ul> 
       <li><a href="/contact-me/">Contact Me</a></li> 
       <li><a href="/press/">Press Mentions</a></li> 
       <li><a href="/projects/">Recent Projects</a></li> 
       <li><a href="/subscribe/">Subscribe To My Blog</a></li> 
      </ul> 
     </div> 
    </div>
    <!--#sidebar--> 
   </div> 
   <div class="full-col"> 
    <footer class="site-footer"> 
     <section class="copyright">
      All content © 2017 • 
      <a href="/contact-me/">Hartley Brody</a> 
     </section> 
    </footer> 
   </div> 
  </div>   
 </body>
</html>