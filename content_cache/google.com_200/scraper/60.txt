<!doctype html>
<html>
 <head> 
  <meta charset="utf-8"> 
  <meta http-equiv="X-UA-Compatible" content="IE=edge"> 
  <title>Web scraper en NodeJs: x-ray</title> 
  <meta name="description" content=""> 
  <meta name="HandheldFriendly" content="True"> 
  <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
  <link rel="shortcut icon" href="/favicon.ico"> 
  <link rel="stylesheet" type="text/css" href="/assets/css/screen.css?v=ee8cf28a90"> 
  <link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Merriweather:300,700,700italic,300italic|Open+Sans:700,400"> 
  <link rel="canonical" href="http://blog.eperedo.com/web-scraper-usando-xray/"> 
  <meta property="og:site_name" content="Eduardo Peredo"> 
  <meta property="og:type" content="article"> 
  <meta property="og:title" content="Web scraper en NodeJs: x-ray"> 
  <meta property="og:description" content="Necesito obtener en un formato amigable los datos de los 130 congresistas, entiéndase por amigable: json o bueno en el más dramático y horrible de los casos algo tipo csv, txt, XML.  Voy a la web de nuestro eficiente congreso..."> 
  <meta property="og:url" content="http://blog.eperedo.com/web-scraper-usando-xray/"> 
  <meta property="og:image" content="http://blog.eperedo.com/content/images/2015/09/x-ray.png"> 
  <meta property="article:published_time" content="2015-09-16T06:12:27.947Z"> 
  <meta property="article:modified_time" content="2015-09-16T06:26:12.270Z"> 
  <meta property="article:tag" content="scraper"> 
  <meta property="article:tag" content="nodejs"> 
  <meta name="twitter:card" content="summary_large_image"> 
  <meta name="twitter:title" content="Web scraper en NodeJs: x-ray"> 
  <meta name="twitter:description" content="Necesito obtener en un formato amigable los datos de los 130 congresistas, entiéndase por amigable: json o bueno en el más dramático y horrible de los casos algo tipo csv, txt, XML.  Voy a la web de nuestro eficiente congreso..."> 
  <meta name="twitter:url" content="http://blog.eperedo.com/web-scraper-usando-xray/"> 
  <meta name="twitter:image:src" content="http://blog.eperedo.com/content/images/2015/09/x-ray.png"> 
  <script type="application/ld+json">
{
    "@context": "http://schema.org",
    "@type": "Article",
    "publisher": "Eduardo Peredo",
    "author": {
        "@type": "Person",
        "name": "Eduardo Peredo",
        "image": "http://blog.eperedo.com/content/images/2015/02/profile.jpeg",
        "url": "http://blog.eperedo.com/author/eduardo",
        "sameAs": null
    },
    "headline": "Web scraper en NodeJs: x-ray",
    "url": "http://blog.eperedo.com/web-scraper-usando-xray/",
    "datePublished": "2015-09-16T06:12:27.947Z",
    "dateModified": "2015-09-16T06:26:12.270Z",
    "image": "http://blog.eperedo.com/content/images/2015/09/x-ray.png",
    "keywords": "scraper, nodejs",
    "description": "Necesito obtener en un formato amigable los datos de los 130 congresistas, entiéndase por amigable: json o bueno en el más dramático y horrible de los casos algo tipo csv, txt, XML.  Voy a la web de nuestro eficiente congreso..."
}
    </script> 
  <meta name="generator" content="Ghost 0.5"> 
  <link rel="alternate" type="application/rss+xml" title="Eduardo Peredo" href="/rss/"> 
 </head> 
 <body class="post-template tag-scraper tag-nodejs"> 
  <header class="main-header post-head " style="background-image: url(/content/images/2015/09/x-ray.png)"> 
   <nav class="main-nav overlay clearfix"> 
    <a class="back-button icon-arrow-left" href="http://blog.eperedo.com">Home</a> 
    <a class="subscribe-button icon-feed" href="http://blog.eperedo.com/rss/">Subscribe</a> 
   </nav> 
  </header> 
  <main class="content" role="main"> 
   <article class="post tag-scraper tag-nodejs"> 
    <header class="post-header"> 
     <h1 class="post-title">Web scraper en NodeJs: x-ray</h1> 
     <section class="post-meta"> 
      <time class="post-date" datetime="2015-09-16">16 September 2015</time> on 
      <a href="/tag/scraper/">scraper</a>, 
      <a href="/tag/nodejs/">nodejs</a> 
     </section> 
    </header> 
    <section class="post-content"> 
     <p>Necesito obtener en un formato <em>amigable</em> los datos de los 130 congresistas, entiéndase por amigable: <strong>json</strong> o bueno en el más dramático y horrible de los casos algo tipo csv, txt, XML. <br> Voy a la web de nuestro eficiente congreso (NOT) y pierdo 19 minutos de mi vida buscando la data que quiero en uno de los formatos ya mencionados anteriormente.</p> 
     <p>Obviamente ya sabía que no iba a encontrar nada, salvo la gestión de municipal de Susana Villarán, ningún otro se ha preocupado jamás por iniciativas de open data, pero este no es un blog sobre política así que no voy a entrar en detalles... a menos que... NO!</p> 
     <h5 id="buscandounscraperennodejs">Buscando un scraper en nodejs</h5> 
     <p>¿Qué hago? Obviamente tengo que usar algún web scraper que obtenga los datos y luego los convierto a un formato <strong>.json</strong>.</p> 
     <p>Ya he hecho esto anteriormente, pero siempre con tools basados en python o ruby. Ya buen tiempo que uso javascript para todo, entonces busco algún módulo que me ayude con esta tarea. <br> Obviamente existen muchos en <a href="https://www.npmjs.com/search?q=web+scraper">npm</a>, pero luego de jugar con varios encuentro uno que me gusta y me permite hacer en cuestión de minutos lo que quiero.</p> 
     <h5 id="xray">X-RAY</h5> 
     <p><a href="https://github.com/lapwinglabs/x-ray">X-ray</a> me gusta porque solo le indicas el url, un selector css más los tags html que tienen la data deseada y automágicamente ya tienes un resultado que puedes grabar a un archivo.</p> 
     <h5 id="instalandoxray">Instalando x-ray</h5> 
     <p>Creo un package.json usando <a href="https://docs.npmjs.com/cli/init">npm init</a> con valores por default, luego instalo la dependencia que necesito.</p> 
     <pre><code>npm i x-ray -S  
</code></pre> 
     <p>La letra <em>i</em> es un <em>shortcut</em> para <strong>install</strong> mientras que <em>-S</em> es la manera abreviada de <em>--save</em> ya que deseo que esta dependencia se muestre en mi <strong>package.json</strong></p> 
     <h5 id="obteniendolalistadecongresistas">Obteniendo la lista de congresistas</h5> 
     <p>Primero necesito saber la web de dónde sacaré los datos, para este caso la url es esta <a href="http://www.congreso.gob.pe/pleno?K=290">http://www.congreso.gob.pe/pleno?K=290</a>. <br> Con esto ya tenemos el primer parámetro que x-ray requiere, pero ahora necesitamos estudiar un poco el html de la web dónde tenemos a los congresistas.</p> 
     <p><img src="/content/images/2015/09/congressmen_html.png" alt="html congresistas"></p> 
     <p>El html no luce complicado, una etiqueta <strong>table</strong> con la clase <strong>congresistas</strong> que contiene toda la información que necesitamos y que podemos usar como segundo parámetro con x-ray. <br> El tercer parámetro que x-ray necesita es un arreglo qué contiene un objeto que representará la data que vamos a obtener.</p> 
     <p>En este caso vamos a extraer la foto, el nombre y el partido político al que pertenecen (que probablemente no fue con el que entraron, pero ese es otro tema ya que prometí no hablar de política) <br> Si regresan a la imagen verán que resalté exactamente esa información pero con un énfasis especial en las etiquetas html y sus clases css para que se entienda luego en el código el tema de los selectores. <br> La imagen está en una etiqueta <strong>img</strong> (DUH), pero dentro de un span con la clase <strong>fotolist</strong> por lo cual podemos representarlo con el siguiente selector:</p> 
     <pre><code>td span.fotolist img@src  
</code></pre> 
     <p>El <strong>@src</strong> del final le dice a x-ray que lo que queremos es el atributo source, ya que ese nos da acceso a la url que tiene la imagen.</p> 
     <p>Ahora vamos por el nombre, aunque lo ideal es separar el nombre y apellido en este caso no está representado de esa forma y tampoco es que me importe mucho. Al igual que la imagen, necesitamos ver en qué etiquetas se encuentra este dato y pues es bastante sencillo, en este caso tenemos directamente un link con la clase css <strong>conginfo</strong>. </p> 
     <pre><code>td a.confinfo@text  
</code></pre> 
     <p>En este caso indicamos <strong>@text</strong> ya que queremos el texto que tiene la etiqueta, aunque no es necesario agregarlo ya que por defecto x-ray asume que quieres el texto de una etiqueta si no indicas nada. O sea que también funcionaría de la siguiente manera:</p> 
     <pre><code>td a.confinfo  
</code></pre> 
     <p>Por último <del>y también menos importante</del> el partido político al que pertenecen los <del>ineptos</del> padres de la patria. <br> En este caso tenemos el partido político en una etiqueta <strong>span</strong> con la clase css <strong>partidolist</strong> </p> 
     <pre><code>td span.partidolist@text  
</code></pre> 
     <p>Ya tenemos identificados los 3 selectores que nos darán la data que necesitamos, pero ¿Cómo se ve representando esto en código?</p> 
     <pre><code>'use strict';

// Referenciamos xray y creamos una variable para el url
var xray = require('x-ray')(),  
        url = 'http://www.congreso.gob.pe/pleno?K=290';

function getRepresentatives() {

    var htmlTags = [],
        dataSelectors = {};

    // selector para el nombre
    dataSelectors.fullName = 'td a.conginfo@text';
    // selector para el partido político
    dataSelectors.politicalParty = 'td span.partidolist@text';
    // selector para la photo
    dataSelectors.photo = 'td span.fotolist img@src';

    // agregamos los selectores al arreglo
    htmlTags.push(dataSelectors);
    // pasamos los parámetros a x-ray, url, selector inicial
    // que es la tabla con la lista de congresistas
    // y por último el array con los selectores
    xray(url, 'table.congresistas &gt; tr', htmlTags).write('representatives.json');

}
</code></pre> 
     <p>Vemos que la variable <strong>dataSelectors</strong> tiene los selectores que identificamos y asignados a propiedades con los nombres <strong>fullName, politicalParty y photo</strong>. Estos nombres pueden ser lo que a uno se le ocurra, no necesariamente deben o tienen relación al esquema html. <br> Luego de pasar los parámetros a x-ray llamamos al método <strong>write</strong> que nos permite grabar los resultados a un archivo, en este caso le pondré como nombre <strong>representatives.json</strong>.</p> 
     <p>El código final y las instrucciones para ejecutarlo lo pueden encontrar en mi cuenta de github.</p> 
     <p><a href="https://github.com/eperedo/congress-peru">https://github.com/eperedo/congress-peru</a></p> 
    </section> 
    <footer class="post-footer"> 
     <figure class="author-image"> 
      <a class="img" href="/author/eduardo/" style="background-image: url(/content/images/2015/02/profile.jpeg)"><span class="hidden">Eduardo Peredo's Picture</span></a> 
     </figure> 
     <section class="author"> 
      <h4><a href="/author/eduardo/">Eduardo Peredo</a></h4> 
      <p>Read <a href="/author/eduardo/">more posts</a> by this author.</p> 
      <div class="author-meta"> 
      </div> 
     </section> 
     <section class="share"> 
      <h4>Share this post</h4> 
      <a class="icon-twitter" href="https://twitter.com/share?text=Web%20scraper%20en%20NodeJs%3A%20x-ray&amp;url=http://blog.eperedo.com/web-scraper-usando-xray/" onclick="window.open(this.href, 'twitter-share', 'width=550,height=235');return false;"> <span class="hidden">Twitter</span> </a> 
      <a class="icon-facebook" href="https://www.facebook.com/sharer/sharer.php?u=http://blog.eperedo.com/web-scraper-usando-xray/" onclick="window.open(this.href, 'facebook-share','width=580,height=296');return false;"> <span class="hidden">Facebook</span> </a> 
      <a class="icon-google-plus" href="https://plus.google.com/share?url=http://blog.eperedo.com/web-scraper-usando-xray/" onclick="window.open(this.href, 'google-plus-share', 'width=490,height=530');return false;"> <span class="hidden">Google+</span> </a> 
     </section> 
    </footer> 
   </article> 
  </main> 
  <footer class="site-footer clearfix"> 
   <section class="copyright">
    <a href="http://blog.eperedo.com">Eduardo Peredo</a> © 2017
   </section> 
   <section class="poweredby">
    Proudly published with 
    <a href="https://ghost.org">Ghost</a>
   </section> 
  </footer> 
  <script src="/public/jquery.min.js?v=ee8cf28a90"></script> 
  <script type="text/javascript" src="/assets/js/jquery.fitvids.js?v=ee8cf28a90"></script> 
  <script type="text/javascript" src="/assets/js/index.js?v=ee8cf28a90"></script> 
  <script>
	  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

	  ga('create', 'UA-42366544-2', 'auto');
	  ga('send', 'pageview');

	</script>   
 </body>
</html>