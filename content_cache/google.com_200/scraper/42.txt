<!doctype html>
<html>
 <head> 
  <meta charset="utf-8"> 
  <meta http-equiv="X-UA-Compatible" content="IE=edge"> 
  <title>HTML Scraping in NodeJS with Cheerio</title> 
  <meta name="HandheldFriendly" content="True"> 
  <meta name="MobileOptimized" content="320"> 
  <meta name="apple-mobile-web-app-capable" content="yes"> 
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent"> 
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"> 
  <meta name="google-site-verification" content="92iRbDYFLgluQUSZaJK4w0CpmJTjjwNyUceWgfx9Rmg"> 
  <meta name="description" content="Hello there! I'm Dillon Buchanan, a software developer and all-around programming enthusist working in Boston. I love creating great software!."> 
  <meta name="twitter:card" content="summary"> 
  <meta name="twitter:title" content="thedillonb"> 
  <meta name="twitter:description" content="Dillon Buchanan"> 
  <meta property="og:type" content="article"> 
  <meta property="og:title" content=""> 
  <meta property="og:description" content=""> 
  <link href="/favicon.ico" rel="shortcut icon" type="image/x-icon"> 
  <link href="/apple-touch-icon-precomposed.png" rel="apple-touch-icon"> 
  <link rel="stylesheet" type="text/css" href="/assets/css/uno.css"> 
  <link rel="stylesheet" type="text/css" href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css"> 
 </head> 
 <body class=""> 
  <header class="panel-cover panel-cover--collapsed" style="background-image: url(/assets/images/background-cover.jpg)"> 
   <div class="panel-main"> 
    <div class="panel-main__inner panel-inverted"> 
     <div class="panel-main__content"> 
      <a href="http://www.dillonbuchanan.com" title="link to homepage for Dillon Buchanan"><img src="https://avatars2.githubusercontent.com/u/1644068?s=460" width="80" alt=" logo" class="panel-cover__logo logo"></a> 
      <h1 class="panel-cover__title panel-title"><a href="http://www.dillonbuchanan.com" title="link to homepage for Dillon Buchanan">Dillon Buchanan</a></h1> 
      <span class="panel-cover__subtitle panel-subtitle">Software Engineer</span> 
      <hr class="panel-cover__divider"> 
      <p class="panel-cover__description">Hello there! I'm Dillon Buchanan, a software developer and all-around programming enthusist working in Boston. I love creating great software!</p> 
      <hr class="panel-cover__divider panel-cover__divider--secondary"> 
      <div class="navigation-wrapper"> 
       <nav class="cover-navigation navigation--social"> 
        <ul class="navigation"> 
         <!-- Twitter --> 
         <li class="navigation__item"> <a href="http://twitter.com/thedillonb" title="@TheDillonB on Twitter"> <i class="fa fa-twitter"></i> <span class="label">Twitter</span> </a> </li> 
         <!-- Dribbble --> 
         <li class="navigation__item"> <a href="http://github.com/thedillonb" title="Dillon Buchanan on GitHub"> <i class="fa fa-github"></i> <span class="label">GitHub</span> </a> </li> 
         <!-- Email --> 
         <li class="navigation__item"> <a href="mailto:thedillonb@gmail.com" title="Email thedillonb@gmail.com"> <i class="fa fa-envelope"></i> <span class="label">Email</span> </a> </li> 
        </ul> 
       </nav> 
      </div> 
     </div> 
    </div> 
    <div class="panel-cover--overlay"></div> 
   </div> 
  </header> 
  <div class="content-wrapper"> 
   <div class="content-wrapper__inner"> 
    <article class="post-container"> 
     <header class="post-header"> 
      <h1 class="post-title">HTML Scraping in NodeJS with Cheerio</h1> 
      <div class="post-meta"> 
       <time datetime="02 Nov 2016" class="post-meta__date date">28 Jun 2014</time> • 
       <span class="post-meta__tags tags"> <span>nodejs</span> <span>html scraping</span> </span> • 
       <span class="post-meta__comments comments"> <a href="#disqus_thread" style="color: inherit;">comments</a> </span> 
      </div> 
     </header> 
     <section class="post"> 
      <p>As a developer I live for APIs. The ability to take structured information from one source and transform it into another is very exciting. Unfortunately, not all information sources provide a API. Many times, the information needed is jamed into a HTML source which presents a challenge attempting to extract it. Luckily, there's an incredible NodeJS package called <a href="https://github.com/cheeriojs/cheerio">Cheerio</a> which makes this task pretty simple.</p> 
      <p>I'm going to demonstrate creating a NodeJS application which will HTML scrape information from GitHub's <a href="https://github.com/showcases">Showcase</a> Page. This example is taken from the <a href="https://github.com/thedillonb/CodeHub-Trending">GitHub-Trending</a> project where GitHub's trending and showcase pages are scraped to provide a JSON API which can be viewed <a href="http://codehub-trending.herokuapp.com/trending">here</a> - this project is used to power a few of my mobile applications.</p> 
      <p>Here's a few prerequisites:</p> 
      <ol> 
       <li>NodeJS - duh</li> 
       <li>The <a href="https://github.com/mikeal/request">Request</a> package</li> 
       <li>The <a href="https://github.com/cheeriojs/cheerio">Cheerio</a> package</li> 
      </ol> 
      <p>For this demonstration I'm going to create a single file application which will dump information when executed. This will suffice for an example but if you're looking to integrate with a larger project take the steps proper steps to modulize it.</p> 
      <p>Run the following commands in the command line</p> 
      <ol> 
       <li><code>mkdir cheerio-example</code> - Create a new project directory</li> 
       <li><code>cd cheerio-example</code> - Go into the project directory you just created</li> 
       <li><code>npm install request</code> - Install the Request package</li> 
       <li><code>npm install cheerio</code> - Install the cheerio package</li> 
       <li><code>touch app.js</code> - Create the application file</li> 
      </ol> 
      <p>Great! We've got our dependencies downloaded and the application file created. Now it's time to start populating the <em>app.js</em> file with content:</p> 
      <figure class="highlight">
       <pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">cheerio</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'cheerio'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'request'</span><span class="p">);</span>

<span class="nx">request</span><span class="p">({</span>
    <span class="na">method</span><span class="p">:</span> <span class="s1">'GET'</span><span class="p">,</span>
    <span class="na">url</span><span class="p">:</span> <span class="s1">'https://github.com/showcases'</span>
<span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">body</span><span class="p">);</span>
<span class="p">});</span></code></pre>
      </figure> 
      <p>If we run this (<code>node app.js</code>) it will reach out to GitHub's Showcase page, grab the HTML and print it to the console. Not very exciting but we're actually half way. This is where Cheerio comes in. If you've never used Cheerio before then you're in for a treat. Cheerio takes raw HTML, parses it, and returns a jQuery object to you so you may traverse the DOM.</p> 
      <figure class="highlight">
       <pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">cheerio</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'cheerio'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'request'</span><span class="p">);</span>

<span class="nx">request</span><span class="p">({</span>
    <span class="na">method</span><span class="p">:</span> <span class="s1">'GET'</span><span class="p">,</span>
    <span class="na">url</span><span class="p">:</span> <span class="s1">'https://github.com/showcases'</span>
<span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>

    <span class="c1">// Tell Cherrio to load the HTML</span>
    <span class="nx">$</span> <span class="o">=</span> <span class="nx">cheerio</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">body</span><span class="p">);</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">'li.collection-card'</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">href</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">'a.collection-card-image'</span><span class="p">,</span> <span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'href'</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">href</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="s1">'/'</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">'h3'</span><span class="p">,</span> <span class="k">this</span><span class="p">).</span><span class="nx">text</span><span class="p">());</span>
            <span class="p">}</span>
    <span class="p">});</span>
<span class="p">});</span></code></pre>
      </figure> 
      <p>If we run this we'll see each showcase printed to the console like so:</p> 
      <div class="highlight">
       <pre><code class="language-" data-lang="">Icon fonts
Package managers
Science
Machine learning
Web games
Emoji
Projects with great wikis
Productivity tools
Policies
CSS preprocessors
Video tools
Clean code linters
Data visualization
Projects that power GitHub
Projects that power GitHub for Windows
</code></pre>
      </div> 
      <p>That's all there is to it. Cheerio, combined with Request, makes parsing HTML very easy. With just this example, you can begin scraping HTML into structred data which can be used in practical applications - in my case, mobile applications! The iOS application, <a href="http://codehub-app.com/">CodeHub</a>, calls out to <a href="https://github.com/thedillonb/CodeHub-Trending">CodeHub-Trending</a> which exposes a structured API of data that is scraped from GitHub's Trending and Showcase web pages!</p> 
     </section> 
     <section class="disqus_comments"> 
      <div id="disqus_thread"></div> 
      <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'dillonbuchanan'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script> 
      <noscript>
       Please enable JavaScript to view the 
       <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a>
      </noscript> 
      <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a> 
     </section> 
    </article> 
   </div> 
  </div> 
  <script type="text/javascript" src=""></script> 
  <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

      ga('create', 'UA-33497514-1', 'dillonbuchanan.com');
      ga('send', 'pageview');

    </script> 
  <script type="text/javascript">
      /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
      var disqus_shortname = 'dillonbuchanan'; // required: replace example with your forum shortname

      /* * * DON'T EDIT BELOW THIS LINE * * */
      (function () {
          var s = document.createElement('script'); s.async = true;
          s.type = 'text/javascript';
          s.src = '//' + disqus_shortname + '.disqus.com/count.js';
          (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
      }());
    </script>   
 </body>
</html>