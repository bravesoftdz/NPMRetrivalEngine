<!doctype html>
<html>
 <head> 
  <meta charset="utf-8"> 
  <title>jsclass</title> 
  <link href="../stylesheets/screen.css" media="all" rel="stylesheet" type="text/css">
  <link href="../stylesheets/github.css" media="all" rel="stylesheet" type="text/css"> 
  <link href="http://fonts.googleapis.com/css?family=Inconsolata:400,700|Open+Sans:300italic,400italic,700italic,400,300,700" rel="stylesheet" type="text/css"> 
 </head> 
 <body> 
  <div class="nav"> 
   <h1> <a href="/">jsclass</a> </h1> 
   <p class="download"> <a href="/assets/JS.Class.4-0-5.zip">Download v4.0.5</a> </p> 
   <h4>Introduction</h4> 
   <ul> 
    <li> <a href="/introduction.html">Getting started</a> </li> 
    <li> <a href="/platforms.html">Supported platforms</a> </li> 
    <li> <a href="/packages.html">Package manager</a> </li> 
    <li> <a href="/license.html">License &amp; acknowledgements</a> </li> 
   </ul> 
   <h4>Community</h4> 
   <ul> 
    <li> <a href="http://groups.google.com/group/jsclass-users">Mailing list</a> </li> 
    <li> <a href="http://github.com/jcoglan/jsclass">GitHub repository</a> </li> 
   </ul> 
   <h4>Core reference</h4> 
   <ul> 
    <li> <a href="/classes.html">Creating classes</a> </li> 
    <li> <a href="/modules.html">Using modules</a> </li> 
    <li> <a href="/modifyingmodules.html">Modifying classes/modules</a> </li> 
    <li> <a href="/singletonmethods.html">Singleton methods</a> </li> 
    <li> <a href="/classmethods.html">Class methods</a> </li> 
    <li> <a href="/keywords.html">Keyword methods</a> </li> 
    <li> <a href="/inheritance.html">Inheritance</a> </li> 
    <li> <a href="/binding.html">Method binding</a> </li> 
    <li> <a href="/hooks.html">Metaprogramming hooks</a> </li> 
    <li> <a href="../reflection.html">Reflection</a> </li> 
    <li> <a href="/debugging.html">Debugging support</a> </li> 
    <li> <a href="/kernel.html">The Kernel module</a> </li> 
    <li> <a href="/equality.html">Equality and hashing</a> </li> 
    <li> <a href="../interfaces.html">Interfaces</a> </li> 
    <li> <a href="../singletons.html">Singletons</a> </li> 
   </ul> 
   <h4>Standard library</h4> 
   <ul> 
    <li> <a href="../command.html">Command</a> </li> 
    <li> <a href="../comparable.html">Comparable</a> </li> 
    <li> <a href="../console.html">Console</a> </li> 
    <li> <a href="../constantscope.html">ConstantScope</a> </li> 
    <li> <a href="../decorator.html">Decorator</a> </li> 
    <li> <a href="../deferrable.html">Deferrable</a> </li> 
    <li> <a href="../enumerable.html">Enumerable</a> </li> 
    <li> <a href="../enumerator.html">Enumerator</a> </li> 
    <li> <a href="../forwardable.html">Forwardable</a> </li> 
    <li> <a href="/hash.html">Hash, OrderedHash</a> </li> 
    <li> <a href="/linkedlist.html">LinkedList</a> </li> 
    <li> <a href="../methodchain.html">MethodChain</a> </li> 
    <li> <a href="../observable.html">Observable</a> </li> 
    <li> <a href="/proxies.html">Proxy</a> </li> 
    <li> <a href="../range.html">Range</a> </li> 
    <li> <a href="/set.html">Set, OrderedSet, SortedSet</a> </li> 
    <li> <a href="../stacktrace.html">StackTrace</a> </li> 
    <li> <a href="../state.html">State</a> </li> 
    <li> <a href="../tsort.html">TSort</a> </li> 
   </ul> 
  </div> 
  <div class="content"> 
   <h2>Setting up</h2> 
   <p>Before you can use the <code>JS.require()</code> function, you need the following loaded into the page:</p> 
   <ul> 
    <li><code>JS.packages</code>, the dependency manager</li> 
    <li>A list of dependencies</li> 
   </ul> 
   <p>You can get <code>JS.packages</code> either by loading the <code>package.js</code> or <code>loader.js</code> into your environment. (<code>loader.js</code> is <code>package.js</code> plus dependency data for <code>jsclass</code> itself; if you just want to use <code>JS.packages</code> to manage your code without using the rest of the <code>jsclass</code> library, use <code>package.js</code>.)</p> 
   <p>After loading the package manager, you need to tell it where to find your code.</p> 
   <h3>The package manifest</h3> 
   <p>To describe your packages, you list the external script files used by your application, stating which JavaScript objects are provided by the file and which objects it depends on. For example, here are a few modules from the JS.Class library:</p> 
   <pre>JS.packages(function() { with(this) {
    file(JSCLASS_PATH + '/core.js')
        .provides('JS.Module',
                  'JS.Class',
                  'JS.Kernel');

    file(JSCLASS_PATH + '/comparable.js')
        .provides('JS.Comparable')
        .requires('JS.Module');

    file(JSCLASS_PATH + '/enumerable.js')
        .provides('JS.Enumerable')
        .requires('JS.Module',
                  'JS.Class');

    file(JSCLASS_PATH + '/hash.js')
        .provides('JS.Hash',
                  'JS.OrderedHash')
        .requires('JS.Class',
                  'JS.Enumerable',
                  'JS.Comparable');
}});</pre> 
   <p>Notice how <code>Enumerable</code> depends on <code>Class</code> and <code>Module</code>, which are both provided by the same file, <code>core.js</code>. Similarly, <code>Hash</code> requires <code>Enumerable</code> and <code>Comparable</code>, which both have a dependency on <code>Module</code>. The package manager resolves all this and only loads each file once. Object detection is used to figure out whether each file has been loaded and a file is not requested unless some of its objects appear to be missing.</p> 
   <p>Where possible, the package system will attempt to load scripts in parallel where it spots that execution order doesn’t matter. For example, <code>Enumerable</code> and <code>Comparable</code> do not depend on each other, so when we want to load <code>Hash</code> we can load these dependencies in parallel. If the load order of a set of scripts is important, you must <strong>make sure you make this clear using the <code>requires()</code> statement</strong>. A file will not be loaded until all the objects it <code>requires</code> are present.</p> 
   <p>A package can also list multiple files. In this case, because JS.packages doesn’t know anything about the relationships between the files, it cannot automatically parallelize downloads and will just download them sequentially when you call <code>JS.require()</code>. This is provided as a convenience for loading libraries composed of multiple files, where listing their interdependencies is more trouble than it’s worth and you’d rather specify the load order youself.</p> 
   <p>For example, to load the <a href="http://fancybox.net/">Fancybox</a> library, you could do this:</p> 
   <pre>JS.packages(function() { with(this) {
    file( 'fancybox/lib/jquery-1.7.1.min.js',
          'fancybox/source/jquery.fancybox.pack.js',
          'fancybox/source/helpers/jquery.fancybox-buttons.js',
          'fancybox/source/helpers/jquery.fancybox-thumbs.js')
        .provides('jQuery.fancybox');
}});</pre> 
   <p>In addition to <code>requires()</code>, there is a statement called <code>uses()</code> that specifies a ‘soft dependency’, i.e. an object the package needs but that does not necessarily need to be loaded first. For example, <a href="/set.html"><code>Set</code></a> uses a <a href="/hash.html"><code>Hash</code></a> for storage but you could load <code>Hash</code> after the <code>Set</code> package just fine. On the other hand, <code>Set</code> mixes in <a href="/enumerable.html"><code>Enumerable</code></a> and this must be loaded before <code>Set</code> is defined. And, <code>Hash</code> is itself based on <code>Enumerable</code>. So the package config for this looks like:</p> 
   <pre>JS.packages(function() { with(this) {
    file(JSCLASS_PATH + '/enumerable.js')
        .provides('JS.Enumerable');

    file(JSCLASS_PATH + '/hash.js')
        .provides('JS.Hash')
        .requires('JS.Enumerable');

    file(JSCLASS_PATH + '/set.js')
        .provides('JS.Set')
        .requires('JS.Enumerable')
        .uses('JS.Hash');
});</pre> 
   <p>The advantage of using <code>uses()</code> is that it helps the package system optimise the downloading of packages, since if the load order does not matter the packages can be downloaded in parallel.</p> 
  </div> 
  <div class="footer">
    Copyright © 2007–2014 James Coglan, released under the MIT license 
  </div> 
  <script language="javascript" src="../javascripts/prettify.js" type="text/javascript"></script>
  <script language="javascript" src="../javascripts/analytics.js" type="text/javascript"></script> 
  <script>
      (function() {
        var pre = document.getElementsByTagName('pre'), n = pre.length
        while (n--) {
          if (!pre[n].className) pre[n].className = 'prettyprint'
        }
        prettyPrint()
      })()
    </script>   
 </body>
</html>