<!doctype html>
<html>
 <head> 
  <meta charset="utf-8"> 
  <meta name="viewport" content="width=device-width, initial-scale=1"> 
  <title>
    Setting up multi-platform npm packages
  </title> 
  <link rel="icon" type="image/png" href="../../img/2ality_logo_32.png" sizes="32x32"> 
  <link rel="stylesheet" href="../../site.css"> 
  <link rel="stylesheet" href="http://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.8.0/styles/default.min.css"> 
  <link href="https://fonts.googleapis.com/css?family=Lato:700|Open+Sans|Source+Code+Pro|Libre+Baskerville:700" rel="stylesheet"> 
  <link rel="alternate" type="application/atom+xml" href="http://feeds.feedburner.com/2ality" title="2ality feed"> 
  <!--  Metadata for Google, Facebook, Twitter --> 
  <meta name="description" content="This blog post explains ways of targeting multiple platforms via the same npm package."> 
  <meta property="og:site_name" content="2ality"> 
  <meta name="twitter:site" content="@2ality"> 
 </head> 
 <body> 
  <div id="reactHtml">
   <div data-reactroot="" data-reactid="1" data-react-checksum="-766215191">
    <div id="top_row" class="no-link" data-reactid="2">
     <div class="no-link" style="color:white;background:darkblue;width:100%;text-align:center;padding-top:0.4em;padding-bottom:0.4em;margin-bottom:0.6em;" data-reactid="3">
      <a href="http://exploringjs.com/" data-reactid="4">JS&nbsp;books (free&nbsp;online)</a>
      <span class="separator" data-reactid="5"> | </span>
      <a href="http://esnextnews.com/" data-reactid="6">Newsletter</a>
      <span class="separator" data-reactid="7"> | </span>
      <a href="http://dr-axel.de/contact.html" data-reactid="8">Training</a>
     </div>
     <div id="blog_name" data-reactid="9">
      <a href="../../index.html" data-reactid="10">2ality – JavaScript and more</a>
     </div>
     <div id="lower-link-bar" class="no-link" data-reactid="11">
      <a href="../../p/about.html" data-reactid="12">About</a>
      <span class="separator" data-reactid="13"> | </span>
      <a href="../../p/donate.html" data-reactid="14">Donate</a>
      <span class="separator" data-reactid="15"> | </span>
      <a href="../../p/subscribe.html" data-reactid="16">Subscribe</a>
      <span class="separator" data-reactid="17"> | </span>
      <a href="../../archive.html" data-reactid="18">Archive</a>
      <span class="separator" data-reactid="19"> | </span>
      <a href="https://cse.google.com/cse/publicurl?cx=005653361008053745020:pdru5pmwmgi" data-reactid="20">Search</a>
      <span class="separator" data-reactid="21"> | </span>
      <a href="http://exploringjs.com/es2016-es2017/" data-reactid="22">ES2016+ES2017</a>
      <span class="separator" data-reactid="23"> | </span>
      <a href="../../2017/02/ecmascript-2018.html" data-reactid="24">ES2018</a>
     </div>
    </div>
    <div id="bottom_row" data-reactid="25">
     <div class="number-headings" id="page-core" data-reactid="26">
      <h1 data-reactid="27">Setting up multi-platform npm packages</h1>
      <div class="date-and-tags" data-reactid="28">
       <!-- react-text: 29 -->[
       <!-- /react-text -->
       <!-- react-text: 30 -->2017-04-01
       <!-- /react-text -->
       <!-- react-text: 31 -->] 
       <!-- /react-text -->
       <a href="" data-reactid="32">dev</a>
       <!-- react-text: 33 -->, 
       <!-- /react-text -->
       <a href="" data-reactid="34">javascript</a>
       <!-- react-text: 35 -->, 
       <!-- /react-text -->
       <a href="" data-reactid="36">esnext</a>
       <!-- react-text: 37 -->, 
       <!-- /react-text -->
       <a href="" data-reactid="38">npm</a>
       <!-- react-text: 39 -->, 
       <!-- /react-text -->
       <a href="" data-reactid="40">jsmodules</a>
       <!-- react-text: 41 -->, 
       <!-- /react-text -->
       <a href="" data-reactid="42">babel</a>
      </div>
      <div id="adbox" data-reactid="43">
       <div id="adbox-explain" data-reactid="44">
        (Ad, please don’t block)
       </div>
       <script async type="text/javascript" src="https://cdn.carbonads.com/carbon.js?zoneid=1673&amp;serve=C6AILKT&amp;placement=2alitycom" id="_carbonads_js" data-reactid="45"></script>
      </div>
      <div data-reactid="46">
       <p>This post is part of a series of three:</p> 
       <ol> 
        <li>Current approaches: “Setting up multi-platform npm packages”</li> 
        <li>Motivating a new approach: “<a href="http://2ality.com/2017/04/transpiling-dependencies-babel.html">Transpiling dependencies with Babel</a>”</li> 
        <li>Implementing the new approach: “<a href="http://2ality.com/2017/06/pkg-esnext.html">Delivering untranspiled source code via npm</a>”</li> 
       </ol> 
       <hr> 
       <p>This blog post explains ways of targeting multiple platforms via the same npm package.</p> 
       <!--more--> 
       <p>Before we get into the actual topic, let’s quickly review common JavaScript module formats.</p> 
       <h2 id="overview">Overview&nbsp;&nbsp;<a class="header-anchor" href="#overview" aria-hidden="true">#</a></h2> 
       <p>This following table gives an overview of standard properties in <code>package.json</code> that are used for pointing to source code.</p> 
       <table class="framed"> 
        <thead> 
         <tr> 
          <th style="text-align:left"></th> 
          <th style="text-align:left"><code>main</code></th> 
          <th style="text-align:left"><code>browser</code></th> 
          <th style="text-align:left"><code>module</code></th> 
          <th style="text-align:left"><code>es2015</code></th> 
         </tr> 
        </thead> 
        <tbody> 
         <tr> 
          <td style="text-align:left">ES version</td> 
          <td style="text-align:left">ES5+</td> 
          <td style="text-align:left">ES5+</td> 
          <td style="text-align:left">ES5+</td> 
          <td style="text-align:left">ES6</td> 
         </tr> 
         <tr> 
          <td style="text-align:left">Module format</td> 
          <td style="text-align:left">CJS</td> 
          <td style="text-align:left">CJS</td> 
          <td style="text-align:left">ESM</td> 
          <td style="text-align:left">ESM</td> 
         </tr> 
         <tr> 
          <td style="text-align:left">webpack</td> 
          <td style="text-align:left">?</td> 
          <td style="text-align:left">?</td> 
          <td style="text-align:left">?</td> 
          <td style="text-align:left">–</td> 
         </tr> 
         <tr> 
          <td style="text-align:left">Rollup</td> 
          <td style="text-align:left">(?)</td> 
          <td style="text-align:left">(?)</td> 
          <td style="text-align:left">?</td> 
          <td style="text-align:left">–</td> 
         </tr> 
         <tr> 
          <td style="text-align:left">jspm</td> 
          <td style="text-align:left">?</td> 
          <td style="text-align:left">–</td> 
          <td style="text-align:left">–</td> 
          <td style="text-align:left">–</td> 
         </tr> 
        </tbody> 
       </table> 
       <p>Note: “ES5+” means “whatever language features are supported by the JavaScript engines you are targeting”.</p> 
       <h2 id="background-javascript-module-formats">Background: JavaScript module formats&nbsp;&nbsp;<a class="header-anchor" href="#background-javascript-module-formats" aria-hidden="true">#</a></h2> 
       <p>At the moment, these are the most common JavaScript module formats:</p> 
       <ul> 
        <li>AMD (asynchronous module definition): an asynchronous module format for browsers.</li> 
        <li>CJS (CommonJS): a synchronous module format designed for servers (such as Node.js). Due to the popularity of Node.js and npm, CJS has become the most widely used format for browsers, too. But it has to be compiled to asynchronous code there. Tools that do that include webpack and Browserify.</li> 
        <li>ESM (ECMAScript modules): With ES6, modules became a built-in part of JavaScript. ESM modules are designed to work both synchronously and asynchronously, enabling them to be a universal module format. Support for ESM in browsers is slowly appearing. Support in Node.js is work in progress and estimated to be production-ready by early 2018 (preliminary support may appear earlier).</li> 
       </ul> 
       <h3 id="umd-universal-module-definition">UMD (Universal Module Definition)&nbsp;&nbsp;<a class="header-anchor" href="#umd-universal-module-definition" aria-hidden="true">#</a></h3> 
       <p>The idea of UMD is that you can implement a JavaScript module in such a manner that it supports (up to) three formats at the same time: AMD, CJS and delivery via a global variable.</p> 
       <p>This is a UMD module that supports AMD and CJS (<a href="https://github.com/umdjs/umd/blob/master/templates/nodeAdapter.js">source</a>):</p> 
       <pre><code class="language-js">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">define</span>) </span>{

    define(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">require, exports, module</span>) </span>{
        <span class="hljs-keyword">var</span> b = <span class="hljs-built_in">require</span>(<span class="hljs-string">'b'</span>);

        <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{};
    });

}( <span class="hljs-comment">// Help Node out by setting up define.</span>
    <span class="hljs-keyword">typeof</span> <span class="hljs-built_in">module</span> === <span class="hljs-string">'object'</span> &amp;&amp; <span class="hljs-built_in">module</span>.exports &amp;&amp; <span class="hljs-keyword">typeof</span> define !== <span class="hljs-string">'function'</span> ?
    <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">factory</span>) </span>{ <span class="hljs-built_in">module</span>.exports = factory(<span class="hljs-built_in">require</span>, exports, <span class="hljs-built_in">module</span>); } :
    define
));
</code></pre> 
       <p>Documentation:</p> 
       <ul> 
        <li>“<a href="https://github.com/umdjs/umd">UMD (Universal Module Definition) patterns for JavaScript modules</a>” by Addy Osmani, Evan Carroll, Anders D. Johnson, James Burke and others</li> 
        <li>“<a href="https://github.com/umdjs/umd/issues/35">When sniffing for exports, make sure exports is not an HTMLElement</a>” by Chris Dickinson explains how to best detect if Node.js is running (e.g.: checking whether <code>require</code> is a function may not work if <code>require.js</code> is being used).</li> 
       </ul> 
       <h2 id="the-problem">The problem&nbsp;&nbsp;<a class="header-anchor" href="#the-problem" aria-hidden="true">#</a></h2> 
       <p>You can only deliver source code for a single platform via an npm package. <a href="https://docs.npmjs.com/files/package.json#engines">Property <code>engines</code> of <code>package.json</code></a> lets you specify exactly what platform that is:</p> 
       <pre><code class="language-js">{ <span class="hljs-string">"engines"</span> : { <span class="hljs-string">"node"</span> : <span class="hljs-string">"&gt;=0.10.3 &lt;0.12"</span> } }
{ <span class="hljs-string">"engines"</span> : { <span class="hljs-string">"npm"</span> : <span class="hljs-string">"~1.0.20"</span> } }
</code></pre> 
       <p>However, that doesn’t help you with the following use cases, where you need source code for multiple platforms per package:</p> 
       <ol> 
        <li>Browsers: deliver both a native version (e.g. in ES5 via CJS) and a “bleeding edge” version (e.g. latest ECMAScript version via an ES module), to be transpiled by Babel.</li> 
        <li>Node.js: deliver the same module for several versions of Node.js.</li> 
        <li>Browsers: allow new libraries to age gracefully – transpile only as long your target platforms don’t support the features, yet. We want the same convenience that <a href="http://2ality.com/2017/02/babel-preset-env.html"><code>babel-preset-env</code></a> affords us.</li> 
       </ol> 
       <p>There are two dimensions at play here:</p> 
       <ul> 
        <li>On one hand, there is a distinction between code that is to be transpiled and “native” code.</li> 
        <li>On the other hand, native code may have to run on platforms with different capabilities.</li> 
       </ul> 
       <p>The next section covers solutions for use case 1.</p> 
       <h2 id="solutions">Solutions&nbsp;&nbsp;<a class="header-anchor" href="#solutions" aria-hidden="true">#</a></h2> 
       <p>The following subsections explain properties in <code>package.json</code> that can be used to point to alternate versions of the same code.</p> 
       <p>When I use the term “native features”, it means: language features supported by the platforms you are targeting.</p> 
       <h3 id="main-native-features-cjs"><code>main</code>: native features, CJS&nbsp;&nbsp;<a class="header-anchor" href="#main-native-features-cjs" aria-hidden="true">#</a></h3> 
       <p><code>main</code> is the standard mechanism for pointing to the module code inside a package if you want to override the default path, <code>index.js</code>. It is supported everywhere. This is an example:</p> 
       <pre><code class="language-js">{
  <span class="hljs-string">"name"</span>: <span class="hljs-string">"the-package"</span>,
  <span class="hljs-string">"version"</span>: <span class="hljs-string">"1.0.1"</span>,
  <span class="hljs-string">"main"</span>: <span class="hljs-string">"dist/the-package.umd.js"</span>,
}
</code></pre> 
       <h3 id="module-native-features-esm"><code>module</code>: native features, ESM&nbsp;&nbsp;<a class="header-anchor" href="#module-native-features-esm" aria-hidden="true">#</a></h3> 
       <p>This property helps tools such as the tree-shaking module bundler Rollup that depend on the ESM format. Other than that, only native language features are supported. That is, <code>module</code> is just <code>main</code> with a different module format:</p> 
       <pre><code class="language-js">{
  <span class="hljs-string">"name"</span>: <span class="hljs-string">"the-package"</span>,
  <span class="hljs-string">"version"</span>: <span class="hljs-string">"1.0.1"</span>,
  <span class="hljs-string">"main"</span>: <span class="hljs-string">"dist/the-package.umd.js"</span>,
  <span class="hljs-string">"module"</span>: <span class="hljs-string">"dist/the-package.es2015.js"</span>
}
</code></pre> 
       <p>Documentation:</p> 
       <ul> 
        <li>“<a href="https://github.com/rollup/rollup/wiki/pkg.module">pkg.module</a>” by Rich Harris</li> 
       </ul> 
       <h3 id="es2015-es6-esm"><code>es2015</code>: ES6, ESM&nbsp;&nbsp;<a class="header-anchor" href="#es2015-es6-esm" aria-hidden="true">#</a></h3> 
       <p>Angular v4 delivers each package in three formats:</p> 
       <ul> 
        <li>UMD: via property <code>main</code></li> 
        <li>ES5/ESM: via property <code>module</code></li> 
        <li>ES6/ESM: via property <code>es2015</code></li> 
       </ul> 
       <p>This is what <a href="https://github.com/angular/core-builds/blob/master/package.json">its <code>package.json</code></a> looks like:</p> 
       <pre><code class="language-js">{
  <span class="hljs-string">"name"</span>: <span class="hljs-string">"@angular/core"</span>,
  <span class="hljs-string">"main"</span>: <span class="hljs-string">"./bundles/core.umd.js"</span>,
  <span class="hljs-string">"module"</span>: <span class="hljs-string">"./@angular/core.es5.js"</span>,
  <span class="hljs-string">"es2015"</span>: <span class="hljs-string">"./@angular/core.js"</span>,
  ···
}
</code></pre> 
       <p>I like the idea of this property. But its name and semantics mean that it’ll age relatively quickly.</p> 
       <p>Documentation:</p> 
       <ul> 
        <li>“<a href="https://angularjs.blogspot.de/2017/03/angular-400-now-available.html">Angular 4.0.0 Now Available</a>” by Stephen Fluin</li> 
       </ul> 
       <h3 id="jsnextmain-the-precursor-of-module"><code>jsnext:main</code>: the precursor of <code>module</code>&nbsp;&nbsp;<a class="header-anchor" href="#jsnextmain-the-precursor-of-module" aria-hidden="true">#</a></h3> 
       <p>The property <code>jsnext:main</code> is now deprecated. It was superseded by <code>module</code>.</p> 
       <h3 id="browser-browser-specific-code"><code>browser</code>: browser-specific code&nbsp;&nbsp;<a class="header-anchor" href="#browser-browser-specific-code" aria-hidden="true">#</a></h3> 
       <p>The idea of the property <code>browser</code> is that:</p> 
       <ul> 
        <li><code>main</code> provides Node.js code</li> 
        <li><code>browser</code> provides browser-specific code</li> 
       </ul> 
       <p>The simplest mode of <code>browser</code> is as an alternative to <code>main</code>:</p> 
       <pre><code class="language-js">{
    <span class="hljs-string">"main"</span>: <span class="hljs-string">"dist/the-package.server.js"</span>,
    <span class="hljs-string">"browser"</span>: <span class="hljs-string">"dist/the-package.client.js"</span>,
    ···
}
</code></pre> 
       <p>An advanced mode lets you replace specific files:</p> 
       <pre><code class="language-js"><span class="hljs-string">"browser"</span>: {
    <span class="hljs-string">"module-a"</span>: <span class="hljs-string">"./shims/module-a.js"</span>,
    <span class="hljs-string">"./server/only.js"</span>: <span class="hljs-string">"./shims/client-only.js"</span>
}
</code></pre> 
       <p>Documentation:</p> 
       <ul> 
        <li>“<a href="https://github.com/defunctzombie/package-browser-field-spec">package-browser-field-spec</a>” by Roman Shtylman</li> 
       </ul> 
       <h3 id="support-by-bundlers">Support by bundlers&nbsp;&nbsp;<a class="header-anchor" href="#support-by-bundlers" aria-hidden="true">#</a></h3> 
       <table class="framed"> 
        <thead> 
         <tr> 
          <th style="text-align:left"></th> 
          <th style="text-align:left"><code>main</code></th> 
          <th style="text-align:left"><code>browser</code></th> 
          <th style="text-align:left"><code>module</code></th> 
          <th style="text-align:left"><code>es2015</code></th> 
         </tr> 
        </thead> 
        <tbody> 
         <tr> 
          <td style="text-align:left">webpack</td> 
          <td style="text-align:left">?</td> 
          <td style="text-align:left">?</td> 
          <td style="text-align:left">?</td> 
          <td style="text-align:left">–</td> 
         </tr> 
         <tr> 
          <td style="text-align:left">Rollup</td> 
          <td style="text-align:left">(?)</td> 
          <td style="text-align:left">(?)</td> 
          <td style="text-align:left">?</td> 
          <td style="text-align:left">–</td> 
         </tr> 
         <tr> 
          <td style="text-align:left">jspm</td> 
          <td style="text-align:left">?</td> 
          <td style="text-align:left">–</td> 
          <td style="text-align:left">–</td> 
          <td style="text-align:left">–</td> 
         </tr> 
        </tbody> 
       </table> 
       <p>Comments:</p> 
       <ul> 
        <li>webpack lets you configure where it looks for source code (see next section), so getting it to support <code>es2015</code> is simple.</li> 
        <li>Rollup specializes in the ESM format. If you want it to handle CJS modules, you need <a href="https://github.com/rollup/rollup-plugin-commonjs">a plugin</a>.</li> 
        <li>jspm has <a href="https://github.com/jspm/registry/wiki/Configuring-Packages-for-jspm">its own configuration mechanisms</a> (property <code>jspm</code> and others).</li> 
       </ul> 
       <h2 id="webpack">webpack&nbsp;&nbsp;<a class="header-anchor" href="#webpack" aria-hidden="true">#</a></h2> 
       <p>For webpack, you can configure where it searches for module code inside packages via the <code>resolve.mainFields</code> option:</p> 
       <pre><code class="language-js"><span class="hljs-built_in">module</span>.exports = {
    ···
    target: <span class="hljs-string">"web"</span>,
        <span class="hljs-comment">// the environment in which the bundle should run</span>
    resolve: {
        <span class="hljs-comment">// options for resolving module requests</span>
        mainFields: ···,
        ···
    },
    ···
}
</code></pre> 
       <p>The default value of this property depends on the value of <code>target</code>.</p> 
       <p>If <code>target</code> is <code>"web"</code>, <code>"webworker"</code> or unspecified then the default is:</p> 
       <pre><code class="language-js">mainFields: [<span class="hljs-string">"browser"</span>, <span class="hljs-string">"module"</span>, <span class="hljs-string">"main"</span>]
</code></pre> 
       <p>If <code>target</code> has any other value (including <code>"node"</code>) then the default is:</p> 
       <pre><code class="language-js">mainFields: [<span class="hljs-string">"module"</span>, <span class="hljs-string">"main"</span>]
</code></pre> 
       <p>Documentation:</p> 
       <ul> 
        <li>“<a href="https://webpack.js.org/configuration/resolve/#resolve-mainfields"><code>resolve.mainFields</code></a>” in the webpack documentation</li> 
       </ul> 
       <h2 id="conclusion">Conclusion&nbsp;&nbsp;<a class="header-anchor" href="#conclusion" aria-hidden="true">#</a></h2> 
       <p>Support for multi-platform packages has come a long way. The main challenge ahead is to make sure transpiling external dependencies is as “auto-updating” and hassle-free as <a href="http://2ality.com/2017/02/babel-preset-env.html"><code>babel-preset-env</code></a>.</p> 
       <h2 id="further-reading">Further reading&nbsp;&nbsp;<a class="header-anchor" href="#further-reading" aria-hidden="true">#</a></h2> 
       <ul> 
        <li>Chapter “<a href="http://exploringjs.com/es6/ch_modules.html">Modules</a>” in “Exploring ES6”</li> 
        <li><a href="http://2ality.com/2017/02/babel-preset-env.html"><code>babel-preset-env</code>: a preset that configures Babel for you</a></li> 
       </ul> 
      </div>
      <div style="margin-top:3em;" data-reactid="47"> 
       <hr> 
       <div id="disqus_thread"></div> 
       <script>
                var disqus_config = function () {
                    this.page.url = 'http://www.2ality.com/2017/04/setting-up-multi-platform-packages.html';
                    this.page.identifier = 'http://www.2ality.com/2017/04/setting-up-multi-platform-packages.html';
                };
                (function() {  // DON'T EDIT BELOW THIS LINE
                    var d = document, s = d.createElement('script');

                    s.src = 'https://2ality.disqus.com/embed.js';

                    s.setAttribute('data-timestamp', +new Date());
                    (d.head || d.body).appendChild(s);
                })();
            </script> 
       <noscript>
        Please enable JavaScript to view the 
        <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a>
       </noscript> 
      </div>
     </div>
     <div id="right_column" data-reactid="48">
      <div class="no-link" style="text-align:center;" data-reactid="49">
       <a href="http://rauschma.de/" data-reactid="50"><img style="margin-left:auto;margin-right:auto;" width="180px" height="180px" src="../../img/axel_head.jpg" data-reactid="51"><br data-reactid="52">
        <!-- react-text: 53 -->Dr. Axel Rauschmayer
        <!-- /react-text --></a>
       <br data-reactid="54">
       <a href="https://twitter.com/rauschma" data-reactid="55">Twitter</a>
       <!-- react-text: 56 -->, 
       <!-- /react-text -->
       <a href="https://social.tchncs.de/@rauschma" data-reactid="57">Mastodon</a>
      </div>
      <div data-reactid="58">
       <h2 data-reactid="59">Most popular (last 30 days)</h2>
       <!-- react-text: 60 -->Loading...
       <!-- /react-text -->
      </div>
     </div>
    </div>
   </div>
  </div> 
  <script defer>
    var pageData = {"metaDescription":"This blog post explains ways of targeting multiple platforms via the same npm package.","relativeWebPath":"2017/04/setting-up-multi-platform-packages.html","titleText":"Setting up multi-platform npm packages","titleHtml":"Setting up multi-platform npm packages","date":"2017-04-01","tagsArray":["dev","javascript","esnext","npm","jsmodules","babel"],"postHtml":"<p>This post is part of a series of three:</p>\n<ol>\n<li>Current approaches: “Setting up multi-platform npm packages”</li>\n<li>Motivating a new approach: “<a href=\"http://2ality.com/2017/04/transpiling-dependencies-babel.html\">Transpiling dependencies with Babel</a>”</li>\n<li>Implementing the new approach: “<a href=\"http://2ality.com/2017/06/pkg-esnext.html\">Delivering untranspiled source code via npm</a>”</li>\n</ol>\n<hr>\n<p>This blog post explains ways of targeting multiple platforms via the same npm package.</p>\n<!--more-->\n<p>Before we get into the actual topic, let’s quickly review common JavaScript module formats.</p>\n<h2 id=\"overview\">Overview  <a class=\"header-anchor\" href=\"#overview\" aria-hidden=\"true\">#</a></h2>\n<p>This following table gives an overview of standard properties in <code>package.json</code> that are used for pointing to source code.</p>\n<table class=\"framed\">\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\"><code>main</code></th>\n<th style=\"text-align:left\"><code>browser</code></th>\n<th style=\"text-align:left\"><code>module</code></th>\n<th style=\"text-align:left\"><code>es2015</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ES version</td>\n<td style=\"text-align:left\">ES5+</td>\n<td style=\"text-align:left\">ES5+</td>\n<td style=\"text-align:left\">ES5+</td>\n<td style=\"text-align:left\">ES6</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Module format</td>\n<td style=\"text-align:left\">CJS</td>\n<td style=\"text-align:left\">CJS</td>\n<td style=\"text-align:left\">ESM</td>\n<td style=\"text-align:left\">ESM</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">webpack</td>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:left\">–</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Rollup</td>\n<td style=\"text-align:left\">(?)</td>\n<td style=\"text-align:left\">(?)</td>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:left\">–</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">jspm</td>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:left\">–</td>\n<td style=\"text-align:left\">–</td>\n<td style=\"text-align:left\">–</td>\n</tr>\n</tbody>\n</table>\n<p>Note: “ES5+” means “whatever language features are supported by the JavaScript engines you are targeting”.</p>\n<h2 id=\"background-javascript-module-formats\">Background: JavaScript module formats  <a class=\"header-anchor\" href=\"#background-javascript-module-formats\" aria-hidden=\"true\">#</a></h2>\n<p>At the moment, these are the most common JavaScript module formats:</p>\n<ul>\n<li>AMD (asynchronous module definition): an asynchronous module format for browsers.</li>\n<li>CJS (CommonJS): a synchronous module format designed for servers (such as Node.js). Due to the popularity of Node.js and npm, CJS has become the most widely used format for browsers, too. But it has to be compiled to asynchronous code there. Tools that do that include webpack and Browserify.</li>\n<li>ESM (ECMAScript modules): With ES6, modules became a built-in part of JavaScript. ESM modules are designed to work both synchronously and asynchronously, enabling them to be a universal module format. Support for ESM in browsers is slowly appearing. Support in Node.js is work in progress and estimated to be production-ready by early 2018 (preliminary support may appear earlier).</li>\n</ul>\n<h3 id=\"umd-universal-module-definition\">UMD (Universal Module Definition)  <a class=\"header-anchor\" href=\"#umd-universal-module-definition\" aria-hidden=\"true\">#</a></h3>\n<p>The idea of UMD is that you can implement a JavaScript module in such a manner that it supports (up to) three formats at the same time: AMD, CJS and delivery via a global variable.</p>\n<p>This is a UMD module that supports AMD and CJS (<a href=\"https://github.com/umdjs/umd/blob/master/templates/nodeAdapter.js\">source</a>):</p>\n<pre><code class=\"language-js\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">define</span>) </span>{\n\n    define(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">require, exports, module</span>) </span>{\n        <span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'b'</span>);\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{};\n    });\n\n}( <span class=\"hljs-comment\">// Help Node out by setting up define.</span>\n    <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">module</span> === <span class=\"hljs-string\">'object'</span> &amp;&amp; <span class=\"hljs-built_in\">module</span>.exports &amp;&amp; <span class=\"hljs-keyword\">typeof</span> define !== <span class=\"hljs-string\">'function'</span> ?\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">factory</span>) </span>{ <span class=\"hljs-built_in\">module</span>.exports = factory(<span class=\"hljs-built_in\">require</span>, exports, <span class=\"hljs-built_in\">module</span>); } :\n    define\n));\n</code></pre>\n<p>Documentation:</p>\n<ul>\n<li>“<a href=\"https://github.com/umdjs/umd\">UMD (Universal Module Definition) patterns for JavaScript modules</a>” by Addy Osmani, Evan Carroll, Anders D. Johnson, James Burke and others</li>\n<li>“<a href=\"https://github.com/umdjs/umd/issues/35\">When sniffing for exports, make sure exports is not an HTMLElement</a>” by Chris Dickinson explains how to best detect if Node.js is running (e.g.: checking whether <code>require</code> is a function may not work if <code>require.js</code> is being used).</li>\n</ul>\n<h2 id=\"the-problem\">The problem  <a class=\"header-anchor\" href=\"#the-problem\" aria-hidden=\"true\">#</a></h2>\n<p>You can only deliver source code for a single platform via an npm package. <a href=\"https://docs.npmjs.com/files/package.json#engines\">Property <code>engines</code> of <code>package.json</code></a> lets you specify exactly what platform that is:</p>\n<pre><code class=\"language-js\">{ <span class=\"hljs-string\">\"engines\"</span> : { <span class=\"hljs-string\">\"node\"</span> : <span class=\"hljs-string\">\"&gt;=0.10.3 &lt;0.12\"</span> } }\n{ <span class=\"hljs-string\">\"engines\"</span> : { <span class=\"hljs-string\">\"npm\"</span> : <span class=\"hljs-string\">\"~1.0.20\"</span> } }\n</code></pre>\n<p>However, that doesn’t help you with the following use cases, where you need source code for multiple platforms per package:</p>\n<ol>\n<li>Browsers: deliver both a native version (e.g. in ES5 via CJS) and a “bleeding edge” version (e.g. latest ECMAScript version via an ES module), to be transpiled by Babel.</li>\n<li>Node.js: deliver the same module for several versions of Node.js.</li>\n<li>Browsers: allow new libraries to age gracefully – transpile only as long your target platforms don’t support the features, yet. We want the same convenience that <a href=\"http://2ality.com/2017/02/babel-preset-env.html\"><code>babel-preset-env</code></a> affords us.</li>\n</ol>\n<p>There are two dimensions at play here:</p>\n<ul>\n<li>On one hand, there is a distinction between code that is to be transpiled and “native” code.</li>\n<li>On the other hand, native code may have to run on platforms with different capabilities.</li>\n</ul>\n<p>The next section covers solutions for use case 1.</p>\n<h2 id=\"solutions\">Solutions  <a class=\"header-anchor\" href=\"#solutions\" aria-hidden=\"true\">#</a></h2>\n<p>The following subsections explain properties in <code>package.json</code> that can be used to point to alternate versions of the same code.</p>\n<p>When I use the term “native features”, it means: language features supported by the platforms you are targeting.</p>\n<h3 id=\"main-native-features-cjs\"><code>main</code>: native features, CJS  <a class=\"header-anchor\" href=\"#main-native-features-cjs\" aria-hidden=\"true\">#</a></h3>\n<p><code>main</code> is the standard mechanism for pointing to the module code inside a package if you want to override the default path, <code>index.js</code>. It is supported everywhere. This is an example:</p>\n<pre><code class=\"language-js\">{\n  <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"the-package\"</span>,\n  <span class=\"hljs-string\">\"version\"</span>: <span class=\"hljs-string\">\"1.0.1\"</span>,\n  <span class=\"hljs-string\">\"main\"</span>: <span class=\"hljs-string\">\"dist/the-package.umd.js\"</span>,\n}\n</code></pre>\n<h3 id=\"module-native-features-esm\"><code>module</code>: native features, ESM  <a class=\"header-anchor\" href=\"#module-native-features-esm\" aria-hidden=\"true\">#</a></h3>\n<p>This property helps tools such as the tree-shaking module bundler Rollup that depend on the ESM format. Other than that, only native language features are supported. That is, <code>module</code> is just <code>main</code> with a different module format:</p>\n<pre><code class=\"language-js\">{\n  <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"the-package\"</span>,\n  <span class=\"hljs-string\">\"version\"</span>: <span class=\"hljs-string\">\"1.0.1\"</span>,\n  <span class=\"hljs-string\">\"main\"</span>: <span class=\"hljs-string\">\"dist/the-package.umd.js\"</span>,\n  <span class=\"hljs-string\">\"module\"</span>: <span class=\"hljs-string\">\"dist/the-package.es2015.js\"</span>\n}\n</code></pre>\n<p>Documentation:</p>\n<ul>\n<li>“<a href=\"https://github.com/rollup/rollup/wiki/pkg.module\">pkg.module</a>” by Rich Harris</li>\n</ul>\n<h3 id=\"es2015-es6-esm\"><code>es2015</code>: ES6, ESM  <a class=\"header-anchor\" href=\"#es2015-es6-esm\" aria-hidden=\"true\">#</a></h3>\n<p>Angular v4 delivers each package in three formats:</p>\n<ul>\n<li>UMD: via property <code>main</code></li>\n<li>ES5/ESM: via property <code>module</code></li>\n<li>ES6/ESM: via property <code>es2015</code></li>\n</ul>\n<p>This is what <a href=\"https://github.com/angular/core-builds/blob/master/package.json\">its <code>package.json</code></a> looks like:</p>\n<pre><code class=\"language-js\">{\n  <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"@angular/core\"</span>,\n  <span class=\"hljs-string\">\"main\"</span>: <span class=\"hljs-string\">\"./bundles/core.umd.js\"</span>,\n  <span class=\"hljs-string\">\"module\"</span>: <span class=\"hljs-string\">\"./@angular/core.es5.js\"</span>,\n  <span class=\"hljs-string\">\"es2015\"</span>: <span class=\"hljs-string\">\"./@angular/core.js\"</span>,\n  ···\n}\n</code></pre>\n<p>I like the idea of this property. But its name and semantics mean that it’ll age relatively quickly.</p>\n<p>Documentation:</p>\n<ul>\n<li>“<a href=\"https://angularjs.blogspot.de/2017/03/angular-400-now-available.html\">Angular 4.0.0 Now Available</a>” by Stephen Fluin</li>\n</ul>\n<h3 id=\"jsnextmain-the-precursor-of-module\"><code>jsnext:main</code>: the precursor of <code>module</code>  <a class=\"header-anchor\" href=\"#jsnextmain-the-precursor-of-module\" aria-hidden=\"true\">#</a></h3>\n<p>The property <code>jsnext:main</code> is now deprecated. It was superseded by <code>module</code>.</p>\n<h3 id=\"browser-browser-specific-code\"><code>browser</code>: browser-specific code  <a class=\"header-anchor\" href=\"#browser-browser-specific-code\" aria-hidden=\"true\">#</a></h3>\n<p>The idea of the property <code>browser</code> is that:</p>\n<ul>\n<li><code>main</code> provides Node.js code</li>\n<li><code>browser</code> provides browser-specific code</li>\n</ul>\n<p>The simplest mode of <code>browser</code> is as an alternative to <code>main</code>:</p>\n<pre><code class=\"language-js\">{\n    <span class=\"hljs-string\">\"main\"</span>: <span class=\"hljs-string\">\"dist/the-package.server.js\"</span>,\n    <span class=\"hljs-string\">\"browser\"</span>: <span class=\"hljs-string\">\"dist/the-package.client.js\"</span>,\n    ···\n}\n</code></pre>\n<p>An advanced mode lets you replace specific files:</p>\n<pre><code class=\"language-js\"><span class=\"hljs-string\">\"browser\"</span>: {\n    <span class=\"hljs-string\">\"module-a\"</span>: <span class=\"hljs-string\">\"./shims/module-a.js\"</span>,\n    <span class=\"hljs-string\">\"./server/only.js\"</span>: <span class=\"hljs-string\">\"./shims/client-only.js\"</span>\n}\n</code></pre>\n<p>Documentation:</p>\n<ul>\n<li>“<a href=\"https://github.com/defunctzombie/package-browser-field-spec\">package-browser-field-spec</a>” by Roman Shtylman</li>\n</ul>\n<h3 id=\"support-by-bundlers\">Support by bundlers  <a class=\"header-anchor\" href=\"#support-by-bundlers\" aria-hidden=\"true\">#</a></h3>\n<table class=\"framed\">\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\"><code>main</code></th>\n<th style=\"text-align:left\"><code>browser</code></th>\n<th style=\"text-align:left\"><code>module</code></th>\n<th style=\"text-align:left\"><code>es2015</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">webpack</td>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:left\">–</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Rollup</td>\n<td style=\"text-align:left\">(?)</td>\n<td style=\"text-align:left\">(?)</td>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:left\">–</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">jspm</td>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:left\">–</td>\n<td style=\"text-align:left\">–</td>\n<td style=\"text-align:left\">–</td>\n</tr>\n</tbody>\n</table>\n<p>Comments:</p>\n<ul>\n<li>webpack lets you configure where it looks for source code (see next section), so getting it to support <code>es2015</code> is simple.</li>\n<li>Rollup specializes in the ESM format. If you want it to handle CJS modules, you need <a href=\"https://github.com/rollup/rollup-plugin-commonjs\">a plugin</a>.</li>\n<li>jspm has <a href=\"https://github.com/jspm/registry/wiki/Configuring-Packages-for-jspm\">its own configuration mechanisms</a> (property <code>jspm</code> and others).</li>\n</ul>\n<h2 id=\"webpack\">webpack  <a class=\"header-anchor\" href=\"#webpack\" aria-hidden=\"true\">#</a></h2>\n<p>For webpack, you can configure where it searches for module code inside packages via the <code>resolve.mainFields</code> option:</p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">module</span>.exports = {\n    ···\n    target: <span class=\"hljs-string\">\"web\"</span>,\n        <span class=\"hljs-comment\">// the environment in which the bundle should run</span>\n    resolve: {\n        <span class=\"hljs-comment\">// options for resolving module requests</span>\n        mainFields: ···,\n        ···\n    },\n    ···\n}\n</code></pre>\n<p>The default value of this property depends on the value of <code>target</code>.</p>\n<p>If <code>target</code> is <code>&quot;web&quot;</code>, <code>&quot;webworker&quot;</code> or unspecified then the default is:</p>\n<pre><code class=\"language-js\">mainFields: [<span class=\"hljs-string\">\"browser\"</span>, <span class=\"hljs-string\">\"module\"</span>, <span class=\"hljs-string\">\"main\"</span>]\n</code></pre>\n<p>If <code>target</code> has any other value (including <code>&quot;node&quot;</code>) then the default is:</p>\n<pre><code class=\"language-js\">mainFields: [<span class=\"hljs-string\">\"module\"</span>, <span class=\"hljs-string\">\"main\"</span>]\n</code></pre>\n<p>Documentation:</p>\n<ul>\n<li>“<a href=\"https://webpack.js.org/configuration/resolve/#resolve-mainfields\"><code>resolve.mainFields</code></a>” in the webpack documentation</li>\n</ul>\n<h2 id=\"conclusion\">Conclusion  <a class=\"header-anchor\" href=\"#conclusion\" aria-hidden=\"true\">#</a></h2>\n<p>Support for multi-platform packages has come a long way. The main challenge ahead is to make sure transpiling external dependencies is as “auto-updating” and hassle-free as <a href=\"http://2ality.com/2017/02/babel-preset-env.html\"><code>babel-preset-env</code></a>.</p>\n<h2 id=\"further-reading\">Further reading  <a class=\"header-anchor\" href=\"#further-reading\" aria-hidden=\"true\">#</a></h2>\n<ul>\n<li>Chapter “<a href=\"http://exploringjs.com/es6/ch_modules.html\">Modules</a>” in “Exploring ES6”</li>\n<li><a href=\"http://2ality.com/2017/02/babel-preset-env.html\"><code>babel-preset-env</code>: a preset that configures Babel for you</a></li>\n</ul>\n","webRootPath":"../../","webImagePath":"../../img/","webDataPath":"../../data/","widgetData":{}};
  </script> 
  <script defer src="../../script/PostPage.bundle.js"></script> 
  <script defer>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-46839352-1', 'auto');
    ga('send', 'pageview');
  </script>  
 </body>
</html>